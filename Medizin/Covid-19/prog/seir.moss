
use math.ode: runge_kutta
use math: exp, ln

info = table{
   de = table{N=83000000}
}

function calc_beta({R0,lambda,a})
   if a>(lambda+a)/R0
      return lambda/(a/(lambda+a)-1/R0)
   else
      return 0.0
   end
end

function calc_gamma(argm)
   {R0} = argm
   return calc_beta(argm)/R0
end

function gamma_from_time({R0,T2,L})
   return calc_gamma(R0=R0,a=1/L,lambda=ln(2)/T2)
end

function SIR_system(beta,gamma)
   return |t,[S,I,R]| [
      -beta*I*S,
      beta*I*S-gamma*I,
      gamma*I
   ]
end

function SEIR_system(beta,gamma,a)
   return |t,[S,E,I,R]| [
      -beta*I*S,
      beta*I*S-a*E,
      a*E-gamma*I,
      gamma*I
   ]
end

function SEIR_system_time(beta,gamma,a)
   return |t,[S,E,I,R]| [
      -beta(t)*I*S,
      beta(t)*I*S-a*E,
      a*E-gamma*I,
      gamma*I
   ]
end

function SIR_simulation({beta,gamma,I0})
   return runge_kutta({
      f = SIR_system(beta,gamma),
      t0 = 0.0, y0 = [1.0-I0,I0,0.0],
      w = 200.0, h = 0.1,
      unilateral = true
   })
end

function SEIR_simulation({beta,gamma,a,E0,I0})
   return runge_kutta({
      f = SEIR_system(beta,gamma,a),
      t0 = 0.0, y0 = [1.0-E0-I0,E0,I0,0.0],
      w = 200.0, h = 0.1,
      unilateral = true
   })
end

function SEIR_simulation_time({beta,gamma,a,E0,I0})
   return runge_kutta({
      f = SEIR_system_time(beta,gamma,a),
      t0 = 0.0, y0 = [1.0-E0-I0,E0,I0,0.0],
      w = 200.0, h = 0.1,
      unilateral = true
   })
end

function simulation1()
   N = info.de.N
   R0 = 2.6; T2 = 3.05; L = 4; lambda = ln(2)/T2
   gamma = gamma_from_time(R0=R0,T2=T2,L=L)
   beta = R0*gamma
   C0 = 1100/N # 09. MÃ¤rz
   E0 = C0*lambda/beta
   I0 = C0*lambda*(lambda+gamma)*L/beta

   use plotlib: system
   s = system(align=[-0.8,"bottom"],scale=[1,10000])

   R0 = |t| 1.1 if 84<t else 1.8 if 70<t else 1.1 if 10<t else 2.6
   beta = |t| R0(t)*gamma
   S,E,I,R = SEIR_simulation_time({
       beta=beta, gamma=gamma, a=1/4, E0=E0, I0=I0
   })
   s.plot(|t| 10000*R0(7*t))
   s.plot([|t| N*I(7*t),|t| N*(1-S(7*t))])

   s.idle()
   # s.save("out.png")
end

function generate()
   use plotlib: system
   N = info.de.N
   s = system(align=[-0.8,"bottom"], scale=[1,100])
   R0 = 2.2; a = 1/3
   beta = calc_beta(R0=R0,a=a,lambda=0.2)
   E0 = 20/N
   I0 = 20/N
   S,E,I,R = SEIR_simulation(a=1/3,beta=beta,gamma=beta/R0,E0=E0,I0=I0)
   C = |t| N*(1-S(t))
   s.plot(C)
   
   rng = rand()
   data = list([t,int(C(t)+(rng()-0.5)*(C(t+1)-C(t)))] for t in 0..14)
   s.scatter(data)
   print(data)

   s.idle()
end

# generate()

# R0 = 2.2; a = 1/3; lambda=0.2; E0 = 20/N; I0=20/N
# beta = calc_beta(R0=R0,a=a,lambda=0.2)
# gamma = beta/R0
data_generated = [
  [0, 50], [1, 73], [2, 78], [3, 116], [4, 147], [5, 183], [6, 229],
  [7, 316], [8, 400], [9, 470], [10, 527], [11, 754], [12, 874],
  [13, 1098], [14, 1184]
]

function regression(data)
   use math.statistics.reg: linear_regression
   use plotlib: system
   t = linear_regression(data)
   print(t)
   s = system(align=[-0.8,"bottom"], scale=[1,1])
   s.plot(t.f)
   s.scatter(data)
   s.idle()
end

# regression(data_generated.map(|[t,y]| [t,ln(y)]))

function err_sq_sum(data,f)
   return data.sum(|[t,y]| (f(t)-y)^2)
end

function prognose()
   use plotlib: system
   N = 83000000
   real = {
      lambda = 0.2,
      R0 = 2.2, a = 1/3, E0 = 20/N, I0 = 20/N   
   }
   # s = system(align=[-0.8,"bottom"], scale=[1,200])
   s = system(align=[-0.8,"bottom"], scale=[10,0.01])
   s.scatter(data_generated,color=[0,0.5,0])
   
   real["beta"] = calc_beta(real)
   real["gamma"] = real["beta"]/real["R0"]
   S,E,I,R = SEIR_simulation(real)
   C = |t| N*(1-S(t))
   # s.plot(C)
   s.plot(I,color=[0,0,0.6])

   R0_alpha_tab = [
       [2.0,0.4],
       [2.2,0.6],
       [2.4,1.0],
       [2.6,0.6],
       [2.8,0.4]
   ]

   alpha = 1.0
   R0 = 2.2; a = 1/3
   #for R0, alpha in R0_alpha_tab
   #   for a  in [1/3,1/4,1/5]
         estimated = {
            lambda = 0.2295,
            R0 = R0, a = a, E0 = 19.8/N, I0 = 9.0/N
         }
         estimated["beta"] = calc_beta(estimated)
         estimated["gamma"] = estimated["beta"]/estimated["R0"]
         S,E,I,R = SEIR_simulation(estimated)
         C = |t| N*(1-S(t))
         # print(err_sq_sum(data_generated,C))
         # s.plot(C,color=[0,0,0,alpha])
         s.plot(I,color=[0,0,0,alpha])

         R0 = estimated["R0"]
         lambda = estimated["lambda"]
         beta = lambda/(1-1/R0)
         gamma = beta/R0
         I0 = 30/N
         S,I,R = SIR_simulation(beta=beta,gamma=gamma,I0=I0)
         # s.plot(|t| N*(1-S(t)),color=[0,0,0,0.4])
         s.plot(I,color=[0,0,0,0.4])
   #   end
   #end

   s.idle()
end

# prognose()

function main()
   simulation1()
end

main()
