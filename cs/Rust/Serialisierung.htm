<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Serialisierung</h1>
<h2 id="toc">Inhaltsverzeichnis</h2>
<ol>
<li><span class="modest">Serialisierung als Text</span>
  <ol>
  <li><span class="modest">Serde für JSON</span>
  </ol>
<li><a href="#Binaer">Serialisierung als Binärdaten</a>
  <ol>
  <li><a href="#Byte-Reihenfolge">Byte-Reihenfolge</a>
  <li><span class="modest">Serialisierung von Strukturen</span>
  </ol>
</ol>

<h2 id="Binaer">Serialisierung als Binärdaten</h2>

<h3 id="Byte-Reihenfolge">Byte-Reihenfolge</h3>

<p>Bei der Serialisierung einer Zahl tut sich das Problem auf,
dass die <i>Byte-Reihenfolge</i> von Computer-System zu
Computer-System unterschiedlich sein kann.

<p>Die Maschine, die das Programm ausführt, stellt eine Zahl in ihrem
Arbeitsspeicher in einer bestimmten Form dar. Führt man nun eine
sogenannte Transmutation aus, wo der Typ der Zahl als ein Array von
Bytes uminterpretiert wird ohne eine Konvertierung vorzunehmen,
enthüllt dies die interne Darstellung. Sendet die Maschine die Daten
an eine andere, kommt es infolge zu einer Fehlinterpretation, sofern
die Byte-Reihenfolgen der Maschinen unterschiedlich sind.

<p>Zur Schaffung einer festen Schnittstelle, die zwischen
unterschiedlichen Systemen vermittelt, einigt man sich bei einem
Format auf eine feste Byte-Reihenfolge, &ndash; entweder
<i>Little-Endian</i> oder <i>Big-Endian</i>.

<p>Zur Umwandlung in das entsprechende Format gibt es zwei
Möglichkeiten:

<ol>
<li>Bei Benutzung von Bit-Arithmetik bleibt die Darstellung
  im Arbeitsspeicher verborgen, womit das Problem entfällt.
<li>Die Byte-Reihenfolge der Maschine lässt sich zur Kompilierzeit
  oder zur Laufzeit ermitteln. Im Anschluss an die Transmutation findet
  ggf. eine Umkehrung der Reihenfolge statt.

</ol>

<p>Die Standardbibliothek stellt für die Umwandlung bereits Funktionen
zur Verfügung, so dass sich niemand mit Transmutationen befassen muss.
Die folgende Tabelle listet die zur Verfügung gestellten
Funktionen auf.

<table class="bt">
<tr><th><th>Serialisierung<th>Deserialisierung
<tr><th>Little-Endian<td><code>to_le_bytes</code><td><code>from_le_bytes</code>
<tr><th>Big-Endian<td><code>to_be_bytes</code><td><code>from_be_bytes</code>
<tr><th>Nativ<td><code>to_ne_bytes</code><td><code>from_ne_bytes</code>
</table>

<p>Das nächste Programm serialisiert ein Array von
Zahlen des Typs <code>u32</code> und schreibt
die daraus entstandenen Binärdaten in eine Datei.
Die Funktion <code>to_le_bytes</code> wandelt die jeweilige Zahl
dabei in eine Bytesequenz der Reihenfolge Little-Endian um.

<pre class="rust ibox">
fn serialize_u32(a: &amp;[u32]) -&gt; Vec&lt;u8&gt; {
    let mut acc: Vec&lt;u8&gt; = Vec::with_capacity(4*a.len());
    for x in a {
        acc.extend(&amp;u32::to_le_bytes(*x));
    }
    acc
}

fn main() {
    let a: &amp;[u32] = &amp;[1, 2, 3, 4];
    let data = serialize_u32(a);
    std::fs::write("Datei.bin", &amp;data).unwrap();
}
</pre>

<p>Betrachtet man <code>Datei.bin</code> nun im Hex-Editor,
findet man vor:

<pre class="ibox">
01 00 00 00 02 00 00 00 03 00 00 00 04 00 00 00
</pre>

<p>Ein zweites Programm liest die Datei wieder ein und
deserialisiert die Daten. Die Funktion <code>from_le_bytes</code>
setzt dabei die jeweilige Zahl aus der im Little-Endian-Format
vorliegenden Bytesequenz zusammen.

<pre class="rust ibox">
fn main() {
    let bytes = std::fs::read("Datei.bin").unwrap();

    for t in bytes.chunks_exact(4) {
        let value = u32::from_le_bytes([t[0], t[1], t[2], t[3]]);
        println!("{}", value);
    }
}
</pre>

</body>
</html>

