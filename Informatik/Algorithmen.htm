<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Algorithmen</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src="../moss/doc/js/csyntax.js"></script>
  <script>
ckeyword["size_t"]="typedef";
ckeyword["uint"]="typedef";
ckeyword["ulong"]="typedef";
ckeyword["Element"]="typedef";
  </script>
  <style>
.keyword{color: #204080; font-weight: bold;}
.typedef{color: #800020; font-weight: bold;}
.string{color: #a00060;}
.comment{color: #604000;}
.symbol{color: #202020; font-weight: bold;}
.bracket{color: #006060; font-weight: bold;}
.number{color: #204040;}
.preprocessor{color: #006060; font-weight: bold;}
ol.toc > li{font-weight: bold;}
ol.toc > li ol{font-weight: normal;}
  </style>
</head>
<body>

<br>
<h1>Algorithmen in C/C++</h1>

<h2>Inhaltsverzeichnis</h2>

<ol class="toc">
<li><a href="#Funktionen">Funktionen</a>
  <ol>
  <li><a href="#Potenzfunktion">Potenzfunktion</a>
  </ol>
<li><a href="#Kombinatorik">Kombinatorik</a>
  <ol>
  <li><a href="#Binomialkoeffizient">Binomialkoeffizient</a>
  </ol>
<li><a href="#ZT">Zahlentheorie</a>
  <ol>
  <li><a href="#ggT">Größter gemeinsamer Teiler</a>
  <li><a href="#kgV">Kleinstes gemeinsames Vielfaches</a>
  <li><a href="#Primzahlen">Primzahlen</a>
  </ol>
<li><a href="#Zufall">Zufallszahlen</a>
<li><a href="#Sortierung">Sortierung</a>
  <ol>
  <li><a href="#Bubblesort">Bubblesort</a>
  <li><a href="#Quicksort">Quicksort</a>
  </ol>
<li><a href="#Eingabe">Eingabe und Ausgabe</a>
<li><a href="#Zeichenketten">Zeichenketten</a>
<li><a href="#Suche">Suchalgorithmen</a>
  <ol>
  <li><a href="#Teilzeichenketten">Teilzeichenketten</a>
  <li><a href="#binaere-Suche">Binäre Suche</a>
  </ol>
<li><a href="#Allokation">Allokation</a>
  <ol>
  <li><a href="#Buddy">Buddy-Allokator</a>
  </ol>
<li><a href="#Datenstrukturen">Datenstrukturen</a>
  <ol>
  <li><a href="#Listen">Listen</a>
  <li><a href="#Hashtabellen">Hashtabellen</a>
  </ol>
</ol>

<h2 id="Funktionen"
>Funktionen</h2>

<h3 id="Potenzfunktion"
>Potenzfunktion</h3>

<pre class="c">
// Naiver Algorithmus

long pow(long a, unsigned int n){
  long y=1;
  for(unsigned int i=0; i&lt;n; i++){
    y*=a;
  }
  return y;
}

// Expandiert man den folgenden kompakten Algorithmus,
// so merkt man, dass der Exponent in eine binäre Darstellung
// zerlegt wird.

long pow(long a, unsigned int n){
  long y=1;
  while(n&gt;0){
    if(n%2==0){
      n/=2; a*=a;
    }else{
      n--; y*=a;
    }
  }
  return y;
}

// Da Zahlen schon in binärer Darstellung gespeichert sind,
// ist die Division n/2 eigentlich nicht notwendig.
// Man kann n/2 gegen n&gt;&gt;1 und n%2 gegen n&amp;1 ersetzen,
// die Bedingung n&gt;0 lässt sich gegen n ersetzen,
// was aber alles vom optimierenden Compiler automatisch gemacht
// werden sollte.

long pow(long a, unsigned int n){
  long y=1;
  while(n){
    if(n&amp;1){
      n--; y*=a;
    }else{
      n&gt;&gt;=1; a*=a;
    }
  }
  return y;
}

// Modulare Potenzfunktion
// y = a^n mod m

typedef unsigned long ulong;

ulong powmod(ulong a, ulong n, ulong m){
  ulong y=1;
  a=a%m;
  while(n&gt;0){
    if(n%2==0){
      n/=2; a=(a*a)%m;
    }else{
      n--; y=(y*a)%m;
    }
  }
  return y;
}
</pre>


<h2 id="Kombinatorik"
>Kombinatorik</h2>

<h3 id="Binomialkoeffizient"
>Binomialkoeffizient</h3>

<pre class="c">
long choose(long n, long k){
  long y,i;
  if(k&gt;n) return 0;
  if(k&gt;n-k) k=n-k;
  y=1; k--;
  for(i=0; i&lt;=k; i++){
    y = y*(n-i)/(i+1);
  }
  return y;
}

// Pascalsches Dreieck

void Pascal(){
  for(long i=0; i&lt;=12; i++){
    for(long j=0; j&lt;=i; j++){
      printf("%4i",choose(i,j));
    }
    printf("\n");
  }
}
</pre>

<h2 id="ZT"
>Zahlentheorie</h2>

<h3 id="ggT">Größter gemeinsamer Teiler</h3>
<pre class="c">
// Euklidischer Algorithmus

long gcd(long a, long b){
  if(b==0) return a;
  else if(a==0) return b;
  else if(a&gt;b) return gcd(a-b,b);
  else return gcd(a,b-a);
}

long gcd(long a, long b){
  if(a==0) return b;
  while(b!=0){
    if(a&gt;b) a=a-b;
    else b=b-a;
  }
  return a;
}

long gcd(long a, long b){
  if(b==0) return a;
  else return gcd(b,a%b);
}

long gcd(long a, long b){
  long h;
  while(b!=0){
    h = a%b; a=b; b=h;
  }
  return a;
}
</pre>

<h3 id="kgV">Kleinstes gemeinsames Vielfaches</h3>

<pre class="c">
long lcm(long a, long b){
  return a*b/gcd(a,b);
}
</pre>

<h3 id="Primzahlen">Primzahlen</h3>

<pre class="c">
// Naiver Primzahltest

int isprime(long n){
  long i;
  for(i=2; i&lt;n; i++){
    if(n%i==0) return 0;
  }
  return 1;
}


// Verbesserter Primzahltest

int isprime(long n){
  long i;
  for(i=2; i*i&lt;=n; i++){
    if(n%i==0) return 0;
  }
  return 1;
}


// Fermatscher Primzahltest

int fermat(long n){
  long i;
  if(n&lt;6){
    return isprime(n);
  }
  for(i=2; i&lt;6; i++){
    if(powmod(i,n-1,n)!=1) return 0;
  }
  return 1;
}
</pre>

<h2 id="Zufall"
>Zufallszahlen</h2>

<pre class="c">
// Zufallszahl von eingeschlossen a bis
// eingeschlossen b.

int random(int a, int b){
  return rand()%(b-a+1)+a;
}


// Mischen

void shuffle(long* a, long n){
  long i,j,h;
  for(i=n-1; i&gt;0; i--){
    j=rand()%(i+1);
    h=a[j];
    a[j]=a[i];
    a[i]=h;
  }
}
</pre>
<br>

<h2 id="Sortierung"
>Sortierung</h2>

<h3 id="Bubblesort"
>Bubblesort</h3>

<pre class="c">
typedef long Element;

void swap(Element* a, Element* b){
  Element h;
  h=*b; *b=*a; *a=h;
}

void bubblesort(Element* a, size_t n){
  size_t i,j;
  for(j=0; j&lt;n; j++){
    for(i=0; i+1&lt;n; i++){
      if(a[i+1]&lt;a[i]) swap(a+i,a+i+1);
    }
  }
}
</pre>
<br>

<h3 id="Quicksort"
>Quicksort</h3>

<pre class="c">
typedef long Element;

size_t partition(Element* a, size_t n, size_t k){
  Element pivot = a[k];
  swap(a+k,a+n-1);
  size_t i=0;
  for(size_t j=0; j+1&lt;n; j++){
    if(a[j]&lt;=pivot){
      swap(a+i,a+j);
      i++;
    }
  }
  swap(a+i,a+n-1);
  return i;
}

void quicksort(Element* a, size_t n){
  if(n&lt;2) return;
  size_t i = partition(a,n,0);
  quicksort(a,i);
  quicksort(a+i+1,n-i-1);
}


// Quicksort, polymorph

void memory_swap(char* a, char* b, int size){
  char h;
  for(int i=0; i&lt;size; i++){
    h=b[i]; b[i]=a[i]; a[i]=h;
  }
}

void quicksort(void* p, int n, int size, int compare(void*,void*)){
  int i,j=0;
  char* a = (char*)p;
  if(n&lt;2) return;
  memory_swap(a+n/2*size,a+(n-1)*size,size);
  for(i=0; i&lt;n-1; i++){
    if(compare(a+i*size,a+(n-1)*size)&lt;=0){
      memory_swap(a+i*size,a+j*size,size);
      j++;
    }
  }
  memory_swap(a+j*size,a+(n-1)*size,size);
  quicksort(a,j,size,compare);
  quicksort(a+(j+1)*size,n-j-1,size,compare);
}

int compare_int(void* a, void* b){
  return *(int*)a-*(int*)b;
}

void sort(int* a, int n){
  qsort(a,n,sizeof(int),compare_int);
}
</pre>
<br>

<h2 id="Eingabe"
>Eingabe und Ausgabe</h2>

<pre class="c">
// Ausgabe einer Zahl
// zur Basis b mit 2&lt;=b&lt;=10.

void puti(int n, int b){
  int a=n/b;
  if(a!=0) puti(a,b);
  putc(n%b+'0');
}

// Ausgabe einer Zahl zur Basis b.
// Keine Beschränkung auf b&lt;=10.

void puti(int n, int b){
  int a=n/b;
  if(a!=0) puti(a,b);
  printf("(%i)",n%b);
}

// Eingabe einer Zahl

int getnum(){
  char a[20];
  fgets(a,20,stdin);
  return atoi(a);
}
</pre>


<h2 id="Zeichenketten"
>Zeichenketten</h2>

<pre class="c">
// Umwandlung einer Zeichenkette
// in eine Zahl.

int stoi(const char* s){
  int i,y,sgn;
  i=0; y=0; sgn=1;
  if(s[i]=='-'){
    i++; sgn=-1;
  }
  while(isdigit(s[i])){
    y=10*y+s[i]-48;
    i++;
  }
  return sgn*y;
}
</pre>

<h2 id="Suche"
>Suchalgorithmen</h2>

<h3 id="Teilzeichenketten"
>Teilzeichenketten</h3>

<pre class="c">
// Suche von einer Teilzeichenkette
// in einer Zeichenkette.
// Naiver Algorithmus.

int find(const char* a, int n, const char* sub, int subn){
  int i,j,m,found;
  m=n-subn+1;
  for(j=0; j&lt;m; j++){
    found=1;
    for(i=0; i&lt;subn; i++){
      if(a[j+i]!=sub[i]){
        found=0;
        break;
      }
    }
    if(found) return j;
  }
  return -1;
}
</pre>

<h3 id="binaere-Suche"
>Binäre Suche</h3>

<pre class="c">
int bfind(const int* p, int n, int x){
  int a,b,m;
  a=0; b=n-1;
  while(a&lt;=b){
    m = (a+b)/2;
    if(p[m]==x) return m;
    if(p[m]&lt;x) a=m+1;
    else b=m-1;
  }
  return -1;
}

// Binäre Suche, polymorph

int bfind(const void* data, int n, int size, void* x,
  int compare(const void*,const void*)
){
  const char* p = (const char*)data;
  int a,b,m;
  a=0; b=n-1;
  while(a&lt;=b){
    m = (a+b)/2;
    if(compare(p+m*size,x)==0) return m;
    if(compare(p+m*size,x)&lt;0) a=m+1;
    else b=m-1;
  }
  return -1;
}

int compare_int(const void* a, const void* b){
  return *(int*)a-*(int*)b;
}

int find(const int* a, int n, int x){
  return bfind(a,n,sizeof(int),&amp;x,compare_int);
}
</pre>

<h2 id="Allokation">Allokation</h2>
<h3 id="Buddy">Buddy-Allokator</h3>
<pre class="c">
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

struct node{
  struct node* next;
};

struct free_list{
  struct node* first;
};

typedef struct node node;
typedef struct free_list free_list;

// 257*2^8
char mem[257*256];
int imax=8;
free_list free_tab[9];

int exp2i(int n){
  return 1&lt;&lt;n;
}

void print_free_tab(){
  node* p;
  int i;
  for(i=imax; i&gt;=0; i--){
    printf("%.2i|",i);
    for(p=free_tab[i].first; p!=0; p=p-&gt;next){
      printf("*");
    }
    printf("\n");
  }
}

int bsize(void* p){
  return *((char*)p-1);
}

int getindex(int n){
  int i,k;
  i=256;
  k=0;
  while(1){
    if(n&lt;=i) return k;
    i*=2;
    k++;
  }
}

void append(free_list* a, node* p1){
  node* p=a-&gt;first;
  if(p==0){
    a-&gt;first=p1;
  }else{
    while(p-&gt;next!=0) p=p-&gt;next;
    p-&gt;next=p1;
  }
  p1-&gt;next=0;
}

node* getn(int n){
  if(n&gt;imax) return 0;
  node* p = free_tab[n].first;
  if(p==0){
    p = getn(n+1);
    if(p!=0){
      append(&amp;free_tab[n],(node*)((char*)p+257*exp2i(n)));
    }
    return p;
  }else{
    free_tab[n].first=p-&gt;next;
    return p;
  }
}

void* bmalloc(int n){
  n=getindex(n);
  char* p = (char*)getn(n);
  if(p==0) return 0;
  *p=n;
  return p+1;
}

void erase(int index, int size, int n){
  node* p = free_tab[n].first;
  int ibuddy = index^exp2i(n);
  node* block = (node*)(mem+ibuddy*257);
  node* prev=p;
  while(p!=0){
    if(p==block){
      if(ibuddy&lt;index) index=ibuddy;
      if(n&lt;imax) erase(index,size*2,n+1);
      if(p==prev) free_tab[n].first=p-&gt;next;
      else prev-&gt;next=p-&gt;next;
      return;
    }
    prev=p;
    p=p-&gt;next;
  }
  append(&amp;free_tab[n],(node*)(mem+index*257));
}

void bfree(void* p){
  int index,n,size;
  if(p==0) return;
  index = ((char*)p-mem-1)/257;
  n = *((char*)p-1);
  size = 257*exp2i(n);
  erase(index,size,n);
}

int main(){
  free_tab[imax].first = (node*)mem;
  char* s = bmalloc(10);
  bfree(s);
}
</pre>

<h2 id="Datenstrukturen">Datenstrukturen</h3>
<h3 id="Listen">Listen</h3>
<pre class="c">
#ifndef LIST_H
#define LIST_H

struct node{
  struct node *next, *prev;
  void* data;
};

struct list{
  struct node *first, *last;
};

typedef struct node node;
typedef struct list list;

list* list_list();
int list_empty(list*);
int list_size(list*);
void list_push(list*, void*);
void list_pop(list*);
void list_remove(list*, node*);
void list_clear(list*);
void list_dispose(list*);
void list_insert(list*,node*,void*);
void list_print(list*, void (*)(void*));
void* list_get(list*,int);
void list_reverse(list*);
list* list_slice(node*,node*);
#endif

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include "list.h"
#define dispose free

void error(const char* s){
  puts(s);
  exit(1);
}

void* malloc2(int n){
  void* p;
  p = malloc(n);
  if(p==0){
    error("memory error in module list");
  }
  return p;
}

list* list_list(){
  list* p;
  p = malloc2(sizeof(list));
  p-&gt;first=0;
  return p;
}

int list_empty(list* a){
  return a-&gt;first==0;
}

int list_size(list* a){
  node* p;
  int size=0;
  for(p=a-&gt;first; p!=0; p=p-&gt;next){
    size++;
  }
  return size;
}

void list_push(list* a, void* data){
  if(a-&gt;first==0){
    a-&gt;first = malloc2(sizeof(node));
    a-&gt;first-&gt;data = data;
    a-&gt;first-&gt;next = 0;
    a-&gt;first-&gt;prev = 0;
    a-&gt;last = a-&gt;first;
  }else{
    a-&gt;last-&gt;next = malloc2(sizeof(node));
    a-&gt;last-&gt;next-&gt;prev = a-&gt;last;
    a-&gt;last = a-&gt;last-&gt;next;
    a-&gt;last-&gt;data = data;
    a-&gt;last-&gt;next = 0;
  }
}

void list_pop(list* a){
  node* p;
  if(a-&gt;first==0){
    error("error in list_pop");
  }else if(a-&gt;first==a-&gt;last){
    dispose(a-&gt;first);
    a-&gt;first=0;
  }else{
    p = a-&gt;last-&gt;prev;
    p-&gt;next=0;
    dispose(a-&gt;last);
    a-&gt;last=p;
  }
}

void list_remove(list* a, node* p){
  node *prev, *next;
  if(a-&gt;first==0){
    error("error in list_remove");
  }else if(a-&gt;first==a-&gt;last){
    list_pop(a);
  }else if(p==a-&gt;first){
    next = a-&gt;first-&gt;next;
    next-&gt;prev=0;
    dispose(a-&gt;first);
    a-&gt;first = next;
  }else if(p==a-&gt;last){
    list_pop(a);
  }else{
    prev = p-&gt;prev;
    next = p-&gt;next;
    dispose(p);
    prev-&gt;next = next;
    next-&gt;prev = prev;
  }
}

void list_clear(list* a){
  while(!list_empty(a)){
    list_pop(a);
  }
}

void list_dispose(list* a){
  list_clear(a);
  dispose(a);
}

void list_print(list* a, void (*put)(void*)){
  node *p, *last;
  p = a-&gt;first;
  if(p==0){
    printf("[]");
  }else if(p==a-&gt;last){
     printf("["); put(p-&gt;data);
     printf("]");
  }else{
    last = a-&gt;last;
    printf("[");
    while(p!=last){
      put(p-&gt;data);
      p=p-&gt;next;
      printf(", ");
    }
    put(p-&gt;data);
    printf("]");
  }
}

void list_insert(list* a, node* p, void* data){
  node* p2 = malloc2(sizeof(node));
  p2-&gt;data = data;
  if(p==0){
    error("error in list_insert");
  }else if(p-&gt;prev==0){
    p2-&gt;prev=0;
    p2-&gt;next=p;
    p-&gt;prev=p2;
    a-&gt;first=p2;
  }else{
    p2-&gt;prev = p-&gt;prev;
    p2-&gt;next = p;
    p-&gt;prev-&gt;next = p2;
    p-&gt;prev = p2;
  }
}

void* list_get(list* a, int n){
  node* p;
  int i;
  if(a-&gt;first==0){
    error("error in list_get: list is empty");
  }
  if(n&lt;0){
    p=a-&gt;last;
    n=-n-1;
    for(i=0; i&lt;n; i++){
      p=p-&gt;prev;
      if(p==0){
        error("error in list_get: out of bounds");
      }
    }
  }else{
    p=a-&gt;first;
    for(i=0; i&lt;n; i++){
      p=p-&gt;next;
      if(p==0){
        error("error in list_get: out of bounds");
      }
    }
  }
  return p-&gt;data;
}

void list_reverse(list* a){
  node *p1, *p2;
  void* h;
  p1 = a-&gt;first;
  p2 = a-&gt;last;
  if(p1==0) return;
  while(p1!=p2 &amp;&amp; p2-&gt;next!=p1){
    h=p1-&gt;data;
    p1-&gt;data=p2-&gt;data;
    p2-&gt;data=h;
    p1=p1-&gt;next;
    p2=p2-&gt;prev;
  }
}

list* list_slice(node* p, node* p2){
  list* a2 = list_list();
  if(p2==0){
    error("error in list_slice");
  }
  while(1){
    if(p==0){
      error("error in list_slice");
    }
    list_push(a2,p-&gt;data);
    if(p==p2) break;
    p=p-&gt;next;
  }
  return a2;
}
</pre>

<h3 id="Hashtabellen">Hashtabellen</h3>
<pre class="c">
#ifndef MAP_H
#define MAP_H

struct element{
  char* id;
  void* data;
};

struct map{
  int size, capacity;
  struct element* a;
};

typedef struct element element;
typedef struct map map;

map* map_map();
int map_find(map*, char*);
void* map_get(map*,char*);
void map_insert(map*,char*,void*);
void map_remove(map*,int);
void map_dispose(map*);
#endif

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include "map.h"
#define u32 unsigned int

void* malloc2(int n){
  void* p;
  p = malloc(n);
  if(p==0){
    puts("memory error in module map");
    exit(1);
  }
  return p;
}

u32 hash(char* a){
  u32 y=0;
  while(*a!=0){
    y = *a+(y&lt;&lt;6)+(y&lt;&lt;16)-y;
    a++;
  }
  return y;
}

map* map_map(){
  map* m;
  m = malloc2(sizeof(map));
  m-&gt;a = malloc2(4*sizeof(element));
  m-&gt;a[0].id=0; m-&gt;a[1].id=0;
  m-&gt;a[1].id=0; m-&gt;a[2].id=0;
  m-&gt;size=0;
  m-&gt;capacity=4;
  return m;
}

int map_find(map* m, char* id){
  int index;
  char* p;
  index = hash(id)%m-&gt;capacity;
  while(1){
    p = m-&gt;a[index].id;
    if(p==0)return -1;
    if(strcmp(p,id)==0){
      return index;
    }
    index=(index+1)%m-&gt;capacity;
  }
}

void* map_get(map* m, char* id){
  int index;
  index = map_find(m,id);
  if(index&lt;0){
    return 0;
  }else{
    return m-&gt;a[index].data;
  }
}

void map_inserta(element* a, int n, char* id, void* data){
  int index;
  index = hash(id)%n;
  while(a[index].id!=0){
    index=(index+1)%n;
  }
  a[index].id=id;
  a[index].data=data;
}

void map_insert(map* m, char* id, void* data){
  int index;
  element *a,*a1;
  int i,n,n2;
  if(map_find(m,id)&gt;=0){
    puts("error in insert: expected unique key");
    exit(1);
  }
  index = hash(id)%m-&gt;capacity;
  while(m-&gt;a[index].id!=0){
    index=(index+1)%m-&gt;capacity;
  }
  m-&gt;a[index].id=id;
  m-&gt;a[index].data=data;
  n=m-&gt;capacity;
  m-&gt;size++;
  if(m-&gt;size*2&gt;n){
    n2 = n*2;
    m-&gt;capacity=n2;
    a = malloc2(sizeof(element)*n2);
    for(i=0; i&lt;n2; i++){
      a[i].id=0;
    }
    a1=m-&gt;a;
    for(i=0; i&lt;n; i++){
      if(a1[i].id!=0){
        map_inserta(a,n2,a1[i].id,a1[i].data);
      }
    }
    free(a1);
    m-&gt;a=a;
  }
}

void map_remove(map* m, int index){
  element *a,*a1;
  int i,n,h;
  if(index&lt;0){
    return;
  }else{
    m-&gt;a[index].id=0;
    m-&gt;a[index].data=0;
    m-&gt;size--;
  }
  if(m-&gt;size&lt;m-&gt;capacity*4){
    n=m-&gt;capacity;
    h=n/2;
    m-&gt;capacity=h;
    a = malloc2(sizeof(element)*h);
    for(i=0; i&lt;h; i++){
      a[i].id=0;
    }
    a1=m-&gt;a;
    for(i=0; i&lt;n; i++){
      if(a1[i].id!=0){
        map_inserta(a,h,a1[i].id,a1[i].data);
      }
    }
    free(a1);
    m-&gt;a=a;
  }
}

void map_dispose(map* m){
  free(m-&gt;a);
  free(m);
}
</pre>


<br>
<p><span class="modest"
>Dieser Text steht unter der Creative-Commons-Lizenz CC0.</span>

</body>
</html>

