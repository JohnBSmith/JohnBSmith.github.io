<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Abhängige Typen</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/gallina.js"></script>
</head>
<body>

<p>&uparrow;<a href="Gallina.htm">Programmieren in Gallina</a>
<h1>Abhängige Typen</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Funktionen">Abhängige Funktionen</a>
<li><a href="#Paare">Abhängige Paare</a>
</ol>

<h2 id="Funktionen">Abhängige Funktionen</h2>

<p>Funktionentypen dürfen nicht nur von Typen abhängig sein,
sondern gleichermaßen von Werten. Ein einfaches Beispiel hierfür
bietet der Umgang mit einem durch eine natürliche Zahl
parametrisieren Typ.

<p>Es soll durchführbar sein, zwei Längen zu addieren,
zwei Flächen zu addieren, zwei Volumina zu addieren.
Aber es soll nicht durchführbar sein, eine Länge und eine Fläche
zu addieren. Wir definieren dazu einen neuen Typkonstruktor
<code>Quantity</code>, der jeder Dimension einen unterschiedlichen
Typ zuordnet:

<table class="bt indent">
<tr><th>Typ<th>Bedeutung
<tr><td><code>Quantity&nbsp;1</code><td>eine Länge
<tr><td><code>Quantity&nbsp;2</code><td>eine Fläche
<tr><td><code>Quantity&nbsp;3</code><td>ein Volumen
</table>

<p>Der Typkonstruktor und die generische Addition sind
wie folgt implementierbar:

<pre class="ibox gallina">
Inductive Quantity: nat -&gt; Type :=
  quantity: forall (dim: nat), nat -&gt; Quantity dim.

Definition length := quantity 1.

Definition add {dim: nat} (x y: Quantity dim): Quantity dim
  := match x with quantity _ xv =&gt;
       match y with quantity _ yv =&gt; quantity _ (xv + yv) end
     end.

Compute add (length 12) (length 9).
</pre>

<p>Es ist <code>add</code> vom abhängigen Typ

<p class="indent">∏<sub><var>n</var>: ℕ</sub> (Quantity(<var>n</var>)
→ Quantity(<var>n</var>) → Quantity(<var>n</var>)).

<p>Bereits der Wertkonstruktor <code>quantity</code> hat einen
abhängigen Typ, der da ist

<p class="indent">∏<sub><var>n</var>: ℕ</sub> (ℕ → Quantity(<var>n</var>)).

<h2 id="Paare">Abhängige Paare</h2>

<p>Die Summe
∑<sub><var>x</var>:&nbsp;<var>U</var></sub>&nbsp;<var>B</var>(<var>x</var>)
kann man sich für ein unendlich großes Universum <var>U</var> als
disjunkte Vereinigung unendlich vieler Typen vorstellen. Ein Wert
dieses Typs ist ein Paar (<var>a</var>,&nbsp;<var>b</var>), bei
dem <var>b</var> vom Typ <var>B</var>(<var>a</var>) ist. Weil also
der Typ des rechten Eintrags vom linken abhängt, spricht man
von einem <i>abhängigen Paar</i>. Synonym zu <i>Summe</i> und
<i>Sigma-Typ</i> spricht man daher auch von einem <i>Typ abhängiger Paare</i>.

<p>In Gallina werden Summen und abhängige Paare so dargestellt:

<table class="bt indent">
<tr>
<th>Ausdruck
<th>Syntax
<tr>
<td>∑<sub><var>x</var>:&nbsp;<var>U</var></sub>&nbsp;<var>B</var>(<var>x</var>)
<td><code>{x: U &amp; B x}</code>
<tr>
<td>(<var>a</var>,&nbsp;<var>b</var>)
<td><code>existT _ a b</code>
</table>

<p>Man kann Summen zum verstecken von Information nutzen,
womit sich abstrakte Datentypen modellieren lassen.
Ein kurzes Beispiel hierzu. Es soll ein Typ für Zeitwerte definiert
werden, wobei sich der Wert über Zugriffsfunktionen bzw. Methoden
in Minuten oder Sekunden auslesen lässt. Zunächst die Funktionalität:

<pre class="ibox gallina">
Record Time T := {value: T; min: T -&gt; nat; sec: T -&gt; nat}.

Definition from_min (m: nat): Time nat
  := {| value := m; min := fun m =&gt; m; sec := fun m =&gt; 60*m |}.
  
Definition t := from_min 2.
Compute t.(min nat) t.(value nat).
Compute t.(sec nat) t.(value nat).
</pre>

<p>Um einen abstrakten Datentyp zu erhalten, würde wir gerne
den Zugriff auf den internen Wert verbergen. Das heißt, der
Wert soll lediglich über die Schnittstellen <code>min</code>
und <code>sec</code> auslesbar sein, aber nicht in direkter
Weise als

<pre class="ibox gallina">
Compute t.(value nat).
</pre>

<p>Ändert man <code>from_min</code> nun so, dass die Signatur
ℕ&nbsp;→&nbsp;∑<sub><var>T</var></sub>&nbsp;Time(<var>T</var>)
anstelle ℕ&nbsp;→&nbsp;Time(ℕ) lautet, wird der interne Wert
verborgen. Wir können zwar noch den Wert (<var>T</var>,&nbsp;<var>t</var>)
mit <var>t</var>:&nbsp;Time(<var>T</var>) erhalten, aber es bleibt
unbekannt dass <var>T</var> mit ℕ übereinstimmt.

<p>Die Implementierung:

<pre class="ibox gallina">
Definition from_min (m: nat): {T: Type &amp; Time T}
  := existT _ (nat: Type) {| value := m;
     min := fun m =&gt; m; sec := fun m =&gt; 60*m |}.
  
Definition t := from_min 2.
Compute match t with existT _ T t =&gt; t.(min T) t.(value T) end.
Compute match t with existT _ T t =&gt; t.(sec T) t.(value T) end.
</pre>

<p>Den umständlichen Zugriff kann man schließlich noch in Funktionen
verpacken:

<pre class="ibox gallina">
Definition in_min (t: {x: Type &amp; Time x}): nat
  := match t with existT _ T t =&gt; t.(min T) t.(value T) end.
  
Definition in_sec (t: {x: Type &amp; Time x}): nat
  := match t with existT _ T t =&gt; t.(sec T) t.(value T) end.
  
Definition t := from_min 2.
Compute in_min t.
Compute in_sec t.
</pre>

</body>
</html>
