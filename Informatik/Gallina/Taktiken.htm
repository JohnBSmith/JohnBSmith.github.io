<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Taktiken</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/gallina.js"></script>
</head>
<body>

<p>&uparrow;<a href="Gallina.htm">Programmieren in Gallina</a>
<h1>Taktiken</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Hilfsbefehle">Hilfsbefehle</a>
<li><a href="#Assistiertes-Schliessen">Assistiertes Schließen</a>
<li><a href="#Vorwaertsschliessen">Vorwärtsschließen</a>
<li><a href="#Definition">Definition vermittels Taktiken</a>
<li><a href="#Kunstgriffe">Kunstgriffe</a>
<li><a href="#Allquantoren">Taktiken für Allquantoren</a>
<li><a href="#Existenzquantoren">Taktiken für Existenzquantoren</a>
</ol>

<h2 id="Hilfsbefehle">Hilfsbefehle</h2>

<table class="bt">
<tr><th>Befehl<th>Erklärung
<tr><td><code>Locate "/\".</code><td>Sucht die Definition des Symbols <code>/\</code>.
<tr><td><code>About and.</code><td>Informiert über den Typ von <code>and</code>.
<tr><td><code>Print and.</code><td>Term und Typ von <code>and</code>.
<tr><td><code>Search (_ /\ _ -> _).</code><td>Findet unter anderem <code>proj1</code> und <code>proj2</code>.
</table>

<h2 id="Assistiertes-Schliessen">Assistiertes Schließen</h2>

<p>Rüchwärtsschließen. Man arbeitet sich also von der Wurzel des
Beweisbaums bis zu Blättern durch.

<table class="bt indent">
<tr><th>Regel<th>Taktik
<tr><td>
<pre class="proof">
Γ ⊢ ?: A    Γ ⊢ ?: B
────────────────────
    Γ ⊢ ?: A∧B
</pre>
<td style="vertical-align: middle"><code>split</code>

<tr><td>
<pre class="proof">
Γ, a: A, b: B ⊢ ?: C
────────────────────
  Γ, h: A∧B ⊢ ?: C
</pre>
<td style="vertical-align: middle"><code>destruct h as (a, b)</code>

<tr><td>
<pre class="proof">
Γ, a: A ⊢ ?: B
──────────────
 Γ ⊢ ?: A → B
</pre>
<td style="vertical-align: middle"><code>intro a</code>

<tr><td>
<pre class="proof">
Γ ⊢ f: A → B    Γ ⊢ ?: A
────────────────────────
        Γ ⊢ ?: B
</pre>
<td style="vertical-align: middle"><code>apply f</code>

<tr><td>
<pre class="proof">
 Γ ⊢ ?: A
──────────
Γ ⊢ ?: A∨B
</pre>
<td style="vertical-align: middle"><code>left</code>

<tr><td>
<pre class="proof">
 Γ ⊢ ?: B
──────────
Γ ⊢ ?: A∨B
</pre>
<td style="vertical-align: middle"><code>right</code>
</table>

<br>
<table class="bt indent">
<tr><th>Regel<th>Taktik
<tr><td>
<pre class="proof">
Γ ⊢ h: A∨B    Γ, a: A ⊢ :?    Γ, b: B ⊢ :?
──────────────────────────────────────────
                  Γ ⊢ ?:
</pre>
<td style="vertical-align: middle"><code>destruct h as [a | b]</code>
</table>

<p>Kurzes Beispiel:

<pre class="proof indent">
───────────────── <small>exact a</small>
a: A, b: B ⊢ a: A
───────────────── <small>destruct h as (a, b)</small>
  h: A∧B ⊢ a: A
────────────────── <small>intro h</small>
⊢ (h ↦ a): A∧B → A
</pre>

<p>Die Implementierung:

<pre class="ibox gallina">
Theorem projl (A B: Prop):
  A /\ B -&gt; A.
Proof.
  intro h.
  destruct h as (a, b).
  exact a.
Qed.
</pre>

<p>Die integrierte Entwicklungsumgebung zeigt hierbei nach jedem
Schritt die verbleibenden Ziele und die vorhandenen Antezedenzen
an.

<h2 id="Vorwaertsschliessen">Vorwärtsschließen</h2>

<p>Beim Rückwärtsschließen führt man verbleibende Ziele bei
einfacheren Teilbeweisen schrittweise auf Unterziele zurück.


<pre class="ibox gallina">
Theorem contraposition (A B: Prop):
  (A -> B) -> (~B -> ~A).
Proof.
  (* unfold not. *)
  intro h. intro nb. intro a.
  apply nb. apply h. exact a.
Qed.
</pre>

<p>In der integrierten Entwicklungsumgebung sieht man den folgenden
Verlauf der verbleibenden Ziele:

<div style="overflow: auto">
<table class="bt" style="white-space: nowrap">
<tr><th>Kontext<th>Verbleibendes Ziel<th>Nächste Taktik
<tr><td>leer (<code>A, B: Prop</code>)
  <td><code>(A → B) → ¬B → ¬A</code><td><code>intro h</code>
<tr><td><code>h: A → B</code><td><code>¬B → ¬A</code><td><code>intro nb</code>
<tr><td><code>h: A → B</code>, <code>nb: ¬B</code><td><code>¬A</code><td><code>intro a</code>
<tr><td><code>h: A → B</code>, <code>nb: ¬B</code>, <code>a: A</code><td><code>⊥</code><td><code>apply nb</code>
<tr><td><code>h: A → B</code>, <code>nb: ¬B</code>, <code>a: A</code><td><code>B</code><td><code>apply h</code>
<tr><td><code>h: A → B</code>, <code>nb: ¬B</code>, <code>a: A</code><td><code>A</code><td><code>exact a</code>
</table>
</div>

<p>Die Taktik <code>assert</code> ermöglicht es nun, innerhalb des
Rückwärtsschließens abschnittsweise ein Vorwärtsschließen zu vollführen.
Dies geschieht, indem einem neuen Bezeichner ein Term zugewiesen wird,
den man mit den im Kontext vorhandenen Variablen konstruiert. Der
Bezeichner steht daraufhin ebenfalls als Variable im Kontext zur
Verfügung. Der Vorgang läuft also gleichermaßen ab, wie die Zuweisung
in der Programmierung.

<pre class="ibox gallina">
Theorem contraposition (A B: Prop):
  (A -> B) -&gt; (~B -> ~A).
Proof.
  intro h. intro nb. intro a.
  assert (b := h a).
  assert (contradiction := nb b).
  exact contradiction.
Qed.
</pre>

<p>Die Konstruktion des Terms lässt sich auch in einem Rutsch bewältigen:

<pre class="ibox gallina">
  intro h. intro nb. intro a.
  exact (nb (h a)).
</pre>

<p>Oder man gibt auf Anhieb den gesamten Beweisterm an:

<pre class="ibox gallina">
  exact (fun h nb a =&gt; nb (h a)).
</pre>

<p>Zum Vergleich die Zuweisung:

<pre class="ibox gallina">
fun h nb a => let b := h a in nb b
</pre>

<p>Zu beachten wäre noch, dass <code>assert</code> die innere
Struktur des notierten Terms vergessen lässt. Es bleibt nur die
Information übrig, dass eine Variable mit einem bestimmten Typ
konstruiert werden konnte. Möchte man den Term beibehalten,
ersetzt man den Befehl <code>assert</code> schlicht durch
<code>pose</code> oder <code>set</code>. Bei <code>set</code> wird
zusätzlich im Ziel die Substitution jedes Vorkommens der Terms durch
die Variable vorgenommen. Vermittels <code>unfold</code> lässt sich
die Variable wieder durch den ursprünglichen Term ersetzen.

<pre class="ibox gallina">
Theorem contraposition (A B: Prop):
  (A -&gt; B) -&gt; (~B -&gt; ~A).
Proof.
  intro h. intro nb. intro a.
  pose (b := h a).
  pose (contradiction := nb b).
  unfold b in contradiction.
  exact contradiction.
Qed.
</pre>

<h2 id="Definition">Definition vermittels Taktiken</h2>

<p>Bisher wurde die Definition einer Funktion in der Form

<pre class="ibox gallina">
Definition f (n: nat): nat := 2*n.
</pre>

<p>notiert. Alternativ dürfen zur Konstruktion eines Terms ebenfalls
Taktiken zum Einsatz kommen. Man notiert:

<pre class="ibox gallina">
Definition f (n: nat): nat.
Proof.
  assert (y := 2*n).
  exact y.
Defined.
</pre>

<h2 id="Kunstgriffe">Kunstgriffe</h2>

<p>In das Maschinenwerk der Taktiken wurde einige Funktionalität verbaut,
die die Erstellung von Beweisen ergonomischer macht.

<p>Die Taktik <code>intros</code> ermöglicht es, die durch <code>intro</code>
bewerkstelligte Einführung einer Annahme und die mit <code>destruct</code>
bewerkstelligte Zerlegung dieser in einem Zug auszuführen. Hiermit
bleibt erspart, die Annahme mit einer Hilfsvariable benennen zu müssen.

<table class="bt">
<tr><th>Einfache Form<th>Kurzform
<tr><td>
<pre class="ibox gallina">
Goal forall A B: Prop,
  A /\ B -&gt; B /\ A.
Proof.
  intro A. intro B. intro h.
  destruct h as (a, b).
  exact (conj b a).
Qed.
</pre>
<td>
<pre class="ibox gallina">
Goal forall A B: Prop,
  A /\ B -&gt; B /\ A.
Proof.
  intros A B (a, b).
  exact (conj b a).
Qed.
</pre>
</table>

<p>Außerdem sind <code>destruct</code> und <code>intros</code> fähig,
geschachtelte Konstruktionen in einem Zug zu zerlegen. Dadurch wird
nochmals eine Verkürzung und eine Einsparung von Hilfsvariablen erreicht.

<table class="bt">
<tr><th>Einfache Form<th>Kurzform
<tr><td><pre class="ibox gallina">
Goal forall A B C: Prop,
  A /\ B /\ C -&gt; C /\ B /\ A.
Proof.
  intros A B C. intro h.
  destruct h as (a, hr).
  destruct hr as (b, c).
  exact (conj c (conj b a)).
Qed.
</pre>
<td><pre class="ibox gallina">
Goal forall A B C: Prop,
  A /\ B /\ C -&gt; C /\ B /\ A.
Proof.
  intros A B C. intro h.
  destruct h as (a, (b, c)).
  exact (conj c (conj b a)).
Qed.
</pre>
</table>

<p>Weiterhin kann man <code>repeat</code> vor <code>split</code>
setzen, um Konjunktionen von mehr als zwei Aussagen in einem Rutsch
in Unterziele aufzutrennen.

<table class="bt">
<tr><th>Einfache Form<th>Kurzform
<tr><td><pre class="ibox gallina">
Goal forall A B C: Prop,
  A /\ B /\ C -&gt; C /\ B /\ A.
Proof.
  intros A B C (a, (b, c)).
  split.
  * exact c.
  * split.
    - exact b.
    - exact a.
Qed.
</pre>
<td><pre class="ibox gallina">
Goal forall A B C: Prop,
  A /\ B /\ C -&gt; C /\ B /\ A.
Proof.
  intros A B C (a, (b, c)).
  repeat split.
  * exact c.
  * exact b.
  * exact a.
Qed.
</pre>
</table>

<p>Unter Umständen tut <code>repeat split</code> mehr als man möchte.
Man kann die Aufteilung aber auch genau kontrollieren, indem man
<code>repeat split</code> gegen

<p class="indent"><code>split; [| split]</code>

<p>ersetzt. Das Semikolon-Tactical darin bewirkt, dass die Taktik
hinter dem Semikolon auf jedes durch die Taktik vor dem Semikolon
erzeugte Unterziel angewendet wird. Soll es zu jedem der Unterziele
eine eigene Taktik sein, werden diese in eckige Klammern gesetzt
und durch einen senkrechten Strich getrennt. Weil in unserem Fall ein
zusätzliches <code>split</code> nur auf das zweite Unterziel angewendet
werden soll, entfällt die Taktik vor dem Strich.

<p>Die Taktiken <code>trivial</code>, <code>auto</code> und
<code>tauto</code> erstellen verbleibende Beweisschritte
in bestimmten Situationen automatisch.

<table class="bt">
<tr><th>Einfache Form<th>Kurzform
<tr><td><pre class="ibox gallina">
Goal forall A B: Prop,
  A /\ B -&gt; B /\ A.
Proof.
  intros A B. intro h.
  destruct h as (a, b).
  exact (conj b a).
Qed.
</pre>
<td><pre class="ibox gallina">
Goal forall A B: Prop,
  A /\ B -&gt; B /\ A.
Proof.
  intros A B (a, b). auto.
Qed.
</pre>
</table>

<h2 id="Allquantoren">Taktiken für Allquantoren</h2>

<p>Die Einführung der Allquantifizierung wird rückwärts über
<code>intro&nbsp;x</code> vorgenommen, das bedeutet soviel wie
»Sei <var>x</var> fest, aber beliebig«. Zu diesem <var>x</var>
dürfen dann allquantifizierte Antezedenzen spezialisiert werden,
womit man Allquantifizierungen beseitigt. Dies geschieht, indem man
die allquantifizierte Aussage, als abhängige Funktion betrachtet,
auf die Variable appliziert.

<p>Beispiel. Der Beweis des Theorems

<p class="indent">(∀<var>x</var>. <var>A</var>(<var>x</var>) ∧ <var>B</var>(<var>x</var>))
⇔ (∀<var>x</var>. <var>A</var>(<var>x</var>)) ∧ (∀<var>x</var>. <var>B</var>(<var>x</var>))

<p>ist gesucht.

<pre class="ibox gallina">
Theorem universal_quant_conj (X: Type) (A B: X -&gt; Prop):
  (forall x, A x /\ B x) &lt;-&gt; (forall x, A x) /\ (forall x, B x).
Proof.
  split.
  * intro h. split.
    - intro x. assert (hx := h x). exact (proj1 hx).
    - intro x. assert (hx := h x). exact (proj2 hx).
  * intro h. intro x. split.
    - exact (proj1 h x).
    - exact (proj2 h x).
Qed.
</pre>

<p>Nochmals der gleiche Beweis, aber mit reinem Rückwärtsschließen
formuliert:

<pre class="ibox gallina">
Theorem universal_quant_conj (X: Type) (A B: X -&gt; Prop):
  (forall x, A x /\ B x) &lt;-&gt; (forall x, A x) /\ (forall x, B x).
Proof.
  split.
  * intro h. split.
    - intro x. apply h.
    - intro x. apply h.
  * intros (hA, hB). intro x. split.
    - apply hA.
    - apply hB.
Qed.
</pre>

<p>Anstelle <code>intro&nbsp;x</code> kann man auch
<code>intro&nbsp;u</code> schreiben, womit die Unterscheidung
zwischen der gebundenen Variable <var>x</var> und dem Parameter
<var>u</var>, über dem man argumentiert, klargestellt wird.

<p>Zur Spezialisierung von Allaussagen steht eigens <code>specialize</code>
zur Verfügung, die eine Alternative zum Gebrauch von <code>assert</code>
darstellt.

<table class="bt">
<tr>
<th>Taktik
<th>verhält sich wie
<tr>
<td><code>specialize h with x as hx<code>
<td><code>assert (hx := h x)</code>
<tr>
<td><code>specialize h with x</code>
<td><code>assert (h := h x)</code>
</table>

<h2 id="Existenzquantoren">Taktiken für Existenzquantoren</h2>

<p>Beispiel. Der Beweis des Theorems

<p class="indent">(∃<var>x</var>. <var>A</var>(<var>x</var>) ∧ <var>B</var>(<var>x</var>))
⇒ (∃<var>x</var>. <var>A</var>(<var>x</var>)) ∧ (∃<var>x</var>. <var>B</var>(<var>x</var>))

<p>ist gesucht.

<pre class="ibox gallina">
Theorem existential_quant_conj (X: Type) (A B: X -&gt; Prop):
  (exists x, A x /\ B x) -&gt; (exists x, A x) /\ (exists x, B x).
Proof.
  intro h.
  destruct h as (x, ab).
  destruct ab as (a, b).
  split.
  - exists x. exact a.
  - exists x. exact b.
Qed.
</pre>

</body>
</html>
