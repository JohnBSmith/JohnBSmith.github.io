<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Eingabe und Ausgabe</h1>
<h2 id="toc">Inhaltsverzeichnis</h2>
<ol>
<li><a href="#stdio">Die Standard-Ströme</a>
  <ol>
  <li><a href="#stdout">Standard-Ausgabe</a>
  <li><a href="#stderr">Standard-Fehlerausgabe</a>
  <li><span class="modest">Standard-Eingabe</span>
  <li><span class="modest">Pipelines</span>
  </ol>
<li><a href="#Dateien">Dateien</a>
  <ol>
  <li><a href="#Dateien-lesen">Dateien lesen</a>
  <li><a href="#Binaer-lesen">Binärdateien lesen</a>
  <li><a href="#Dateien-schreiben">Dateien schreiben</a>
  <li><span class="modest">Datenströme</span>
  </ol>
</ol>

<h2 id="stdio">Die Standard-Ströme</h2>

<h3 id="stdout">Standard-Ausgabe</h3>

<p>Die Standard-Ausgabe <code>stdout</code> lässt sich auf mehrere
Arten ansprechen. Zunächst kann man einfach <code>println</code>
benutzen.

<pre class="rust ibox">
fn main() {
    println!("{}","Ausgabe");
}
</pre>

<p>Man kann die Standard-Ausgabe auf Linux aber auch manuell als
Geräte-Datei öffnen:

<pre class="rust ibox">
use std::{io,io::Write,fs::File};

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let mut stdout = File::create("/dev/stdout")?;
    stdout.write_all("Ausgabe".as_bytes())?;
    return Ok(());
}
</pre>

<p>Das ist aber nicht empfehlenswert, da das Verzeichnis
<code>/dev/stdout</code> nur in Unix-artigen Betriebssystemen
existiert, das Programm also weniger portabel wird. Aus diesem
Grund steht die Funktion <code>io::stdout</code> zur Verfügung:

<pre class="rust ibox">
use std::{io,io::Write};

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let mut stdout = io::stdout();
    stdout.write_all("Ausgabe".as_bytes())?;
    return Ok(());
}
</pre>

<h3 id="stderr">Standard-Fehlerausgabe</h3>

<p>Bei manchen Programmen möchte man neben normalen Ausgaben
gleichzeitig auch Fehlermeldungen produzieren. Nun müssen diesen beiden
Ausgaben auf irgendeine Art getrennt sein wenn man keine Vermischung
haben möchte. Eine einfache Herangehensweise daran ist die Einleitung
der Fehlerausgabe in eine andere Datei bzw. in einen anderen
Datenstrom.

<p>Bereits zur Verfügung stehen dafür die Makros <code>eprint</code>
und <code>eprintln</code>, die sich so verhalten wie <code>print</code>
und <code>println</code>, mit dem Unterschied in die Fehlerausgabe
<code>stderr</code> zu schreiben. Alternativ ist auch
<code>io::stderr()</code> benutzbar, wie zuvor schon für
<code>stdout</code> beschrieben.

<p>Ruft man so ein Programm, nennen wir es <code>p0</code>, nun mit
dem Shell-Befehl
<pre class="indent">
./p0 &gt; Datei.txt
</pre>

<p>auf, wird die normale Ausgabe in <code>Datei.txt</code> geleitet,
die Fehlermeldungen verbleiben jedoch im Terminal. Umgekehrt geht
auch
<pre class="indent">
./p0 2&gt; Fehler.txt
</pre>
<p>womit die Fehlermeldungen in eine Datei geleitet werden, die
normale Ausgabe aber im Terminal verbleibt. Der Befehl
<pre class="indent">
./p0 &gt; Datei.txt 2&gt; Fehler.txt
</pre>
leitet <code>stdout</code> und <code>stderr</code> in jeweils
eine Datei.

<p>Möchte man die Fehlermeldungen nicht irgendwohin schreiben, sondern
einfach nur verwerfen, steht dafür eine sonderbare Gerätedatei
zur Verfügung, das sogenannte Nullgerät <code>/dev/null</code>.
Daten die man in diese Datei leitet, verschwinden einfach. Der Befehl
<pre class="indent">
./p0 2&gt; /dev/null
</pre>
<p>führt also zur Unterdrückung der Fehlerausgabe.

<h2 id="Dateien">Dateien</h2>

<h3 id="Dateien-lesen">Dateien lesen</h3>

<p>Zum Lesen von Text-Dateien gibt es die Komfort-Funktion
<code>read_to_string</code>, das macht die Sache besonders einfach.
<pre class="rust ibox">
use std::{fs,io};

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let s = fs::read_to_string("Datei.txt")?;
    println!("{}",s);
    return Ok(());
}
</pre>

<p>Die Funktion vereinfacht die Benutzung von vielseitigeren
Werkzeugen. Unter Verwendung dieser gestaltet sich die Funktion so:
<pre class="rust ibox">
use std::{fs,io,io::Read};

fn read_to_string(path: &amp;str) -&gt; Result&lt;String,io::Error&gt; {
    let mut file = fs::File::open(path)?;
    let mut buffer = String::new();
    file.read_to_string(&amp;mut buffer)?;
    return Ok(buffer);
}
</pre>

<p>Diese Formulierung der Funktion ist jedoch etwas ineffizient,
weil der Puffer beim Lesen öfters realloziert werden muss. Besser,
man initialisiert den Puffer gleich mit der benötigten Kapazität:

<pre class="rust ibox">
use std::{fs,io,io::Read,convert::TryFrom};

fn read_to_string(path: &amp;str) -&gt; Result&lt;String,io::Error&gt; {
    let mut file = fs::File::open(path)?;
    let info = file.metadata()?;
    let len = match usize::try_from(info.len()) {
        Ok(value) =&gt; value, Err(_) =&gt; 0
    };
    let mut buffer = String::with_capacity(len);
    file.read_to_string(&amp;mut buffer)?;
    return Ok(buffer);
}
</pre>

<p>Der spitzfindige Leser fragt sich jetzt natürlich, wie lang
denn so eine Geräte-Datei wie <code>/dev/stdin</code> ist. Bei stdin
handelt es sich ja um einen Datenstrom, der kann potenziell unendlich
lang sein. Probieren wir das aus:

<pre class="rust ibox">
fn main() -&gt; Result&lt;(),std::io::Error&gt; {
    println!("{}",std::fs::metadata("/dev/stdin")?.len());
    return Ok(());
}
</pre>

<p>Bei mir kommt da null raus. Das muss natürlich nicht heißen, dass
da immer null herauskommen müsse. Es wäre z.B. denkbar, dass der
Rückgabewert die Länge der aktuellen Pufferbelegung ist. Um Gewissheit
über das Verhalten zu haben, müsste man die Spezifikation der
Betriebssystem-Schnittstelle konsultieren, wenn es diese denn gibt.
Wir wollen uns mit diesen technischen Details jetzt nicht aufhalten,
da diese eigentlich immer unerheblich sind.

<h3 id="Binaer-lesen">Binärdateien lesen</h3>

<p>Da eine Zeichenkette in Rust korrektes UTF-8 enthalten muss, wird
die Funktion <code>read_to_string</code> zwangsläufig eine
Validierung vornehmen. Möchte man auch eine Datei mit invalidem UTF-8
verarbeiten können, sollte diese zunächst als Binärdatei
eingelesen werden, hierfür steht die Funktion <code>fs::read</code>
zur Verfügung. Mit den Binärdaten kann man dann machen was man will.

<pre class="rust ibox">
use std::{fs::read, error::Error};

fn main() -&gt; Result&lt;(),Box&lt;dyn Error&gt;&gt; {
    let data: Vec&lt;u8&gt; = read("Datei.txt")?;
    let s = String::from_utf8(data)?;
    println!("{}",s);
    return Ok(());
}
</pre>

<p>Hier ist nun alternativ möglich:
<pre class="rust ibox">
let s = String::from_utf8_lossy(&amp;data);
</pre>

<p>Eine Binärdatei kann auch sehr groß sein, größer als dass
sie vollständig in den Hauptspeicher geladen werden kann. Wir wollen
den CRC32-Prüfwert von so einer Datei berechnen, siehe
<a href="Algorithmen/Hashfunktionen.htm#CRC"
>Algorithmen: Hashfunktionen</a>.
Der naive Ansatz ginge so:

<pre class="rust ibox">
use std::{env::args, fs::read, io};

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let crc = crc::CRC32::new();
    let argv: Vec&lt;String&gt; = args().collect();
    let data: Vec&lt;u8&gt; = read(&amp;argv[1])?;
    println!("{:08x}",crc.hash(&amp;data,0));
    return Ok(());
}
</pre>

<p>Die Berechnung des Prüfwertes lässt sich nun aufteilen auf
Datenblöcke. Die Blöcke kommen jeweils zunächst von der Datei in
einen Puffer der Blockgröße, günstig ist 64 Kibibyte. Dann wird vom
Block der Prüfwert bestimmt, wobei der Prüfwert des vorangegangenen
Blocks mit einfließt.

<pre class="rust ibox">
use std::{env::args, fs::File, io, io::Read};
use crc::CRC32;

fn hash(crc: &amp;CRC32, file: &amp;mut File) -&gt; Result&lt;u32,io::Error&gt; {
    let mut buffer = [0; 0x10000];
    let mut hash = 0;
    loop{
        let n = file.read(&amp;mut buffer)?;
        if n==0 {break;}
        hash = crc.hash(&amp;buffer[..n],hash);
    }
    return Ok(hash);
}

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let crc = CRC32::new();
    let argv: Vec&lt;String&gt; = args().collect();
    let mut file = File::open(&amp;argv[1])?;
    println!("{:08x}",hash(&amp;crc,&amp;mut file)?);
    return Ok(());
}
</pre>

<p>Hiermit lässt sich nun der Prüfwert von 10&nbsp;GB großen
Dateien ermitteln, auch wenn man nur 256 MB Hauptspeicher zur
Verfügung hat. Faktisch ist der Hauptspeicherbedarf des
Programms nun verschwindend gering.

<h3 id="Dateien-schreiben">Dateien schreiben</h3>

<p>Daten in Dateien schreiben ist denkbar einfach. Man erzeugt
einfach eine neue Datei und schreibt die Daten da rein.

<pre class="rust ibox">
use std::{io,io::Write,fs::File};

fn main() -&gt; Result&lt;(),io::Error&gt; {
    let mut file = File::create("Datei.txt")?;
    file.write_all("Daten".as_bytes())?;
    return Ok(());
}
</pre>

<p>Falls die Datei schon vorhanden war, wird sie überschrieben.
Manchmal möchte man nicht dass Dateien einfach so überschreibbar
sind, das ist vor allem wichtig bei Programmen die mit Benutzern
interagieren. Man kann vor dem Schreiben der Datei prüfen, ob der
angegebene Pfad schon existiert. Dies lässt sich wie folgt
bewerkstelligen:

<pre class="rust ibox">
use std::{io,io::Write,fs::File,path::Path};

fn write(path: &amp;str, data: &amp;[u8]) -&gt; Result&lt;(),io::Error&gt; {
    if Path::new(path).exists() {
        Err(io::Error::new(io::ErrorKind::PermissionDenied,
            format!("Pfad '{}' existiert bereits",path)))
    }else{
        let mut file = File::create(path)?;
        file.write_all(data)
    }
}

fn main() -&gt; Result&lt;(),io::Error&gt; {
    write("Datei.txt","Daten".as_bytes())?;
    return Ok(());
}
</pre>

<p>Alternativ bietet sich auch das passende
<code>ErrorKind::AlreadyExists</code> an.


</body>
</html>

