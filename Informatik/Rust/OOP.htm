<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Objektorientierung</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Klassen">Klassen</a>
<li><a href="#Vererbung">Vererbung</a>
<li><a href="#Polymorphie">Polymorphie</a>
<li><a href="#Klassenvariablen">Klassenvariablen</a>
</ol>

<h2 id="Klassen">Klassen</h2>
<pre class="rust ibox">
struct Bird {
    name: String
}
impl Bird {
    fn fly(&amp;self) {
        println!("{} fliegt.", self.name);
    }
}

fn main() {
    let bird = Bird {name: String::from("Donald")};
    bird.fly();
}
</pre>

<h2 id="Vererbung">Vererbung</h2>

<p>Vererbung gibt es in Rust nicht. Sie l채sst sich allerdings
durch Komposition modellieren.

<pre class="rust ibox">
struct Bird {
    name: String
}
impl Bird {
    fn fly(&amp;self) {
        println!("{} fliegt.", self.name);
    }
}

struct Duck {
    bird: Bird
}
impl Duck {
    fn new(name: String) -&gt; Self {
        Self{bird: Bird {name}}
    }
    fn dive(&amp;self) {
        println!("{} kann tauchen.", self.bird.name);
    }
}

fn main() {
    let duck = Duck::new("Donald".into());
    duck.bird.fly();
    duck.dive();
}
</pre>

<h2 id="Polymorphie">Polymorphie</h2>

<pre class="rust ibox">
use std::any::Any;

trait BirdTrait {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
    fn name(&amp;self) -&gt; &amp;str;
    fn fly(&amp;self);
}

struct Bird {
    name: String
}
impl Bird {
    fn new(name: &amp;str) -&gt; Self {
        Self {name: name.into()}
    }
}
impl BirdTrait for Bird {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
    fn name(&amp;self) -&gt; &amp;str {&amp;self.name}
    fn fly(&amp;self) {
        println!("{} fliegt.", self.name);
    }
}

struct Duck {
    bird: Bird
}
impl Duck {
    fn new(name: &amp;str) -&gt; Self {
        Self {bird: Bird {name: name.into()}}
    }
    fn dive(&amp;self) {
        println!("{} kann tauchen.", self.bird.name);
    }
}
impl BirdTrait for Duck {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
    fn name(&amp;self) -&gt; &amp;str {&amp;self.bird.name}
    fn fly(&amp;self) {
        self.bird.fly();
    }
}

fn main() {
    let birds: Vec&lt;Box&lt;dyn BirdTrait&gt;&gt; = vec![
        Box::new(Duck::new("Donald")),
        Box::new(Bird::new("Bella"))
    ];
    for bird in birds.iter() {
        bird.fly();
        if let Some(duck) = bird.as_any().downcast_ref::&lt;Duck&gt;() {
            duck.dive();
        } else {
            println!("{} ist keine Ente.", bird.name());
        }
    }
}
</pre>

<h2 id="Klassenvariablen">Klassenvariablen</h2>

<p>Klassenvariablen sind Variablen die nicht Speicherpl채tze von
Objekten  sind, sondern von Klassen. D.&nbsp;h. eine solche Variable
liegt nur einmal pro Klasse vor. Zur Modellierung konstruiert
man am besten eine Laufzeitumgebung <code>env</code>, die eine
Laufzeitdarstellung der Klasse enth채lt. Damit das Programm an allen
Stellen Zugriff auf die Laufzeitumgebung bekommen kann, kommt ein
Zeiger auf die Laufzeitumgebung in eine globale Variable
<code>ENV</code>. Zur Vereinfachung betrachten wir nur ein
Programm ohne Nebenl채ufigkeit. Die globale Variable wird daher
Strang-lokal gemacht.

<pre class="rust ibox">
use std::rc::Rc;
use std::cell::RefCell;

struct DuckClass {
    name: Rc&lt;str&gt;,
    quack: Rc&lt;str&gt;
}

struct Env {
    duck_class: Rc&lt;RefCell&lt;DuckClass&gt;&gt;
}
impl Env {
    fn new() -&gt; Rc&lt;Self&gt; {
        Rc::new(Self {
            duck_class: Rc::new(RefCell::new(DuckClass {
                name: Rc::from("Duck"),
                quack: Rc::from("quacks")
            }))
        })
    }
    fn get() -&gt; Rc&lt;Env&gt; {
        ENV.with(|env| env.clone())
    }
}
thread_local! {
    static ENV: Rc&lt;Env&gt; = Env::new();
}

struct Duck {
    class: Rc&lt;RefCell&lt;DuckClass&gt;&gt;,
    name: String
}
impl Duck {
    fn new(env: &amp;Env, name: &amp;str) -&gt; Self {
        Self {name: name.into(), class: env.duck_class.clone()}
    }
    fn class_name(&amp;self) -&gt; Rc&lt;str&gt; {
        self.class.borrow().name.clone()
    }
    fn name(&amp;self) -&gt; &amp;str {&amp;self.name}
    fn quack(&amp;self) {
        println!("{} {}.", self.name, self.class.borrow().quack);
    }
}

fn load_german(env: &amp;Env) {
    let mut duck_class = env.duck_class.borrow_mut();
    duck_class.name = Rc::from("Ente");
    duck_class.quack = Rc::from("quakt");
}

fn main() {
    let env = &amp;Env::get();
    load_german(env);
    let duck = Duck::new(env,"Donald");
    duck.quack();
    println!("Name von duck ist: {}.", duck.name());
    println!("Klasse von duck ist: {}.", duck.class_name());
}
</pre>


</body>
</html>

