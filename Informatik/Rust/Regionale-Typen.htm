<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>

<h1>Regionale Typen</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ol>
<li><a href="Subtypen-Regionen">Subtyp-Beziehungen von Regionen</a>
</ol>

<h2 id="Subtypen-Regionen">Subtyp-Beziehungen von Regionen</h2>

<p>Betrachten wir einmal das folgende Programm.

<pre class="rust ibox">
fn main() {
    let s0: &amp;str = "Zeichenkette 0";
    {
        let s1: &amp;str = s0;
        println!("{}", s1);
    }
}
</pre>

<p>Das Programm ist kompilierbar, denn <code>s0</code> existiert
länger als <code>s1</code>.

<p>Man definiert die folgende Relation zwischen Lebenszeiten:

<p class="indent"><code>'b: 'a</code> bedeute, <code>'b</code> dauert mindestens so lang an wie <code>'a</code>,

<p>kurz

<p class="indent"><code>'b: 'a</code> bedeute, <code>'b</code> überlebt <code>'a</code>.

<p>Man kann sich das auch als <code>'lang: 'kurz</code> merken.

<p>Das aufgezeigte Programm wird nun mit Lebenszeiten annotiert.

<pre class="rust ibox">
fn main() {
    let s0: &amp;'0 str = "Zeichenkette 0";
    {
        let s1: &amp;'1 str = s0;
        println!("{}", s1);
    }
}
</pre>

<p>Gemäß der Definition gilt <code>'0: '1</code>. Damit aber die
Zeile

<pre class="rust ibox">
let s1: &amp;'1 str = s0;
</pre>

<p>korrekt ist, muss der Typ <code>&amp;'0 str</code> in
<code>&amp;'1 str</code> überführt werden können. Die Beziehung
zwischen diesen Typen ist eine Subtyp-Beziehung

<pre class="rust indent">
&amp;'0 str &lt;: &amp;'1 str.
</pre>

<p>Es stellt sich nämlich heraus dass ein Typ mit langer
Lebenszeit überall dort eingesetzt werden darf wo der entsprechende
Typ kurzer Lebenszeit erwartet wird, womit das
Liskov-Prinzip erfüllt ist.

<p>Im nächsten Schritt werden die Lebenszeiten ebenfalls als Typen
aufgefasst. Wir schreiben nun <code>'b&nbsp;&le;:&nbsp;'a</code>
anstelle von <code>'b:&nbsp;'a</code>. Das heißt, wir betrachten
eine längere Lebenszeit als Subtyp einer kürzeren. Unter dieser
Sichtweise findet man,

<p class="indent">
<code>'b &le;: 'a</code> impliziert <code>&amp;'b T &le;: &amp;'a T</code>
</pre>

<p>für jeden Typ <code>T</code>. Demnach ist <code>&amp;'a T</code>
kovariant bezüglich <code>'a</code>. Genau genommen ist Kovarianz
eine Eigenschaft eines Typkonstruktors. Gemeint ist also dass der
durch

<pre class="rust ibox">
type Ref&lt;'a, T&gt; = &amp;'a T;
</pre>

<p>definierte Typkonstruktor <code>Ref</code> kovariant bezüglich
des Lebenszeit-Parameters ist.

</body>
</html>
