<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Nebenläufigkeit mit Threads</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Nebenlaeufigkeit">Nebenläufigkeit</a>
<li><a href="#Threads-starten">Threads starten</a>
<li><a href="#Kanaele">Kanäle</a>
<li><span class="modest">Atomare Operationen</span>
<li><span class="modest">Wechselseitiger Ausschluss</span>
<li><span class="modest">Thread-lokale Variablen</span>
<li><span class="modest">Multiprocessing</span>
</ol>

<h2 id="Nebenlaeufigkeit">Nebenläufigkeit</h2>

<p>Bei einem nebenläufigen System sind Programmabläufe in
Ausführungsstränge unterteilt, die gleichzeitig ausgeführt
werden können.

<p>Nebenläufigkeit lässt sich unterscheiden nach der Art der
Unterbrechung. Es gibt präemptive und kooperative Unterbrechung.

<p>Bei der <b>präemptiven Unterbrechung</b> werden nebenläufige
Ausführungsstränge in einem bestimmten Zeitintervall von Außen durch
einen Hypervisor unterbrochen, man spricht von einem sogenannten
Interrupt. Daraufhin wird die Kontrolle an den Scheduler übergeben,
der den nächsten abzuarbeitenden Ausführungsstrang auswählt.
Die Ausführungsstränge werden hier als <i>Threads</i> bezeichnet.

<p>Bei der <b>kooperativen Unterbrechung</b> sind die nebenläufigen
Ausführungsstränge selbst für die Unterbrechung zuständig. Die
Ausführungsstränge werden hier als <i>Koroutinen</i> oder
<i>asynchrone Funktionen</i> bezeichnet. Auch hier
lässt sich die Kontrolle an einen Scheduler übergeben, oder aber
die aktuelle Koroutine wählt selbst aus, in welcher Koroutine es
weitergeht.

<p>Präemptive Unterbrechung hat den Vorteil, Ausführung auf mehreren
Prozessorkernen bzw. Prozessoren (Multiprocessing) zu erlauben. Das ist
ein Schlüsselkonzept zur Erhöhung der Rechenleistung, da sich
Prozessoren nicht mit beliebig hoher Frequenz takten lassen.

<p>Kooperative Unterbrechung hat den Vorteil, dass Race Conditions
nicht implizit auftreten können, man daher keine erweiterten
technischen Mittel zur Verhinderung dieser benötigt.

<h2 id="Threads-starten">Threads starten</h2>

<p>Ein Metronom gestattet eine recht gute Verdeutlichung von Threads
und wie sie gestartet werden. Zunächst gibt es zur Veranschaulichung
eine Funktion <code>metronome</code>, in welcher in einer endlosen
Schleife in einem bestimmten Zeitintervall ein Klang bzw. eine
Nachricht ausgegeben wird.

<p>Wir wollen nun, dass zwei dieser Schleifen nebeneinanderher
laufen. Dazu startet man zwei Threads und ruft in beiden jeweils
<code>metronome</code> auf.

<pre class="rust ibox">
use std::{thread,thread::sleep,time::Duration};

fn metronome(msg: &amp;str, time: u64) {
    loop{
        println!("{}",msg);
        sleep(Duration::from_millis(time));
    }
}

fn main() {
    let t1 = thread::spawn(|| {
        metronome("tick",500);
    });
    let t2 = thread::spawn(|| {
        metronome("*ping*",2000);
    });
    t1.join().unwrap();
    t2.join().unwrap();
}
</pre>

<h2 id="Kanaele">Kanäle</h2>

<p>Bisher sind alle Threads parallel gelaufen ohne sich zu
beeinflussen. In komplizierteren nebenläufigen Programmen kann
so ein Einfluss aber vorkommen. Das typische
einführende Beispiel besteht aus einem Produzenten und einem
Konsumenten. Der Produzent sendet regelmäßig Daten, welche
der Konsument empfängt und verarbeitet.

<p>Zur Umsetzung bedient man sich eines sogenannten Kanals.
Ein Kanal ist eine gerichtete Verbindung zur Übertragung von Daten
zwischen zwei Threads.

<pre class="rust ibox">
use std::{thread,thread::sleep,time::Duration};
use std::sync::mpsc::{channel,Sender,Receiver};

fn produce(transmitter: Sender&lt;String&gt;) {
    for count in 0.. {
        sleep(Duration::from_millis(500));
        let value = format!("Daten Nr. {}",count);
        transmitter.send(value).unwrap();
    }
}

fn consume(receiver: Receiver&lt;String&gt;) {
    loop{
        sleep(Duration::from_millis(100));
        let value = receiver.recv().unwrap();
        println!("Erhalte: {}",value);
    }
}

fn main() {
    let (transmitter,receiver) = channel();
    let t1 = thread::spawn(|| {
        produce(transmitter);
    });
    let t2 = thread::spawn(|| {
        consume(receiver);
    });
    t1.join().unwrap();
    t2.join().unwrap();
}
</pre>

<p>Die Schleife des Empfängers arbeitet hier in viel kürzeren
Zeitintervallen. Der aufmerksame Leser stellt sich nun natürlich
die Frage, was dann beim Aufruf von <code>recv</code> geschieht.
Mit dem Wissen dass das Programm korrekt arbeitet, ist die einzig
mögliche Antwort darauf, dass <code>recv</code>
solange den Thread <code>t2</code> blockiert bis neue Daten
von <code>t1</code> gekommen sind. Den Aufruf von <code>sleep</code>
im Empfänger könnte man sich hier also auch sparen, da der Thread durch
<code>recv</code> hinreichend blockiert würde.

</body>
</html>
