<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Generische assoziierte Typen</h1>

<h2>Inhaltsverzeichnis</h2>

<ol>
<li><a href="#Funktoren">Funktoren</a>
<li><a href="#Monaden">Monaden</a>
</ol>

<h2 id="Funktoren">Funktoren</h2>

<p>Typen und Funktionen zwischen diesen lassen sich aus einer
mathematischen Sichtweise als Kategorie betrachten. Die Typen sind
hierbei Objekte der Kategorie, die Funktionen die Morphismen.

<p>Ein Typkonstruktor <code>F</code> bildet zusammen mit einer
ebenfalls <code>F</code> genannten Abbildung höherer Ordnung
einen Funktor, sofern die beiden Regeln

<pre class="indent">
F(id) = id,

F(g∘f) = F(g)∘F(f)
</pre>

<p>erfüllt sind.

<p>Der Typkonstruktor <code>F:=Option</code> bildet zusammen mit
seiner Methode <code>F:=map</code> einen Funktor. Anstelle von
<code>map(f)(x)</code> schreiben wir in Rust <code>x.map(f)</code>.

<p>Es gilt <code>map(id) = id</code>, denn
<pre class="rust indent">
x.map(id)
    = match x {Some(x) =&gt; Some(id(x)), None =&gt; None}
    = match x {Some(x) =&gt; Some(x), None =&gt; None}
    = id(x).
</pre>

<p>Zudem gilt <code>map(g∘f) = map(g)∘map(f)</code>, denn

<pre class="rust indent">
x.map(|x| g(f(x)))
    = match x {Some(x) =&gt; Some(g(f(x))), None =&gt; None}
    = match x {Some(x) =&gt; Some(f(x)).map(g), None =&gt; None}
    = match x {Some(x) =&gt; Some(f(x)), None =&gt; None}.map(g)
    = x.map(f).map(g).
</pre>

<p>Im Weiteren tut sich dann irgendwann die Frage auf, ob sich zum
Funktor-Konzept eine Schnittstelle programmieren lässt.
Bei Beschränkung auf Selbstabbildungen finden wir recht mühelos
eine Umsetzung, etwa so:

<pre class="rust ibox">
trait Functor&lt;X&gt; {
    fn map(self, f: impl Fn(X) -&gt; X) -&gt; Self;
}

impl&lt;X&gt; Functor&lt;X&gt; for Option&lt;X&gt; {
    fn map(self, f: impl Fn(X) -&gt; X) -&gt; Self {
        match self {Some(x) =&gt; Some(f(x)), None =&gt; None}
    }
}

fn main() {
    println!("{:?}", Functor::map(Some(0), |x| x + 1));
}
</pre>

<p>Als nächstes müssen wir uns um die Loslösung von der Beschränkung
auf Selbstabbildungen kümmern. Zunächst ein Zwischenschritt:

<pre class="rust ibox">
trait Functor&lt;X&gt; {
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Option&lt;Y&gt;;
}

impl&lt;X&gt; Functor&lt;X&gt; for Option&lt;X&gt; {
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Option&lt;Y&gt; {
        match self {Some(x) =&gt; Some(f(x)), None =&gt; None}
    }
}
</pre>

<p>Nun stellt sich die Frage, wie man das Artefakt
<code>Option&lt;Y&gt;</code> entfernt. An dieser Stelle kommen
<i>generische assoziierte Typen</i> ins Spiel. Darunter versteht man
die Erweiterung des Begriffs der assoziierten Typen auf
Typkonstruktoren. Zur Notation bekommt der assoziierte Typ schlicht
einen Typparameter.

<pre class="rust ibox">
trait Functor&lt;X&gt; {
    type F&lt;T&gt;: Functor&lt;T&gt;;
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Self::F&lt;Y&gt;;
}

impl&lt;X&gt; Functor&lt;X&gt; for Option&lt;X&gt; {
    type F&lt;T&gt; = Option&lt;T&gt;;
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Self::F&lt;Y&gt; {
        match self {Some(x) =&gt; Some(f(x)), None =&gt; None}
    }
}

fn main() {
    println!("{:?}", Functor::map(Some(0), |x| x + 1));
}
</pre>

<p>Warum wurde hier <code>Fn</code> anstelle von <code>FnOnce</code>
angegeben, wo die Methode <code>Option::map</code> doch
<code>FnOnce</code> bekommen darf? Die Antwort liegt in der
Komplikation, die daraus entstehen würde. Es gibt auch
Implementierungen, wo <code>f</code> mehrmals aufgerufen wird,
die sich bei <code>FnOnce</code> verbieten würden. So haben wir:

<pre class="rust ibox">
impl&lt;X&gt; Functor&lt;X&gt; for Vec&lt;X&gt; {
    type F&lt;T&gt; = Vec&lt;T&gt;;
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Self::F&lt;Y&gt; {
        self.into_iter().map(f).collect()
    }
}
</pre>

<p>Der Typkonstruktor <code>Option</code> besitzt noch eine weitere
Eigenschaft. Durch diesen kommt jedem Typ <code>X</code> eine
Funktion
<pre class="rust indent">
fn Some(x: X) -&gt; Option&lt;X&gt;
</pre>

<p>zu. Die Familie dieser Funktionen ist eine sogenannte
natürliche Transformation, denn
<pre class="indent">
Some(f(x)) = map(f)(Some(x)),
</pre>

<p>kurz
<pre class="indent">
Some∘f = map(f)∘Some,
</pre>

<p>oder abstrakt

<pre class="indent">
&eta;∘f = F(f)∘&eta;.
</pre>

<p>Übersichtlich ausgedrückt bedeutet diese Gleichung, dass das
Diagramm

<div class="indent"><img src="img/Funktor.png"></div>

<p>bzw.

<div class="indent"><img src="img/Funktor-map.png"></div>

<p>kommutiert.

<h2 id="Monaden">Monaden</h2>

<p>Betrachten wir nochmals die Trait-Definition aus dem
Abschnitt ›<a href="FP.htm#Monaden">Monaden</a>‹.
Die Implementierung für <code>Option</code> geht so:

<pre class="rust ibox">
trait Monad&lt;X&gt; {
    fn unit(x: X) -&gt; Self;
    fn bind(self, f: impl Fn(X) -&gt; Self) -&gt; Self;
}

impl&lt;X&gt; Monad&lt;X&gt; for Option&lt;X&gt; {
    fn unit(x: X) -&gt; Self {Some(x)}
    fn bind(self, f: impl Fn(X) -&gt; Self) -&gt; Self {
        match self {Some(x) =&gt; f(x), None =&gt; None}
    }
}

fn main() {
    let mx = Option::unit(0);
    println!("{:?}", mx.bind(|x| Some(x + 1)));
}
</pre>

<p>Wie bei <code>Functor</code> würden wir die Funktionalität
gerne so verallgemeinern, dass in

<pre class="rust ibox">
f: impl Fn(X) - &gt; Option&lt;Y&gt;
</pre>

<p>nicht mehr <code>X&nbsp;=&nbsp;Y</code> vorausgesetzt ist.
Die Umsetzung benutzt ganz analog zu der von <code>Functor</code>
einen generischen assoziierten Typ.

<pre class="rust ibox">
trait Monad&lt;X&gt; {
    type M&lt;T&gt;: Monad&lt;T&gt;;
    fn unit(x: X) -&gt; Self;
    fn bind&lt;Y&gt;(self, f: impl Fn(X) -&gt; Self::M&lt;Y&gt;) -&gt; Self::M&lt;Y&gt;;
}

impl&lt;X&gt; Monad&lt;X&gt; for Option&lt;X&gt; {
    type M&lt;T&gt; = Option&lt;T&gt;;
    fn unit(x: X) -&gt; Self {Some(x)}
    fn bind&lt;Y&gt;(self, f: impl Fn(X) -&gt; Self::M&lt;Y&gt;) -&gt; Self::M&lt;Y&gt; {
        match self {Some(x) =&gt; f(x), None =&gt; None}
    }
}

fn main() {
    let mx = Option::unit(0);
    println!("{:?}", mx.bind(|x| Some([x + 1, x + 2])));
}
</pre>

<p>Es verhält sich nun so, dass jede Monade auch ein Funktor ist.
Wir haben nämlich

<pre class="indent">
map(f)(x) = bind(unit∘f)(x),
</pre>

<p>bzw. in Rust-Schreibweise

<pre class="indent">
x.map(f) = x.bind(|x| unit(f(x))).
</pre>

<p>Die allgemeine Implementierung:

<pre class="rust ibox">
impl&lt;X, M: Monad&lt;X&gt;&gt; Functor&lt;X&gt; for M {
    type F&lt;T&gt; = M::M&lt;T&gt;;
    fn map&lt;Y&gt;(self, f: impl Fn(X) -&gt; Y) -&gt; Self::F&lt;Y&gt; {
        self.bind(|x| M::M::unit(f(x)))
    }
}

fn main() {
    let mx = Option::unit(0);
    println!("{:?}", Functor::map(mx, |x| [x + 1, x + 2]));
}
</pre>

<p>Eine weitere, für das Verständnis wichtige, Funktion im
Zusammenhang mit Monaden ist <code>join</code>, die als
<code>bind(id)</code> definiert ist. Nun mag die Frage aufkommen,
warum man denn die identische Funktion <code>id</code> einsetzen
darf, wo die Signatur nichts über eine Selbstabbildung sagt.
Die Signatur ist hier

<pre class="indent">
bind: (X -&gt; M&lt;Y&gt;) -&gt; M&lt;X&gt; -&gt; M&lt;Y&gt;,
</pre>

<p>bzw. ohne Currying und in umgedrehter Reihenfolge

<pre class="indent">
bind: (M&lt;X&gt;, X -&gt; M&lt;Y&gt;) -&gt; M&lt;Y&gt;.
</pre>

<p>Man darf hier nicht vergessen dass die Typsignatur immer noch
eine polymorphe ist. Wir dürfen also
<code>X&nbsp;=&nbsp;M&lt;Y&gt;</code> verlangen. Das macht

<pre class="indent">
bind: (M&lt;M&lt;Y&gt;&gt;, M&lt;Y&gt; -&gt; M&lt;Y&gt;) -&gt; M&lt;Y&gt;.
</pre>

<p>Nach Umbenennung <code>Y:=X</code> bekommt man

<pre class="indent">
bind: (M&lt;M&lt;X&gt;&gt;, M&lt;X&gt; -&gt; M&lt;X&gt;) -&gt; M&lt;X&gt;.
</pre>

<p>Die Implementierung für <code>Option</code>:

<pre class="rust ibox">
fn join&lt;X&gt;(m: Option&lt;Option&lt;X&gt;&gt;) -&gt; Option&lt;X&gt; {
    m.bind(|x| x)
}
</pre>

<p>Mathematisch betrachtet ist eine Monade kodiert durch das Tripel

<pre class="indent">
((Typkonstruktor, map), unit, join),
</pre>

bzw. abstrakt

<pre class="indent">
(F, &eta;, &mu;).
</pre>

<p>Hierbei ist <code>F</code> der Funktor. Die beiden Funktionen
<code>&eta;</code> und <code>&mu;</code> sind natürliche
Transformationen.

<p>Jede Monade muss die Axiome

<pre class="indent">
&mu;∘F(&mu;) = &mu;∘&mu;,

&mu;∘F(&eta;) = &mu;∘&eta; = id
</pre>

<p>erfüllen, bzw.

<pre class="indent">
join ∘ map(join) = join ∘ join,

join ∘ map(unit) = join ∘ unit = id.
</pre>

<p>Bei <code>Option</code> treten nur endlich viele Fälle
auf, die man jeweils nachrechnen kann.

<p>Für <code>join(mmx.map(join))</code> gilt

<pre class="indent">
join(None.map(join)) = join(None) = None,

join(Some(None).map(join)) = join(Some(join(None)))
= join(Some(None)) = None,

join(Some(Some(x)).map(join)) = join(Some(join(Some(x))))
= join(Some(x)) = x.
</pre>

<p>Bei <code>join(join(mmx))</code> erhält man die gleichen
Ergebnisse

<pre class="indent">
join(join(None)) = join(None) = None,

join(join(Some(None))) = join(None) = None,

join(join(Some(Some(x)))) = join(Some(x)) = x.
</pre>

<p>Für <code>join(mx.map(unit))</code> gilt

<pre class="indent">
join(None.map(unit)) = join(None) = None,

join(Some(x).map(unit)) = join(Some(Some(x))) = Some(x).
</pre>

<p>Bei <code>join(unit(mx))</code> erhält man die gleichen Ergebnisse

<pre class="indent">
join(unit(None)) = join(Some(None)) = None,

join(unit(Some(x))) = join(Some(Some(x))) = Some(x).
</pre>

</body>
</html>

