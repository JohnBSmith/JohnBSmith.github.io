<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Kontrollfluss</h1>

<p>Fortführung von ›<a href="Grundbegriffe.htm#Kontrollfluss"
>Grundbegriffe: Kontrollfluss</a>‹.

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Kurzschreibweisen">Kurzschreibweisen</a>
<li><a href="#Ausbruch">Ausbruch aus Schleifen in Schleifen</a>
<li><a href="#Pattern-Matching">Pattern-Matching</a>
</ol>

<h2 id="Kurzschreibweisen">Kurzschreibweisen</h2>

<p>Manchmal gibt man nur für eine bestimmte Enum-Variante eine
Ausführung an. Das ist vor allem dann der Fall, wenn es wie bei
<code>Option</code> und <code>Result</code> nur zwei Varianten
gibt.

<pre class="rust ibox">
match expression {
    E::A(x) => {/* Ausführung von Zweig A */},
    _ => {}
}
</pre>

<p>Hierfür steht eine Kurzschreibweise zur Verfügung:
<pre class="rust ibox">
if let E::A(x) = expression {
    /* Ausführung von Zweig A */
}
</pre>

<p>Für das Konstrukt
<pre class="rust ibox">
match expression {
    E::A(x) => {/* Ausführung von Zweig A */},
    _ => {/* Ausführung sonst */}
}
</pre>

<p>gibt es entsprechend:
<pre class="rust ibox">
if let E::A(x) = expression {
    /* Ausführung von Zweig A */
} else {
    /* Ausführung sonst */
}
</pre>

<p>Erlaubt ist auch <code>else if let</code>. Mehr noch, man
darf je Zweig frei zwischen <code>if</code> bzw. <code>else if</code>
und <code>if let</code> bzw. <code>else if let</code> wählen.


<h2 id="Ausbruch">Ausbruch aus Schleifen in Schleifen</h2>

<p>Bekommt eine Schleife eine Marke <code>'label</code>, führt
<code>break 'label</code> zum Ausbruch aus dieser Schleife. Dies
erlaubt den Ausbruch aus mehreren verschachtelten Schleifen.

<p>Dieses Mittel sei an der folgenden Funktion demonstriert, die eine
Sequenz von Werten in ein Array von vollständigen Blöcken der
Größe&nbsp;<code>n</code> zerlegt.

<pre class="rust ibox">
fn complete_chunks&lt;T: Clone&gt;(a: &amp;[T], n: u32) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    let mut b = vec![];
    let mut i = a.into_iter();
    'outer: loop {
        let mut t = vec![];
        for _ in 0..n {
            match i.next() {
                Some(x) =&gt; t.push(x.clone()),
                None =&gt; break 'outer
            }
        }
        b.push(t);
    }
    return b;
}

fn main() {
    let a: Vec&lt;u32&gt; = (0..10).collect();
    println!("{:?}", complete_chunks(&amp;a,4));
}
</pre>

<p>Außerdem ist es möglich, mit einem Wert aus der Schleife
auszubrechen. Man könnte das Beispiel also auch so schreiben:
<pre class="rust ibox">
return 'outer: loop {
    let mut t = vec![];
    for _ in 0..n {
        match i.next() {
            Some(x) =&gt; t.push(x.clone()),
            None =&gt; break 'outer b
        }
    }
    b.push(t);
};
</pre>

<p>Natürlich hätte man das in diesem Fall auch anders formulieren
können, z.&nbsp;B. durch Einführung einer Hilfsvariable oder einfach
<pre class="rust ibox">
None =&gt; return b
</pre>

<h2 id="Pattern-Matching">Pattern-Matching</h2>

<h3>Oder-Verknüpfung von Mustern</h3>

<p>Sollen mehrere Muster zum gleichen Ausführungszweig führen,
lassen sich diese mit einem senkrechten Strich Oder-verknüpfen.
Betrachten wir dazu die Fibonacci-Folge

<p class="indent"><var>a</var><sub>0</sub> := 0;&emsp;<!--
--><var>a</var><sub>1</sub> := 1;&emsp;<!--
--><var>a</var><sub><var>n</var></sub> :=
<var>a</var><sub><var>n</var>&minus;1</sub>
+ <var>a</var><sub><var>n</var>&minus;2</sub>.

<p>Die Funktion
<pre class="rust ibox">
fn fib(n: u32) -&gt; u32 {
    if n==0 || n==1 {1} else {fib(n-1) + fib(n-2)}
}
</pre>

<p>ist äquivalent zu:
<pre class="rust ibox">
fn fib(n: u32) -&gt; u32 {
    match n {
        0 | 1 =&gt; 1,
        n =&gt; fib(n-1) + fib(n-2)
    }
}
</pre>

<h3>Bereiche als Muster</h3>

<p>Als Muster sind auch Bereiche erlaubt. Z.&nbsp;B. lässt sich
in der obigen Funktion <code>fib</code> das Muster <code>0 | 1</code>
gegen <code>0..=1</code> ersetzen. Ein besseres Beispiel ist
die folgende Funktion <code>char_class</code>, die ASCII-Zeichen
auf eine Zeichenklasse projiziert.

<pre class="rust ibox">
enum CharClass {None, Digit, Lower, Upper}

fn char_class(c: char) -&gt; CharClass {
    match c {
        '0'..='9' =&gt; CharClass::Digit,
        'a'..='b' =&gt; CharClass::Lower,
        'A'..='B' =&gt; CharClass::Upper,
        _ =&gt; CharClass::None
    }
}
</pre>

<p>Auch Bereiche lassen sich mit dem senkrechten Strich
Oder-verknüpfen. Dies sei an einer Variation der letzten
Funktion verdeutlicht.

<pre class="rust ibox">
enum CharClass {None, Digit, Alpha}

fn char_class(c: char) -&gt; CharClass {
    match c {
        '0'..='9' =&gt; CharClass::Digit,
        'a'..='b' |
        'A'..='B' =&gt; CharClass::Alpha,
        _ =&gt; CharClass::None
    }
}
</pre>

<h3 id="Tupel-Muster">Tupel-Muster</h3>

<p>Entpacken eines Tupels <code>t = (1,2)</code> als
<pre class="rust ibox">
let x = t.0;
let y = t.1;
</pre>

<p>geht auch kürzer mittels:
<pre class="rust ibox">
let (x,y) = t;
</pre>

<p>Zudem ist auch teilweises Entpacken möglich. Z.&nbsp;B.
sind für ein Tupel <code>t = (1,2,3)</code> die folgenden
drei Zeilen gleichbedeutend:

<pre class="rust ibox">
let x = t.0;
let (x,_,_) = t;
let (x,..) = t;
</pre>

<p>Man bekommt sogar
<pre class="rust ibox">
let x = t.0;
let z = t.2;
</pre>
<p>mittels:
<pre class="rust ibox">
let (x,..,z) = t;
</pre>

<p>Des Weiteren darf das Entpacken von Tupeln auch in Verbindung
mit dem Pattern-Matching vorkommen. Wollen wir bspw. die
Potenzfunktion

<pre class="rust ibox">
fn pow(x: u32, n: u32) &gt; u32 {
    if n==0 {1} else {x*pow(x,n-1)}
}
</pre>

<p>als einstellige Funktion formulieren, führt das zu:
<pre class="rust ibox">
fn pow(t: (u32,u32)) -&gt; u32 {
    match t {
        (_,0) =&gt; 1,
        (x,n) =&gt; x*pow((x,n-1))
    }
}
</pre>

<p>Obendrein darf das Entpacken sogar in der Angabe der Argumente
vorkommen, womit sich die alternative Formulierung

<pre class="rust ibox">
fn pow((x,n): (u32,u32)) -&gt; u32 {
    if n==0 {1} else {x*pow((x,n-1))}
}
</pre>

<p>erlaubt.

<h3 id="Enum-Muster">Enum-Muster</h3>

<p>Matching von Enumerationen ist schon öfters vorgekommen.
Der Vollständigkeit halber hier nochmals ein Beispiel. Die
Funktion <code>checked_mul</code> hat Rückgabewerte vom Typ
<pre class="rust ibox">
enum Option&lt;T&gt; {None, Some(T)}.
</pre>

<p>Hiermit gestattet sich die Formulierung der
Potenzfunktion mit Überlauf-Prüfung als:
<pre class="rust ibox">
fn pow(x: u32, n: u32) -&gt; Option&lt;u32&gt; {
    if n==0 {Some(1)} else {
        x.checked_mul(match pow(x,n-1) {
            Some(value) =&gt; value,
            None =&gt; return None
        })
    }
}
</pre>

<p>Dieser spezielle Fall gewährt zudem die Abkürzung mit dem
Fragezeichen-Operator:
<pre class="rust ibox">
fn pow(x: u32, n: u32) -&gt; Option&lt;u32&gt; {
    if n==0 {Some(1)} else {x.checked_mul(pow(x,n-1)?)}
}
</pre>

</body>
</html>

