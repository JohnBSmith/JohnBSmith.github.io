<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Konstanten als Typparameter</h1>

<h2>Inhaltsverzeichnis</h2>

<ol>
<li><a href="#Restklassen">Beispiel: Der Typ einer Restklasse</a>
<li><a href="#Vektoren">Beispiel: Zerklüftungsfreie Vektoren</a>
<li><a href="#Einheiten">Beispiel: Einheiten</a>
<li><a href="#Stapel">Beispiel: Beschränkter Stapelspeicher</a>
<li><a href="#SubArray">Beispiel: Ausschnitte fester Länge</a>
<li><a href="#Restriktion">Einschränkung auf einzelne Konstanten</a>
<li><a href="#Praedikate">Einschränkung durch Prädikate</a>
<li><a href="#Zusicherungen">Zusicherungen an Konstanten</a>
</ol>

<h2 id="Restklassen">Beispiel: Der Typ einer Restklasse</h2>

<p>Das Rechnen mit Restklassen ist in der Algebra zentral und kommt
auch in manchen Bereichen der Informatik vor. Möchte man nun die
Arithmetik mit Restklassen auf ordentliche Art implementieren,
muss man einen Datentyp für den Restklassenring
<b>Z</b>/<var>m</var><b>Z</b> formulieren. Dieser ist nun allerdings
vom Modul <var>m</var> abhängig. Das bereitet uns zwei Probleme:
<ol>
<li>müsste der Modul zur Laufzeit mit dem Wert mitgeschleppt werden,
<li>dürften bei strenger Typisierung Restklassen mit unterschiedlichem
Modul nicht addiert und multipliziert werden.
</ol>

<p>Hat man 1., ließe sich 2. durch eine Zusicherung zur Laufzeit
prüfen. Eigentlich möchten wir dies alles aber schon zur Kompilierzeit
haben. Die nähere Betrachtung dieser Komplikation bringt uns zu einer
mysteriösen Einsicht: Der Typ muss vom Modul, einem Wert, abhängig sein.
Einen solchen Typ nennt man <i>abhängigen Typ</i>, ein Typsystem
das mit diesen umgehen kann <i>abhängiges Typsystem</i>.

<p>Rust enthält eine recht eingeschränkte Form von abhängigen
Typen, die sich <i>Const Generics</i> nennen. Eine wesentliche
Notwendigkeit für die Einführung dieser ist der Umgang mit Arrays vom
Typ <code>[T;N]</code>, wo <code>N</code> eine schon zur Kompilierzeit
bekannte Konstante ist. Man kam dabei zu der Einsicht, dass sich einige
Algorithmen ohne Const Generics nicht vernünftig formulieren
ließen. Das ist deshalb problematisch, weil solche Arrays Bestandteil
vieler laufzeitkritischer Programme sind.

<p>Soll ein Typ abhängig von einem Wert sein bzw. polymorph über Werte,
wird der Typvariable bei der Definition und Implementation das
Schlüsselwort <code>const</code> vorangestellt. Den Restklassenring
zum Modul <code>M</code> schreiben wir <code>Z&lt;M&gt;</code>.
Die Umsetzung gestaltet sich nun wie folgt.

<pre class="rust ibox">
use std::fmt;

#[derive(Clone, Copy)]
struct Z&lt;const M: u32&gt; (u32);

impl&lt;const M: u32&gt; fmt::Display for Z&lt;M&gt; {
    fn fmt(&amp;self, f: &amp;mut fmt::Formatter) -&gt;fmt::Result {
        write!(f, "{}", self.0 % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Add for Z&lt;M&gt; {
    type Output = Self;
    fn add(self, y: Self) -&gt; Self {
        Z((self.0 + y.0) % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Sub for Z&lt;M&gt; {
    type Output = Self;
    fn sub(self, y: Self) -&gt; Self {
        Z((self.0 - y.0) % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Add&lt;u32&gt; for Z&lt;M&gt; {
    type Output = Self;
    fn add(self, y: u32) -&gt; Self {
        Z((self.0 + y) % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Sub&lt;u32&gt; for Z&lt;M&gt; {
    type Output = Self;
    fn sub(self, y: u32) -&gt; Self {
        Z((self.0 - y) % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Mul for Z&lt;M&gt; {
    type Output = Self;
    fn mul(self, y: Self) -&gt; Self {
        Z((self.0*y.0) % M)
    }
}

impl&lt;const M: u32&gt; std::ops::Mul&lt;Z&lt;M&gt;&gt; for u32 {
    type Output = Z&lt;M&gt;;
    fn mul(self, y: Z&lt;M&gt;) -&gt; Z&lt;M&gt; {
        Z((self*y.0) % M)
    }
}

fn main() {
    let x: Z&lt;5&gt; = Z(4);
    let y: Z&lt;5&gt; = Z(3);
    println!("{}", x*x + 2*y + 1);
}
</pre>

<h2 id="Vektoren">Beispiel: Zerklüftungsfreie Vektoren</h2>

<p>Die Implementierung der Vektorrechnung aus dem Abschnitt
›<a href="Effizienz.htm#Verkettung2"
>Effiziente Programmierung: Nochmals Verkettung</a>‹
ist in der Hinsicht makelhaft, dass intern der Typ
<code>Vec&lt;f64&gt;</code> zur Anwendung kommt, womit zumindest für
die Initialisierung der Puffervariablen eine Heap-Allokation
stattfinden muss. Somit kommt es außerdem zu einer Zeigerindirektion
und einer Cache-unfreundlichen Fragmentierung der
Speicherbereichs-Nutzung.

<p>Man kann das Programm von diesem Makel befreien, indem
<code>Vec&lt;f64&gt;</code> gegen <code>[f64; N]</code> ausgetauscht
wird. Nämlich beobachten wir, dass die Array-Länge bei der
Vektorrechnung bereits zur Kompilierzeit feststeht. Die
Anpassung des Programms fällt erfreulicherweise fast trivial aus,
&ndash; man muss an den entsprechenden Stellen lediglich
<code>N</code> einfügen.

<pre class="rust ibox">
pub mod vector {
    use std::ops::{Add, Sub, Mul};

    pub struct Vector&lt;const N: usize&gt;(pub [f64; N]);
    pub struct Addition&lt;A: Get, B: Get&gt;(A, B);
    pub struct ScalarMul&lt;A: Get&gt;(f64, A);

    impl&lt;const N: usize&gt; Vector&lt;N&gt; {
        pub fn flush&lt;A: Get&gt;(&amp;mut self, a: A) {
            for i in 0..N {
                self.0[i] = a.get(i);
            }
        }
    }
    
    impl&lt;const N: usize&gt; std::fmt::Display for Vector&lt;N&gt; {
        fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter)
        -&gt; std::fmt::Result
        {
            write!(f, "{:?}", self.0)
        }
    }

    pub trait Get {
        fn len(&amp;self) -&gt; usize;
        fn get(&amp;self, i: usize) -&gt; f64;
    }
    impl&lt;const N: usize&gt; Get for &amp;Vector&lt;N&gt; {
        fn len(&amp;self) -&gt; usize {self.0.len()}
        fn get(&amp;self, i: usize) -&gt; f64 {self.0[i]}
    }
    impl&lt;A: Get, B: Get&gt; Get for Addition&lt;A, B&gt; {
        fn len(&amp;self) -&gt; usize {self.0.len()}
        fn get(&amp;self, i: usize) -&gt; f64 {
            self.0.get(i) + self.1.get(i)
        }
    }
    impl&lt;A: Get&gt; Get for ScalarMul&lt;A&gt; {
        fn len(&amp;self) -&gt; usize {self.1.len()}
        fn get(&amp;self, i: usize) -&gt; f64 {
            self.0*self.1.get(i)
        }
    }
    
    impl&lt;'a, B: Get, const N: usize&gt; Add&lt;B&gt; for &amp;'a Vector&lt;N&gt; {
        type Output = Addition&lt;&amp;'a Vector&lt;N&gt;, B&gt;;
        fn add(self, b: B) -&gt; Self::Output {
            Addition(self, b)
        }
    }
    impl&lt;'a, B: Get, const N: usize&gt; Sub&lt;B&gt; for &amp;'a Vector&lt;N&gt; {
        type Output = Addition&lt;&amp;'a Vector&lt;N&gt;, ScalarMul&lt;B&gt;&gt;;
        fn sub(self, b: B) -&gt; Self::Output {
            Addition(self, ScalarMul(-1.0, b))
        }
    }
    impl&lt;A0: Get, A1: Get, B: Get&gt; Add&lt;B&gt; for Addition&lt;A0, A1&gt; {
        type Output = Addition&lt;Self, B&gt;;
        fn add(self, b: B) -&gt; Self::Output {
            Addition(self, b)
        }
    }
    impl&lt;A0: Get, A1: Get, B: Get&gt; Sub&lt;B&gt; for Addition&lt;A0, A1&gt; {
        type Output = Addition&lt;Self, ScalarMul&lt;B&gt;&gt;;
        fn sub(self, b: B) -&gt; Self::Output {
            Addition(self, ScalarMul(-1.0, b))
        }
    }
    impl&lt;A: Get, B: Get&gt; Add&lt;B&gt; for ScalarMul&lt;A&gt; {
        type Output = Addition&lt;Self, B&gt;;
        fn add(self, b: B) -&gt; Self::Output {
            Addition(self, b)
        }
    }
    impl&lt;A: Get, B: Get&gt; Sub&lt;B&gt; for ScalarMul&lt;A&gt; {
        type Output = Addition&lt;Self, ScalarMul&lt;B&gt;&gt;;
        fn sub(self, b: B) -&gt; Self::Output {
            Addition(self, ScalarMul(-1.0, b))
        }
    }
    impl&lt;'a, const N: usize&gt; Mul&lt;&amp;'a Vector&lt;N&gt;&gt; for f64 {
        type Output = ScalarMul&lt;&amp;'a Vector&lt;N&gt;&gt;;
        fn mul(self, a: &amp;'a Vector&lt;N&gt;) -&gt; Self::Output {
            ScalarMul(self, a)
        }
    }
    impl&lt;A: Get, B: Get&gt; Mul&lt;Addition&lt;A, B&gt;&gt; for f64 {
        type Output = ScalarMul&lt;Addition&lt;A, B&gt;&gt;;
        fn mul(self, a: Addition&lt;A, B&gt;) -&gt; Self::Output {
            ScalarMul(self, a)
        }
    }
    impl&lt;B: Get, const N: usize&gt; Mul&lt;B&gt; for &amp;Vector&lt;N&gt; {
        type Output = f64;
        fn mul(self, b: B) -&gt; f64 {
            let a = &amp;self.0;
            let mut acc = 0.0;
            for i in 0..a.len() {
                acc += a[i]*b.get(i);
            }
            acc
        }
    }
    impl&lt;A0: Get, A1: Get, B: Get&gt; Mul&lt;B&gt; for Addition&lt;A0, A1&gt; {
        type Output = f64;
        fn mul(self, b: B) -&gt; f64 {
            let mut acc = 0.0;
            for i in 0..self.len() {
                acc += self.get(i)*b.get(i);
            }
            acc
        }
    }
    pub fn norm&lt;A: Get&gt;(v: A) -&gt; f64 {
        let mut s = 0.0;
        for i in 0..v.len() {
            let a = v.get(i);
            s += a*a;
        }
        s.sqrt()
    }
}

use vector::Vector;

fn main() {
    let v = &amp;Vector([1.0, 2.0]);
    let w = &amp;Vector([3.0, 4.0]);
    let mut buf = Vector([0.0, 0.0]);
    buf.flush(2.0*v + 4.0*w + 5.0*(v - 2.0*w));
    println!("{}", buf);
    println!("{}", (v + w)*(v - w));
    println!("{}", v*v - w*w);
}
</pre>

<h2 id="Einheiten">Beispiel: Einheiten</h2>

<p>Betrachten wir nochmals die Schaffung von Einheiten aus dem Abschnitt
›<a href="Sicherheit.htm#Einheiten">Sichere Programmierung: Einheiten</a>‹.
Ein über Konstanten generischer Typ eröffnet uns die Möglichkeit einer
etwas eleganteren Umsetzung.

<p>Jede Größenart besitzt im MKS-System (Meter-Kilogramm-Sekunde)
ein Tripel <code>(L,M,T)</code> zur Kodierung der Dimension

<p class="indent">Länge<sup>L</sup> &times; Masse<sup>M</sup> &times; Zeit<sup>T</sup>.

<p>Es liegt in der Natur der Sache, dieses Tripel
nun als über Konstanten generischen Typ <code>Quantity</code>
zu konstruieren. Dies bietet den Vorteil, die arithmetischen
Operationen generisch formulieren zu können. Wie früher
trägt <code>Quantity</code> nur Werte in kohärenten Einheiten.
Bei nicht-kohärenten Einheiten findet intern eine Umrechnung
in kohärente Einheiten statt.

<pre class="rust ibox">
pub mod quantities {
    use std::ops::{Add, Mul};

    #[derive(Clone, Copy)]
    pub struct Quantity&lt;const L: i32, const M: i32, const T: i32&gt; {
        value: f64
    }

    impl&lt;const L: i32, const M: i32, const T: i32&gt;
    Add&lt;Quantity&lt;L, M, T&gt;&gt; for Quantity&lt;L, M, T&gt;
    {
        type Output = Quantity&lt;L, M, T&gt;;
        fn add(self, y: Quantity&lt;L, M, T&gt;) -&gt; Quantity&lt;L, M, T&gt; {
            Quantity {value: self.value + y.value}
        }
    }

    impl&lt;const L: i32, const M: i32, const T: i32&gt;
    Mul&lt;Quantity&lt;L,M,T&gt;&gt; for f64
    {
        type Output = Quantity&lt;L, M, T&gt;;
        fn mul(self, y: Quantity&lt;L, M, T&gt;) -&gt; Quantity&lt;L, M, T&gt; {
            Quantity {value: self*y.value}
        }
    }

    // Leider ist der Compiler bisher (Stand Januar 2021)
    // nicht fortgeschritten genug, um die generische
    // Multiplikation von Größen kompilieren zu können.
    // Wir implementieren die benötigten Multiplikationen
    // im Folgenden daher einzeln.

    // Geschwindigkeit*Geschwindigkeit
    impl Mul&lt;Quantity&lt;0, 1, -1&gt;&gt; for Quantity&lt;0, 1, -1&gt; {
        type Output = Quantity&lt;0, 2, -2&gt;;
        fn mul(self, y: Quantity&lt;0, 1, -1&gt;) -&gt; Self::Output {
            Quantity {value: self.value*y.value}
        }
    }

    // Masse*Geschwindigkeitsquadrat
    impl Mul&lt;Quantity&lt;0, 2, -2&gt;&gt; for Quantity&lt;1, 0, 0&gt; {
        type Output = Quantity&lt;1, 2, -2&gt;;
        fn mul(self, y: Quantity&lt;0, 2, -2&gt;) -&gt; Self::Output {
            Quantity {value: self.value*y.value}
        }
    }

    // Impuls*Geschwindigkeit
    impl Mul&lt;Quantity&lt;0, 1, -1&gt;&gt; for Quantity&lt;1, 1, -1&gt; {
        type Output = Quantity&lt;1, 2, -2&gt;;
        fn mul(self, y: Quantity&lt;0, 1, -1&gt;) -&gt; Self::Output {
            Quantity {value: self.value*y.value}
        }
    }

    // Masse*Geschwindigkeit
    impl Mul&lt;Quantity&lt;0, 1, -1&gt;&gt; for Quantity&lt;1, 0, 0&gt; {
        type Output = Quantity&lt;1, 1, -1&gt;;
        fn mul(self, y: Quantity&lt;0, 1, -1&gt;) -&gt; Self::Output {
            Quantity {value: self.value*y.value}
        }
    }

    pub type Mass = Quantity&lt;1, 0, 0&gt;;
    pub type Speed = Quantity&lt;0, 1, -1&gt;;
    pub type Energy = Quantity&lt;1, 2, -2&gt;;

    use std::fmt;
    impl fmt::Display for Energy {
        fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
            write!(f, "{} Joule", self.value)
        }
    }

    pub mod unit {
        use std::ops::Mul;
        use super::{Mass, Speed};

        pub struct Kilogramm;
        pub struct MeterPerSecond;

        impl Mul&lt;Kilogramm&gt; for f64 {
            type Output = Mass;
            fn mul(self, _y: Kilogramm) -&gt; Self::Output {
                Mass {value: self}
            }
        }
        impl Mul&lt;MeterPerSecond&gt; for f64 {
            type Output = Speed;
            fn mul(self, _y: MeterPerSecond) -&gt; Self::Output {
                Speed {value: self}
            }
        }
    }
}

macro_rules! quantity {
    ($v:tt kg) =&gt; {$v*unit::Kilogramm};
    ($v:tt m/s) =&gt; {$v*unit::MeterPerSecond}
}

use quantities::{unit, Mass, Speed, Energy};

fn kinetic_energy(m: Mass, v: Speed) -&gt; Energy {
    0.5*m*v*v
}

fn main() {
    let m = quantity!{1.0 kg};
    let v = quantity!{2.0 m/s};
    println!("{}", kinetic_energy(m, v));
}
</pre>

<h2 id="Stapel">Beispiel: Beschränkter Stapelspeicher</h2>

<p>Die Nutzung von <code>Vec</code> zur Erstellung von
Stapelspeichern ist mit dem Nachteil der Haldenspeicher-Allokation
behaftet. Ein Ausweg besteht darin, Stapelspeicher stattdessen mit
Feldern fester Länge zu erstellen, sofern eine Beschränkung der
Kapazität tolerierbar erscheint.

<p>Für diesen Stapel wünscht man sich darüber hinaus einen
eigenen abstrakten Datentyp. Weil dieser Typ allerdings über seine
Kapazität zu parametrisieren ist, benötigen wir eine Konstante
als Typparameter. Die folgende Darstellung zeigt einen Prototyp,
bei dem der Elementtyp zur Vereinfachung durch die Traits
<code>Copy</code> und <code>Default</code> beschränkt wurde.

<pre class="rust ibox">
struct Stack&lt;T, const N: usize&gt; {
    sp: usize, buff: [T; N]
}

impl&lt;T: Copy + Default, const N: usize&gt; Stack&lt;T, N&gt; {
    fn new() -&gt; Self {
        Self {sp: 0, buff: [T::default(); N]}
    }
    fn try_push(&amp;mut self, value: T) -&gt; Result&lt;(), ()&gt; {
        match self.buff.get_mut(self.sp) {
            Some(p) =&gt; {*p = value; self.sp += 1; Ok(())},
            None =&gt; Err(())
        }
    }
    fn push(&amp;mut self, value: T) {
        self.try_push(value).unwrap()
    }
    fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {
        match self.buff.get(self.sp - 1) {
            Some(value) =&gt; {self.sp -= 1; Some(*value)},
            None =&gt; None
        }
    }
}

fn main() {
    let mut stack = Stack::&lt;i32, 10&gt;::new();
    stack.push(1);
    stack.push(2);
    println!("{}", stack.pop().unwrap());
    println!("{}", stack.pop().unwrap());
}
</pre>

<p>Der Typ <code>ArrayVec</code> aus dem Paket
»<a href="https://crates.io/crates/arrayvec">arrayvec</a>«
bietet eine vollständige Implementierung der benötigten
Funktionalität. Im Wesentlichen handelt es sich hierbei um ein Analogon
zu <code>Vec</code>.

<h2 id="SubArray">Beispiel: Ausschnitte fester Länge</h2>

<p>Angenommen, es besteht die Situation wo ein Programm Bytes aus
gegebenen Daten herauslesen soll. Das kann beispielsweise so
aussehen:

<pre class="rust ibox">
let a: &amp;[u8] = &amp;data[i..i+8];
let y1 = f(a[0], a[1], a[2], a[3]);
let y2 = f(a[4], a[5], a[6], a[7]);
</pre>

<p>Wenn der Compiler smart genug ist, erzeugt er vor den Zugriffen
einmal die Prüfung

<pre class="rust ibox">
assert!(a.len() == 8);
</pre>

<p>und erspart dem Programm infolge die Bounds checks. Wir können die
Entfernung der Bounds checks erzwingen ohne uns auf den Compiler zu
verlassen, indem der Ausschnitt als Array begriffen wird. Das ist
deshalb möglich, weil der Ausschnitt von der festen Länge acht ist.
Über die Länge parametrisiert ergibt sich dafür:

<pre class="rust ibox">
trait SubArray&lt;T&gt; {
    fn slice&lt;const N: usize&gt;(&amp;self, i: usize) -&gt; &amp;[T; N];
}

impl&lt;T&gt; SubArray&lt;T&gt; for [T] {
    fn slice&lt;const N: usize&gt;(&amp;self, i: usize) -&gt; &amp;[T; N] {
        self[i..i+N].try_into().unwrap()
    }
}
</pre>

<p>Der Ausschnitt lässt sich nun durch

<pre class="rust ibox">
let a: &amp;[u8; 8] = data.slice::&lt;8&gt;(i);
</pre>

<p>ersetzen. Freilich sollte der Compiler überdies die Implementierung
von <code>slice</code> optimieren, oder man kümmert sich selbst
darum. Entscheidend ist aber, dass diese Implementierung
vom Rest des Programms abgekapselt vorliegt.

<p>Nebenbei bemerkt ist es wohl noch besser, die acht Bytes gleich
in einer Operation in ein Register zu schieben, um aufwändige
Speicherzugriffe zu sparen. Gehen wir davon aus, der Compiler ist
smart genug und behandelt <code>[u8;8]</code> wie <code>u64</code>,
dann dürfte es kein Nachteil sein, den Ausschnitt per

<pre class="rust ibox">
let a: [u8; 8] = *data.slice::&lt;8&gt;(i);
</pre>

<p>als Wert zu handhaben. Es mag wohl auch günstig sein, wenn
man erzwingen kann dass die Adresse von <code>data</code> und
der Index <code>i</code> ein ganzzahliges Vielfaches der Wortgröße
sind. Dann fügt sich der Ausschnitt in die Speicherausrichtung ein und
kann als ein oder zwei Worte gelesen werden. Ich will an dieser Stelle
nicht näher darauf eingehen.

<h2 id="Restriktion">Einschränkung auf einzelne Konstanten</h2>

<p>Manchmal möchte man den Bereich einer Parametrisierung
auf einzelne Konstanten einschränken. Das ist erreichbar, indem
für diese konkreten Konstanten ein Trait implementiert wird.
Man stößt hierbei jedoch auf die Komplikation, dass Traits lediglich
für reguläre Typen implementierbar sind, nicht aber für Konstanten.
Dieses Problem lässt sich allerdings durch den folgenden Trick
umgehen. Wir definieren einen Typkonstruktor <code>U32</code>,
der eine Konstante <code>N</code> des Typs <code>u32</code> in einen
gewöhnlichen Typ <code>U32&lt;N&gt;</code> umwandelt. Der Trait wird
dann stattdessen für diesen Typ implementiert.

<p>Das folgende Beispiel verdeutlicht das Vorgehen anhand eines
Linksshifts, der nur für solche Distanzen definiert
sein soll, welche nichtnegative ganzzahlige Vielfache von acht sind.

<pre class="rust ibox">
struct U32&lt;const N: u32&gt;;

macro_rules! implement {
    ($t:ty, for ($tc:ident) [$($value:expr),*]) =&gt; {
        $(impl $t for $tc&lt;$value&gt; {})*
    }
}

trait ShiftAmount {}
implement!(ShiftAmount, for (U32) [0, 8, 16, 24]);

fn shift_left&lt;const N: u32&gt;(x: u32) -&gt; u32
where U32&lt;N&gt;: ShiftAmount
{
    x &lt;&lt; N
}

fn main() {
    println!("{}", shift_left::&lt;8&gt;(1));
}

</pre>

<h2 id="Praedikate">Einschränkung durch Prädikate</h2>

<p>Es tut sich die Frage auf, ob sich eine Parametrisierung allgemeiner
durch logische Prädikate einschränken lässt. Eine Vorgehensweise
dazu geht wie folgt. Der boolesche Wert des Prädikates ist ebenfalls
eine Konstante, da das Prädikat auf eine Konstante angewendet wird.
Analog wie zuvor muss ein Typkonstruktor <code>Bool</code> den
booleschen Wert in einen gewöhnlichen Typ umwandeln. Um das Prädikat
nun als erfüllt voraussetzen zu können, definiert man einen Trait
<code>True</code>, der ausschließlich für den Wert <code>true</code>
definiert ist.

<pre class="rust ibox">
struct Bool&lt;const B: bool&gt;;

trait True {}
impl True for Bool&lt;true&gt; {}

fn shift_left&lt;const N: u32&gt;(x: u32) -&gt; u32
where Bool&lt;{N%8 == 0}&gt;: True
{
    x &lt;&lt; N
}
</pre>

<p>Zu bemerken ist, dass dafür Ausdrücke mit Parametern auswertbar
sein müssen. Im Jahr 2021 war das noch experimentell gewesen.

<h2 id="Zusicherungen">Zusicherungen an Konstanten</h2>

<p>Die Umwandlung einer booleschen Konstante in einen gewöhnlichen
Typ befähigt uns darüber hinaus, eine bereits zur Kompilierzeit
ausgeführte Zusicherung an eine Konstante konstruieren zu können.
Es gibt zwar auch Tricks, wie man das ohne Konstanten als
Typparameter erreichen kann, aber die sind nicht sonderlich
ästhetisch.

<p>Als Beispiel wird an ein Feld zugesichert, sortiert zu sein.
Fügt man zusätzliche Elemente hinzu, können diese dann nicht
versehentlich an der falschen Stelle eingefügt werden.
Das ist beispielsweise wichtig, damit eine binäre Suche, die
ein sortiertes Feld voraussetzt, korrekt abläuft. 

<pre class="rust ibox">
macro_rules! const_assert {
    ($cond:expr) =&gt; {
        #[allow(dead_code)]
        const _: () = {
            struct Bool&lt;const B: bool&gt;;
            const _: Bool&lt;true&gt; = Bool::&lt;{$cond}&gt;;
        };
    }
}

const fn is_sorted(a: &amp;[i32]) -&gt; bool {
    let mut i = 1;
    while i &lt; a.len() {
        if a[i-1] &gt;= a[i] {return false;}
        i += 1;
    }
    true
}

const A: [i32; 4] = [1, 2, 3, 4];

const_assert!(is_sorted(&amp;A));
</pre>

</body>
</html>

