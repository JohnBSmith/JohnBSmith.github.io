<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Wortliste</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Beispiele: Wortliste</h1>

<p>Vorgelegt werden soll ein Programm das folgendes tut:
<ul>
<li>Eine Text-Datei einlesen und als Zeichenkette weitergeben.
<li>Wörter bestehend aus Buchstaben aus dieser Zeichenkette extrahieren.
<li>Doppeltes Vorkommen eines Wortes aus der Liste entfernen.
<li>Die Liste sortieren.
</ul>


<h2>Musterlösung 1</h2>

<pre class="rust box">
use std::collections::HashMap;

fn string_to_words(s: &amp;str) -&gt; Vec&lt;String&gt; {
    let mut acc: Vec&lt;String&gt; = Vec::new();
    let mut buffer = String::new();
    for c in s.chars() {
        if c.is_alphabetic() {
            buffer.push(c);
        } else {
            if !buffer.is_empty() {
                acc.push(buffer.clone());
                buffer.clear();
            }
        }
    }
    acc
}

fn unique(v: &amp;[String]) -&gt; Vec&lt;String&gt; {
    let mut m: HashMap&lt;String, ()&gt; = HashMap::new();
    for s in v {
        m.insert(s.clone(), ());
    }
    let mut acc: Vec&lt;String&gt; = Vec::new();
    for (key, _) in m {
        acc.push(key);
    }
    acc
}

fn main() {
    let args: Vec&lt;String&gt; = std::env::args().collect();
    let path = &amp;args[1];
    let s = match std::fs::read_to_string(path) {
        Ok(s) =&gt; s,
        _ =&gt; {
            println!("Could not read file {}.", path);
            return;
        }
    };
    let mut words = string_to_words(&amp;s);
    words = unique(&amp;words);
    words.sort();
    println!("{:?}", words);
}
</pre>

<h2>Musterlösung 2 (fortgeschritten)</h2>

<pre class="rust box">
use std::collections::HashSet;
use std::iter::FromIterator;
use std::hash::Hash;

fn string_to_words(s: &amp;str) -&gt; impl Iterator&lt;Item = &amp;str&gt; + '_ {
    s.split(|x: char| !x.is_alphabetic()).filter(|&amp;x| x != "")
}

fn unique&lt;T: Eq + Hash&gt;(i: impl IntoIterator&lt;Item = T&gt;) -&gt; Vec&lt;T&gt; {
    HashSet::&lt;T&gt;::from_iter(i.into_iter()).into_iter().collect()
}

fn main() {
    let argv: Vec&lt;String&gt; = std::env::args().collect();
    let path = &amp;argv[1];
    let s = match std::fs::read_to_string(path) {
        Ok(s) => s,
        _ => {
            println!("Could not read file {}.", path);
            return;
        }
    };
    let mut words = unique(string_to_words(&amp;s));
    words.sort();
    println!("{:?}", words);
}
</pre>



</body>
</html>

