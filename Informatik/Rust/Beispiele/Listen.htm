<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Listen</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Beispiele: Listen</h1>

<h2>Einfach verkettete Listen</h2>

<pre class="rust box">
mod list {
    use std::fmt;

    pub struct Node&lt;T&gt; {
        pub item: T,
        pub next: List&lt;T&gt;
    }
    
    pub enum List&lt;T&gt; {
        None,
        Node(Box&lt;Node&lt;T&gt;&gt;)
    }
    
    impl&lt;T&gt; List&lt;T&gt; {
        pub fn node(item: T, next: List&lt;T&gt;) -&gt; List&lt;T&gt; {
            List::Node(Box::new(Node {item, next}))
        }

        pub fn map&lt;U&gt;(&amp;self, f: impl Fn(T)-&gt;U) -&gt; List&lt;U&gt;
        where T: Clone
        {
            match self {
                List::Node(node) =&gt; List::node(
                    f(node.item.clone()), node.next.map(f)),
                List::None =&gt; List::None
            }
        }
    }
    
    pub fn list&lt;T: Clone&gt;(a: &amp;[T]) -&gt; List&lt;T&gt; {
        a.iter().rev().fold(List::None,
            |acc, x| List::node(x.clone(), acc))
    }

    impl&lt;T: fmt::Display&gt; fmt::Display for List&lt;T&gt; {
        fn fmt(&amp;self, f: &amp;mut fmt::Formatter&lt;'_&gt;) -&gt; fmt::Result {
            write!(f, "[")?;
            let mut p = self;
            let mut first = true;
            while let List::Node(node) = p {
                if first {first = false;} else {write!(f, ", ")?;}
                write!(f, "{}", node.item)?;
                p = &amp;node.next;
            }
            write!(f, "]")
        }
    }
}

use list::{List, list};

fn main() {
    let a: List&lt;i32&gt; = list(&amp;[1, 2, 3, 4]);
    println!("{}", a.map(|x| 2*x));
}
</pre>

<p>Probleme, die hier bewusst offen gelassen wurden:
<ol>
<li>Man müsste die Algorithmen so schreiben, dass alle
  Trait-Bounds <code>T: Clone</code> verschwinden.
<li>Man sollte <code>map</code> besser iterativ formulieren,
  damit es nicht zu einem Überlauf des Aufrufstapels kommt.
<li>Auch der implizit erzeugte Destruktor ist rekursiv, würden also
  ebenso zum Überlauf des Aufrufstapels führen. Hinzufügen einer
  iterativen Zerstörung als Implementierung von <code>drop</code>
  behebt dieses Problem.
</ol>


</body>
</html>

