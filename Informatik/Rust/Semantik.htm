<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Formale Semantik</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Einfuehrung">Einführung</a>
<li><a href="#Ausdruecke">Arithmetische Ausdrücke</a>
<li><a href="#denotationell">Denotationelle Semantik</a>
</ol>

<h2 id="Einfuehrung">Einführung</h2>

<p>Dieses Kapitel basiert auf dem Artikel
»It’s Easy As 1,&nbsp;2,&nbsp;3« von Graham Hutton.

<h2 id="Ausdruecke">Arithmetische Ausdrücke</h2>

<p>Zunächst definieren wir die minimalistische Sprache, die
Gegenstand der Betrachtungen sein wird. Die Sprache soll aus
Ganzzahlen und Addition von Ganzzahlen bestehen. Dafür genügt
eine einzige Zeile BNF:

<pre class="ibox">
E = Integer | E "+" E;
</pre>

<p>Wir legen außerdem fest, dass Ausdrücke geklammert werden
dürfen, was zur erweiterten Grammatik

<pre class="ibox">
E = Integer | E "+" E | "(" E ")";
</pre>

<p>führt. Gewiss möchte man nun einen Parser für diese Sprache
schreiben. Für die weiteren Betrachtungen ist das allerdings
nebensächlich. Für Interessierte ist ein Verfahren zur Konstruktion
in ›<a href="Beispiele/Rekursiver-Abstieg.htm"
>Beispiele: rekursiver Abstieg</a>‹ beschrieben.

<p>Jeder Ausdruck besitzt eine direkte Entsprechung als
abstrakter Syntaxbaum der Form:

<pre class="rust ibox">
enum Expr {Value(i32), Add(Box&lt;(Expr, Expr)&gt;)}
</pre>

<p>Beispielsweise gehört zum Ausdruck »1&nbsp;+&nbsp;2«
der Baum

<pre class="indent">
Expr::Add(Box::new((Expr::Value(1), Expr::Value(2)))).
</pre>

<p>Da das recht umständlich ist, fügen wir zwei freistehende
Konstruktorfunktionen hinzu:

<pre class="rust ibox">
fn value(n: i32) -> Expr {Expr::Value(n)}
fn add(x: Expr, y: Expr) -> Expr {Expr::Add(Box::new((x, y)))}
</pre>

<p>Damit verkürzt sich die Notation zu

<pre class="indent">
add(value(1), value(2)).
</pre>

<h2 id="denotationell">Denotationelle Semantik</h2>

<p>Wir definieren die Auswertungsfunktion, die einem Ausruck
<code>x</code> vom Typ <code>Expr</code> den Wert <code>⟦x⟧</code>
vom Typ <code>i32</code> zuordnet, gemäß

<pre class="ibox">
⟦value(n)⟧ = n,
⟦add(x, y)⟧ = ⟦x⟧ + ⟦y⟧.
</pre>

<p>Wir tun so, als würde <code>i32</code> alle ganzen Zahlen
umfassen, bzw. als würden wir eine Langzahlarithmetik haben.
Andernfalls ist die Auswertung eine partielle Funktion, die wir
total machen müssten, indem der Rückgabewert zu
<code>Option&lt;i32&gt;</code> eingehüllt wird.

<p>Aus der mathematischen Definition der Auswertung erhält man direkt
eine Rust-Funktion:

<pre class="rust ibox">
fn eval(t: &amp;Expr) -&gt; i32 {
    match t {
        Expr::Value(n) =&gt; *n,
        Expr::Add(t) =&gt; eval(&amp;t.0) + eval(&amp;t.1)
    }
}
</pre>

<p>Man kann hier noch bemerken, dass die mathematische
Defintion nicht per se eine Auswertungsreihenfolge vorgiebt,
die Funktion <code>eval</code> aber eifrig auswertet.

</body>
</html>
