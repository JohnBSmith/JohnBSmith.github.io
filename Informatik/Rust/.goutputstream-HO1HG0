<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Links und Literatur</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>

<h1>Entwurf von Softwaresystemen</h1>

<h2>Constraints</h2>

<p>Man kann sich ein Programm einfach zurechtprogrammieren ohne
einem ordnenden Prinzip zu folgen. Irgendwann kann dabei aber der
Grund in Vergessenheit geraten, warum das Programm so formuliert wurde
wie es existiert. Eigentlich muss ein Programm aber immer Anforderungen
erfüllen, von denen jemand explizit oder implizit ausgegangen ist.

<p>Ein Ansatz zur Schaffung von Ordnung ist die explizite Auflistung
aller Anforderungen an das Softwaresystem und die Subsysteme.
Formaler formuliert sagen wir, dass die gestalterische Freiheit
durch Constraints eingeschränkt wird. Diese Constraints sind ein
System von Bedingungen die die Software erfüllen muss, so ähnlich
wie ein Gleichungssystem. Die fertige Software sollte schließlich
möglichst alle Bedingungen erfüllen. Manche Entwurfsentscheidungen sind
erst erdenklich wenn ein mentales Bild der Constraints vorlieg, hierfür
ist die explizite Auflistung der Constraints explizit förderlich.

<p>Constraints können auch untereinander in Beziehung stehen.
Etwa ziehen allgemeinere Constraints speziellere nach sich oder
zwei Constraints sind disjunkt, d.&nbsp;h. nicht gemeinsam erfüllbar.

<p>Kommen im Laufe der Zeit weitere Constraints hinzu, muss die
Software ggf. darauf angepasst werden. Betreffen die Constraints
die interne Struktur und interne Schnittstellen, spricht man bei der
Anpassung von einem Refactoring. Hierbei bleiben die äußeren
Schnittstellen meistens erhalten.


</body>
</html>

