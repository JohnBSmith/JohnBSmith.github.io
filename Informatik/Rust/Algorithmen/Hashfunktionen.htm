<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Hashfunktionen</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Hashfunktionen</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#CRC">Zyklische Redundanzprüfung</a>
</ol>

<h2 id="CRC">Zyklische Redundanzprüfung</h2>

<pre class="rust box">
pub mod crc {
    const POLYNOMIAL: u32 = 0xEDB88320;

    pub struct CRC32 {
        lookup: [u32; 256]
    }

    impl CRC32 {
        pub fn new() -&gt; Self {
            let mut lookup = [0; 256];
            for i in 0..lookup.len() {
                let mut crc = i as u32;
                for _ in 0..8 {
                    let a = (!(crc &amp; 1)).wrapping_add(1);
                    crc = (crc &gt;&gt; 1) ^ (a &amp; POLYNOMIAL);
                }
                lookup[i] = crc;
            }
            return Self{lookup};
        }
        pub fn hash(&amp;self, data: &amp;[u8], previous: u32) -&gt; u32 {
            let mut crc: u32 = !previous;
            for byte in data {
                let index = ((crc as u8) ^ byte) as usize;
                crc = (crc &gt;&gt; 8) ^ self.lookup[index];
            }
            return !crc;
        }    
    }
}

fn main() {
    let crc = crc::CRC32::new();
    let data = b"Tee";
    println!("{:08x}",crc.hash(data,0));
}
</pre>


</body>
</html>

