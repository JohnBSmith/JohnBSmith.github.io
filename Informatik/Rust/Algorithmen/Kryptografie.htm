<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Kryptografie</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Algorithmen: Kryptografie</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#ChaCha20">ChaCha20</a>
</ol>

<h2 id="ChaCha20">ChaCha20</h2>

<pre class="rust box">
// Das Stromchiffre ChaCha20 von Daniel Bernstein.

fn u32_from_bytes_le(a: &amp;[u8]) -&gt; u32 {
    u32::from(a[0]) | u32::from(a[1])&lt;&lt;8 |
    u32::from(a[2])&lt;&lt;16 | u32::from(a[3])&lt;&lt;24
}

fn quarter_round(x: &amp;mut [u32;16],
    a: usize, b: usize, c: usize, d: usize
) {
    x[a] = x[a].wrapping_add(x[b]);
    x[d] = (x[d]^x[a]).rotate_left(16);
    x[c] = x[c].wrapping_add(x[d]);
    x[b] = (x[b]^x[c]).rotate_left(12);
    x[a] = x[a].wrapping_add(x[b]);
    x[d] = (x[d]^x[a]).rotate_left(8);
    x[c] = x[c].wrapping_add(x[d]);
    x[b] = (x[b]^x[c]).rotate_left(7);
}

fn chacha20_stream(key: &amp;[u8;32], iv: &amp;[u8;8],
    callback: &amp;mut dyn FnMut(u8) -&gt; bool
) {
    let mut state: [u32;16] = [0;16];
    let x: &amp;mut [u32;16] = &amp;mut [0;16];

    state[0] = u32_from_bytes_le("expa".as_bytes());
    state[1] = u32_from_bytes_le("nd 3".as_bytes());
    state[2] = u32_from_bytes_le("2-by".as_bytes());
    state[3] = u32_from_bytes_le("te k".as_bytes());
    for i in 0..8 {
        state[4+i] = u32_from_bytes_le(&amp;key[4*i..4*(i+1)]);
    }
    state[12] = 0; // Counter, niederwertige Bits
    state[13] = 0; // Counter, höherwertige Bits
    state[14] = u32_from_bytes_le(&amp;iv[0..4]);
    state[15] = u32_from_bytes_le(&amp;iv[4..8]);

    'stream: loop {
        *x = state;
        for _ in 0..10 {
            quarter_round(x, 0, 4,  8, 12);
            quarter_round(x, 1, 5,  9, 13);
            quarter_round(x, 2, 6, 10, 14);
            quarter_round(x, 3, 7, 11, 15);
            quarter_round(x, 0, 5, 10, 15);
            quarter_round(x, 1, 6, 11, 12);
            quarter_round(x, 2, 7,  8, 13);
            quarter_round(x, 3, 4,  9, 14);
        }
        for i in 0..16 {
            let value = state[i].wrapping_add(x[i]);
            if callback(value as u8) {break 'stream;};
            if callback((value&gt;&gt;8) as u8) {break 'stream;};
            if callback((value&gt;&gt;16) as u8) {break 'stream;};
            if callback((value&gt;&gt;24) as u8) {break 'stream;};
        }
        state[12] = state[12].wrapping_add(1);
        if state[12] == 0 {state[13] += 1;}
    }
}

fn encipher(key: &amp;[u8;32], iv: &amp;[u8;8], data: &amp;mut [u8]) {
    let mut i = data.iter_mut();
    chacha20_stream(key,iv,&amp;mut |y| {
        if let Some(x) = i.next() {*x ^= y; false} else {true}
    });
}

fn key_from(text: &amp;str) -&gt; [u8;32] {
    let mut key: [u8;32] = [0;32];
    let n = text.len().min(32);
    key[0..n].clone_from_slice(&amp;text.as_bytes()[0..n]);
    return key;
}

fn input(prompt: &amp;str) -&gt; String {
    use std::{io,io::Write};
    let mut buffer = String::new();
    print!("{}",prompt);
    io::stdout().flush().unwrap();
    io::stdin().read_line(&amp;mut buffer).unwrap();
    buffer.pop();
    if cfg!(windows) {buffer.pop();}
    return buffer;
}

fn main() -&gt; std::io::Result&lt;()&gt; {
    let argv: Vec&lt;String&gt; = std::env::args().collect();
    let mut data = std::fs::read(&amp;argv[1])?;

    let nonce: [u8;8] = [0;8];
    // Eine Nonce wird bei einem Einmalschlüssel nicht benötigt,
    // der dann aber nur ein einziges Mal benutzt werden darf.
    // In der Praxis z.B. mit /dev/urandom initialisieren und
    // öffentlich den verschlüsselten Daten voranstellen.

    let key = key_from(&amp;input("Schlüssel: "));
    // Schlüssel mit mindestens 128 Bit Entropie eintippen,
    // z.B. 28 zufällige Zeichen (Zahlen und kleine Buchstaben).
    // In der Praxis ein aufwändiges Hashverfahren auf die
    // Eingabe anwenden -- da gibt es extra Algorithmen für --
    // und die Nonce als Salt benutzen.

    encipher(&amp;key,&amp;nonce,&amp;mut data);

    std::fs::write(&amp;argv[2],data)?;
    return Ok(());
}
</pre>


</body>
</html>

