<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Sortierung</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Algorithmen: Sortierung</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Bubblesort">Bubblesort</a>
<li><a href="#Quicksort">Quicksort</a>
</ol>

<h2 id="Bubblesort">Bubblesort</h2>
<pre class="rust box">
fn bubble_sort&lt;T: Ord&gt;(a: &amp;mut [T]) {
    let n = a.len();
    for _ in 0..n {
        for i in 0..n-1 {
            if a[i+1]&lt;a[i] {a.swap(i,i+1);}
        }
    }
}

fn main() {
    let mut a = [3,1,4,2];
    bubble_sort(&amp;mut a);
    println!("{:?}",a);
}
</pre>

<h2 id="Quicksort">Quicksort</h2>

<h3>Rekursiv</h3>
<pre class="rust box">
fn qsort&lt;T: Ord+Clone&gt;(a: &amp;[T]) -&gt; Vec&lt;T&gt; {
    if a.len()==0 {return vec![];}
    let l: Vec&lt;T&gt; = a[1..].iter().cloned().filter(|x| *x&lt;a[0]).collect();
    let r: Vec&lt;T&gt; = a[1..].iter().cloned().filter(|x| *x&gt;=a[0]).collect();
    [qsort(&amp;l), qsort(&amp;r)].join(&amp;a[0])
}
</pre>

<pre class="rust box">
fn qsort&lt;T: Ord+Clone&gt;(a: &amp;[T]) -&gt; Vec&lt;T&gt; {
    if a.len()==0 {return vec![];}
    let (l, r): (Vec&lt;T&gt;, Vec&lt;T&gt;)
        = a[1..].iter().cloned().partition(|x| *x&lt;a[0]);
    [qsort(&amp;l), qsort(&amp;r)].join(&amp;a[0])
}
</pre>

<h3>Rekursiv, in-place</h3>
<pre class="rust box">
fn partition&lt;T: Ord&gt;(a: &amp;mut [T], k: usize) -&gt; usize {
    let pivot = a.len()-1;
    a.swap(k,pivot);
    let mut i = 0;
    for j in 0..pivot {
        if a[j] &lt;= a[pivot] {a.swap(i,j); i += 1;}
    }
    a.swap(i,pivot);
    return i;
}

fn qsort&lt;T: Ord&gt;(a: &amp;mut [T]) {
    if a.len()&lt;2 {return;}
    let i = partition(a,0);
    qsort(&amp;mut a[..i]);
    qsort(&amp;mut a[i+1..]);
}
</pre>

</body>
</html>

