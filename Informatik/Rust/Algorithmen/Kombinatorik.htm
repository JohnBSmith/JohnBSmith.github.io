<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Kombinatorik</title>
  <link href="../css/main.css" rel="stylesheet">
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Algorithmen: Kombinatorik</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Produkt">Kartesisches Produkt</a>
<li><a href="#Potenzmenge">Potenzmenge</a>
</ol>

<h2 id="Produkt">Kartesisches Produkt</h2>

<h3>Variadisch f√ºr Faktoren gleichen Datentyps</h3>
<pre class="rust">
fn cartesian_product&lt;T: Clone&gt;(a: &amp;[Vec&lt;T&gt;]) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    if a.len()==0 {
        return vec![Vec::new()];
    } else {
        let mut v: Vec&lt;Vec&lt;T&gt;&gt; = Vec::new();
        for x in &amp;a[0] {
            for t in cartesian_product(&amp;a[1..]) {
                v.push([x.clone()].iter().cloned().chain(t).collect());
            }
        }
        return v;
    }
}

fn main() {
    let p = cartesian_product(&amp;[vec![0,1],vec![0,1]]);
    println!("{:?}",p);
}
</pre>


<h2 id="Potenzmenge">Potenzmenge</h2>

<h3>Iterativ</h3>
<pre class="rust">
fn power_set&lt;T: Clone&gt;(a: impl IntoIterator&lt;Item=T&gt;) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    let mut ps = vec![vec![]];
    for x in a {
        for mut s in ps.clone() {
            s.push(x.clone());
            ps.push(s);
        }
    }
    return ps;
}
</pre>

<h3>Funktional</h3>
<pre class="rust">
fn power_set&lt;T: Clone&gt;(a: impl IntoIterator&lt;Item=T&gt;) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    a.into_iter().fold(vec![vec![]],
        |mut ps, x| {ps.extend(ps.clone().into_iter()
            .map(|mut s| {s.push(x.clone()); s})); ps})
}
</pre>

</body>
</html>

