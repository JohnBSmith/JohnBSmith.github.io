<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Kombinatorik</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Algorithmen: Kombinatorik</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Produkt">Kartesisches Produkt</a>
<li><a href="#Potenz">Kartesische Potenz</a>
<li><a href="#Potenzmenge">Potenzmenge</a>
<li><a href="#Permutationen">Permutationen</a>
<li><a href="#Binomialkoeffizient">Binomialkoeffizient</a>
</ol>

<h2 id="Produkt">Kartesisches Produkt</h2>

<h3>Variadisch f√ºr Faktoren gleichen Datentyps</h3>
<pre class="rust box">
fn cartesian_product&lt;T: Clone&gt;(a: &amp;[Vec&lt;T&gt;]) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    if a.len()==0 {
        return vec![Vec::new()];
    } else {
        let mut v: Vec&lt;Vec&lt;T&gt;&gt; = Vec::new();
        for x in &amp;a[0] {
            for t in cartesian_product(&amp;a[1..]) {
                v.push([x.clone()].iter().cloned().chain(t).collect());
            }
        }
        return v;
    }
}

fn main() {
    let p = cartesian_product(&amp;[vec![0,1],vec![0,1]]);
    println!("{:?}",p);
}
</pre>

<h2 id="Potenz">Kartesische Potenz</h2>

<h3>Rekursiv</h3>
<pre class="rust box">
fn pow_rec(a: &amp;mut [u32], m: u32, i: usize,
    callback: &amp;mut dyn FnMut(&amp;[u32])
) {
    if i == a.len() {
        callback(a);
    } else {
        for k in 0..m {
            a[i] = k;
            pow_rec(a,m,i+1,callback);
        }
    }
}

fn cartesian_power(m: u32, n: u32) -&gt; Vec&lt;Vec&lt;u32&gt;&gt; {
    let mut buffer: Vec&lt;Vec&lt;u32&gt;&gt; = vec![];
    let a = &amp;mut vec![0; n as usize];
    pow_rec(a,m,0,&amp;mut |a| {
        buffer.push(Vec::from(a));
    });
    return buffer;
}
</pre>

<h3>Iterativ</h3>

<pre class="rust box">
// Nach Umwandlung der Rekursion in eine Iteration
fn pow(a: &amp;mut [u32], m: u32,
    callback: &amp;mut dyn FnMut(&amp;[u32])
) {
    let n = a.len();
    let mut stack: Vec&lt;u32&gt; = Vec::with_capacity(n);
    let mut k = 0;
    let mut i = 0;
    loop {
        if i == n {
            callback(a);
        } else {
            if k&lt;m {
                a[i] = k;
                stack.push(k);
                k = 0; i += 1;
                continue;
            }
        }
        match stack.pop() {
            Some(value) =&gt; {i -= 1; k = value+1;}
            _ =&gt; break
        }
    }
}

fn cartesian_power(m: u32, n: u32) -&gt; Vec&lt;Vec&lt;u32&gt;&gt; {
    let mut buffer: Vec&lt;Vec&lt;u32&gt;&gt; = vec![];
    let a = &amp;mut vec![0; n as usize];
    pow(a,m,&amp;mut |a| {
        buffer.push(Vec::from(a));
    });
    return buffer;
}
</pre>


<h2 id="Potenzmenge">Potenzmenge</h2>

<h3>Iterativ</h3>
<pre class="rust box">
fn power_set&lt;T: Clone&gt;(a: impl IntoIterator&lt;Item=T&gt;) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    let mut ps = vec![vec![]];
    for x in a {
        for mut s in ps.clone() {
            s.push(x.clone());
            ps.push(s);
        }
    }
    return ps;
}
</pre>

<h3>Funktional</h3>
<pre class="rust box">
fn power_set&lt;T: Clone&gt;(a: impl IntoIterator&lt;Item=T&gt;) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    a.into_iter().fold(vec![vec![]],
        |mut ps, x| {ps.extend(ps.clone().into_iter()
            .map(|mut s| {s.push(x.clone()); s})); ps})
}
</pre>

<h2 id="Permutationen">Permutationen</h2>

<h3>Rekursiv</h3>
<pre class="rust box">
// Algorithmus von Heap
fn perm&lt;T&gt;(a: &amp;mut [T], n: usize,
    callback: &amp;mut dyn FnMut(&amp;[T])
) {
    if n==1 {
        callback(a);
    } else {
        perm(a,n-1,callback);
        for i in 0..n-1 {
            if n%2==0 {
                a.swap(i,n-1);
            } else {
                a.swap(0,n-1);
            }
            perm(a,n-1,callback);
        }
    }
}

fn permutations&lt;T: Clone&gt;(a: &amp;[T]) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    let mut buffer: Vec&lt;Vec&lt;T&gt;&gt; = vec![];
    let n = a.len();
    let a = &amp;mut Vec::from(a);
    perm(a,n,&amp;mut |a| {buffer.push(Vec::from(a));});
    return buffer;
}

fn main() {
    println!("{:?}",permutations(&amp;[1,2,3]));
}
</pre>

<h3>Iterativ</h3>

<pre class="rust box">
// Algorithmus von Heap in der iterativen Formulierung
fn perm&lt;T&gt;(a: &amp;mut [T], callback: &amp;mut dyn FnMut(&amp;[T])) {
    let n = a.len();
    let mut stack = vec![0;n];
    callback(a);

    let mut i = 0;
    while i&lt;n {
        if stack[i]&lt;i {
            if i%2==0 {
                a.swap(0,i);
            } else {
                a.swap(stack[i],i);
            }
            callback(a);
            stack[i] += 1;
            i = 0;
        } else {
            stack[i] = 0;
            i += 1;
        }
    }
}

fn permutations&lt;T: Clone&gt;(a: &amp;[T]) -&gt; Vec&lt;Vec&lt;T&gt;&gt; {
    let mut buffer: Vec&lt;Vec&lt;T&gt;&gt; = vec![];
    let a = &amp;mut Vec::from(a);
    perm(a,&amp;mut |a| {buffer.push(Vec::from(a));});
    return buffer;
}

fn main() {
    for t in permutations(&amp;[1,2,3]) {
        println!("{:?}",t);
    }
}
</pre>

<h2 id="Binomialkoeffizient">Binomialkoeffizient</h2>

<pre class="rust box">
fn choose(n: u64, mut k: u64) -&gt; u64 {
    if k&gt;n {return 0;}
    if k&gt;n-k {k = n-k;}
    let mut y = 1;
    for i in 0..k {
        y = y*(n-i)/(i+1);
    }
    return y;
}

fn tabluate(label: &amp;str, a0: u64, a1: u64, b0: u64, b1: u64,
    shift: usize, f: &amp;dyn Fn(u64,u64)-&gt;u64)
{
    print!("{:^5}|",label);
    for b in b0..=b1 {print!("{:&gt;1$}",b,shift);}
    println!("\n{:\u{2500}&lt;1$}","",6+shift*((b1-b0+1) as usize));
    for a in a0..=a1 {
        print!("{:&gt;4} |",a);
        for b in b0..=b1 {print!("{:&gt;1$}",f(a,b),shift);}
        println!();
    }
}

fn main() {
    tabluate("n\\k",0,10,0,10,4,&amp;choose);
}
</pre>

</body>
</html>

