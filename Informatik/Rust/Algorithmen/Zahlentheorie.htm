<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>Zahlentheorie</title>
  <link href="../css/main.css" rel="stylesheet">
  <script>var root_path = "../";</script>
  <script src="../js/main.js"></script>
  <script src="../js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="../Rust.htm">Programmieren in Rust</a>
<h1>Algorithmen: Zahlentheorie</h1>
<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#ggT">Größter gemeinsamer Teiler</a>
<li><a href="#kgV">Kleinstes gemeinsames Vielfaches</a>
<li><a href="#Potenz">Modulare Potenzfunktion</a>
<li><a href="#Primzahlen">Primzahlen</a>
<li><a href="#Teiler">Teiler</a>
<li><a href="#phi">Eulersche Phi-Funktion</a>
</ol>

<h2 id="ggT">Größter gemeinsamer Teiler</h2>
<pre class="rust box">
// Klassischer euklidischer Algorithmus, rekursiv
fn gcd(a: u32, b: u32) -&gt; u32 {
    return if b==0 {a}
      else if a==0 {b}
      else if b&lt;a {gcd(a-b,b)}
      else {gcd(a,b-a)};
}

// Klassischer euklidischer Algorithmus, iterativ
fn gcd(mut a: u32, mut b: u32) -&gt; u32 {
    if a==0 {
        return b;
    } else {
        while b != 0 {
            if b&lt;a {a = a-b;} else {b = b-a;}
        }
        return a;
    }
}

// Moderner euklidischer Algorithmus, rekursiv
fn gcd(a: u32, b: u32) -&gt; u32 {
    if b==0 {a} else {gcd(b,a%b)}
}

// Moderner euklidischer Algorithmus, iterativ
// ("Turbo-Euklid")
fn gcd(mut a: u32, mut b: u32) -&gt; u32 {
    while b != 0 {
        let h = a%b;
        a = b; b = h;
    }
    return a;
}
</pre>

<h2 id="kgV">Kleinstes gemeinsames Vielfaches</h2>
<pre class="rust box">
fn lcm(a: u32, b: u32) -&gt; u32 {
    a*b/gcd(a,b)
}

fn lcm_slice(a: &amp;[u32]) -&gt; u32 {
    a.iter().fold(1,|a,&amp;b| {a*b/gcd(a,b)})
}
</pre>

<h2 id="Potenz">Modulare Potenzfunktion</h2>

<h3>Ohne Überlauf-Prüfung</h3>
<pre class="rust box">
fn pow_mod(mut x: u32, mut n: u32, m: u32) -&gt; u32 {
    let mut y: u32 = 1;
    while n&gt;1 {
        if n%2 == 1 {y = (y*x)%m;}
        n /= 2; x = (x*x)%m;
    }
    if n==1 {y = (y*x)%m;}
    return y;
}
</pre>

<h3>Mit Überlauf-Prüfung</h3>
<pre class="rust box">
fn pow_mod(mut x: u32, mut n: u32, m: u32) -&gt; Option&lt;u32&gt; {
    let mut y: u32 = 1;
    while n&gt;1 {
        if n%2 == 1 {y = y.checked_mul(x)?%m;}
        n /= 2; x = x.checked_mul(x)?%m;
    }
    if n==1 {y = y.checked_mul(x)?%m;}
    return Some(y);
}
</pre>

<h2 id="Primzahlen">Primzahlen</h2>

<h3>Naiver Primzahltest</h3>
<pre class="rust box">
fn is_prime(n: u64) -&gt; bool {
    (1..n+1).filter(|i| n%i==0).count()==2
}

fn is_prime(n: u64) -&gt; bool {
    for i in 2..n {
        if n%i==0 {return false;}
    }
    return true;
}
</pre>

<h3>Verbesserter Primzahltest</h3>
<pre class="rust box">
fn is_prime(n: u64) -&gt; bool {
    let mut i: u64 = 2;
    while i*i&lt;=n {
        if n%i==0 {return false;}
        i += 1;
    }
    return true;
}
</pre>

<h3>Schneller Primzahltest</h3>
<pre class="rust box">
fn is_prime_trial_div(n: u32) -&gt; bool {
    if n&lt;4 {return n&gt;1;}
    if n%2==0 || n%3==0 {return false;}
    let mut i = 5;
    let mut w = 2;
    while i*i&lt;=n {
        if n%i==0 {return false;}
        i += w;
        w = 6-w;
    }
    return true;
}

fn pow_mod(a: u32, mut n: u32, m: u32) -&gt; u64 {
    let mut p: u64 = 1;
    let mut a: u64 = u64::from(a%m);
    while n&gt;1 {
        if n&amp;1==1 {p = (p*a)%u64::from(m);}
        n &gt;&gt;= 1; a = (a*a)%u64::from(m);
    }
    if n==1 {p = (p*a)%u64::from(m);}
    return p;
}

fn witness(a: u32, d: u32, n: u32, mut r: u32) -&gt; bool {
    let mut p = pow_mod(a,d,n);
    if p==1 {
        return true;
    } else {
        while r != 0 {
            if p == u64::from(n-1) {return true;}
            p = (p*p)%u64::from(n);
            r -= 1;
        }
        return false;
    }
}

pub fn is_prime(n: u32) -&gt; bool {
    if n&lt;13000000 {
        return is_prime_trial_div(n);
    } else if n&amp;1==0 {
        return false;
    }

    // let (2^r)*d = n-1;
    let mut r = 0;
    let mut d = n-1;
    while d&amp;1==0 {r += 1; d &gt;&gt;= 1;}

    // Miller-Rabin-Test
    return [2,7,61].iter().all(|&amp;a| witness(a,d,n,r));
}
</pre>

<h3>Primfaktorzerlegung</h3>
<pre class="rust box">
fn factor(mut n: u64) -&gt; Vec&lt;(u64,u8)&gt; {
    let mut v: Vec&lt;(u64,u8)&gt; = vec![];
    let mut p = 2;
    while p&lt;=n {
        let mut k = 0;
        while n%p==0 {n = n/p; k += 1;}
        if k != 0 {v.push((p,k));}
        p += 1;
    }
    return v;
}
</pre>

<h2 id="Teiler">Teiler</h2>
<pre class="rust box">
// Teilerliste
fn divisors(n: u64) -> Vec&lt;u64&gt; {
    (1..n+1).filter(|i| n%i==0).collect()
}

// Teileranzahlfunktion
fn sigma0(n: u64) -&gt; usize {
    (1..n+1).filter(|i| n%i==0).count()
}

// Teilerfunktion
fn sigma(x: u32, n: u64) -&gt; u64 {
    (1..n+1).filter(|i| n%i==0).map(|i| i.pow(x)).sum()
}
</pre>

<h2 id="phi">Eulersche Phi-Funktion</h2>

<pre class="rust box">
fn phi(mut n: u32) -&gt; u32 {
    if n==0 {return 0;}
    let mut y: u32 = 1;
    let mut p = 2;
    while p&lt;=n {
        let mut k = 0;
        while n%p==0 {n = n/p; k += 1;}
        if k != 0 {y *= p.pow(k-1)*(p-1);}
        p += 1;
    }
    return y;
}
</pre>

</body>
</html>

