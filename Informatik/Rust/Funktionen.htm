<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Funktionen</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Tupelwertige-Funktionen">Tupelwertige Funktionen</a>
<li><a href="#Variadische-Funktionen">Variadische Funktionen</a>
<li><a href="#Endrekursion">Endrekursion</a>
</ol>

<h2 id="Tupelwertige-Funktionen">Tupelwertige Funktionen</h2>

<p>Rust erlaubt Funktionen mit mehr als einem Rückgabewert.
Ermöglicht wird dies durch die Zusammenfassung der Rückgabewerte zu
einem Tupel.

<p>Als einfaches Beispiel bietet sich die Umrechnung zwischen
kartesischen und polaren Koordinaten an.

<pre class="rust ibox">
fn from_polar(r: f64, phi: f64) -&gt; (f64, f64) {
    (r*phi.cos(), r*phi.sin())
}

fn polar_from(x: f64, y: f64) -&gt; (f64, f64) {
    (x.hypot(y), y.atan2(x))
}

fn main() {
    use std::f64::consts::PI;
    let (x, y) = from_polar(1.0, 0.5*PI);
    println!("x = {:.4}; y = {:.4}", x, y);

    let (r, phi) = polar_from(x, y);
    println!("r = {:.4}; phi = {:.4}", r, phi);
}
</pre>

<h2 id="Variadische-Funktionen">Variadische Funktionen</h2>

<h3>Homogene Argumente</h3>

<p>Als <i>variadisch</i> bezeichnet man Funktionen, die keine
feste Arität haben, d.h. keine feste Anzahl an Argumenten. Zwar sind
solche Funktionen in Rust nicht direkt formulierbar, allerdings
lassen sie sich ausreichend ergonomisch nachstellen, indem der
variadische Teil in ein Slice verpackt wird.

<p>Für die Funktion <code>mean</code>, welche den Mittelwert der
Argumente bildet, findet sich bspw. die Formulierung:
<pre class="rust ibox">
fn mean(a: &amp;[f64]) -&gt; f64 {
    a.iter().sum::&lt;f64&gt;()/(a.len() as f64)
}

fn main() {
    let m = mean(&amp;[1.0, 2.0, 3.0, 4.0]);
    println!("{}", m);
}
</pre>

<h3>Heterogene Argumente</h3>

<p>Bei heterogenen Argumenten möchte man für die Argumente einer
variadischen Funktion jeweils einen unterschiedlichen Typ zulassen.
Ein Ansatz, wie sich das erreichen lässt, ist das Hochcasten der
Argumente in einen Trait-Typ. Das kann im Extremfall auch der
Trait <code>Any</code> sein. Dafür muss von den Argumenten jeweils
ein Borrow gebildet werden. Wir definieren für die Borrows ein Makro
<code>argv</code>, das sorgt für hübsche Syntax.

<p>Das Beispiel zeigt eine variadische Funktion die Argumente
unterschiedlichen Typs verträgt, solange diese nur den
Trait <code>Display</code> implementieren.

<pre class="rust ibox">
macro_rules! argv {
    ($($x:expr),*) =&gt; {&amp;[$(&amp;$x),*]}
}

fn display(a: &amp;[&amp;dyn std::fmt::Display]) {
    for x in a {
        println!("{}", x);
    }
}

fn main() {
    display(argv!["Eule", 24, true]);
}
</pre>

<p>Alternative Syntax:
<pre class="rust ibox">
macro_rules! call {
    ($f:expr, $($x:expr),*) =&gt; {$f(&amp;[$(&amp;$x),*])}
}

fn main() {
    call!(display, "Eule", 24, true);
}
</pre>

<p>Es ist auch machbar, variadische Funktionen ohne Rückgriff auf
Zeiger-Indirektionen zu konstruieren. Grundlage dafür ist ein
Helfer-Trait, der ein vom Typ abhängiges Verhalten schafft.
Die Idee ist nun, die Liste der Argumente als Tupel zu kodieren.
Weil Tupel unterschiedlicher Länge einen unterschiedlichen
Typ haben, kann man so das Verhalten von der Arität abhängig machen.

<pre class="rust ibox">
trait DisplayFn {
    fn display(self);
}

impl DisplayFn for (&amp;str,) {
    fn display(self) {
        println!("{}", self.0);
    }
}

impl DisplayFn for (&amp;str, i32) {
    fn display(self) {
        println!("{}", self.0);
        println!("{}", self.1);
    }
} 

fn display&lt;T: DisplayFn&gt;(x: T) {
    DisplayFn::display(x)
}

fn main() {
    display(("Eule",));
    display(("Eule", 24));
}
</pre>

<p>Man mag nun einwenden, dass die Arität bei der dargestellten
Konstruktion immer beschränkt bleibt. Von dieser Einschränkung können
wir uns aber lösen, indem wir anstelle der Tupel eine heterogene Liste
<code>List</code> benutzen. Mit dieser gelingt eine rekursive
Formulierung, die <code>display</code> allgemein implementiert.

<pre class="rust ibox">
struct Nil;
struct List&lt;Head, Tail&gt; (Head, Tail);

macro_rules! list {
    () =&gt; {Nil};
    ($x:expr) =&gt; {List($x, Nil)};
    ($x:expr, $($tail:expr),*) =&gt; {List($x, list![$($tail),*])}
}

trait DisplayFn {
    fn display(self);
}

impl DisplayFn for Nil {
    fn display(self) {}
}

impl&lt;H, T&gt; DisplayFn for List&lt;H, T&gt;
where H: std::fmt::Display, T: DisplayFn
{
    fn display(self) {
        println!("{}", self.0);
        DisplayFn::display(self.1);
    }
}

fn display&lt;T: DisplayFn&gt;(x: T) {
    DisplayFn::display(x)
}

fn main() {
    display(list!["Eule", 24, true]);
}
</pre>

<h2 id="Endrekursion">Endrekursion</h2>

<p>Problem bei jeder Rekursion ist die Allokation von Stapelspeicher.
Bei einer bestimmten Rekursionstiefe ist der Aufrufstapel aufgebraucht,
so dass es zum Programmabbruch kommt. Eine endständige Rekursion lässt
sich dahingehend entwickeln, dass der wesentliche Bedarf an
Stapelspeicher verschwindet.

<p>Leider ist bisweilen kein Endrekursion erzwingendes Konzept
verfügbar. Man kann sie allerdings emulieren. Eine klassischer Ansatz
nutzt ein sogenanntes Trampolin. Anstelle des Funktionsaufrufs
kehrt der Kontrollfluss bei dieser Konstruktion mit den Argumenten von
der Funktion zurück in eine Schleife, bei welcher die Funktion im
nächsten Schleifendurchlauf mit den neuen Argumenten abermals
aufgerufen wird.

<p>Zu beachten ist noch, dass die Rekursion irgendwann bei einem
Basisfall enden können muss. Stellt man diese Unterscheidung
durch eine Enumeration dar, gelangt man zur folgenden Implementierung.

<pre class="rust ibox">
enum Rec&lt;C, R&gt; {Continue(C), Return(R)}
use Rec::{Continue, Return};

fn tail_iter&lt;C, R, F&gt;(mut x: C, mut f: F) -&gt; R
where F: FnMut(C) -&gt; Rec&lt;C, R&gt;
{
    loop {
        match f(x) {
            Continue(c) =&gt; x = c,
            Return(r) =&gt; return r,
        }
    }
}
</pre>

<p>In ihrer endstänigen Formulierung nimmt die Fakultätsfunktion

<pre class="rust ibox">
fn fac(n: u32) -&gt; u32 {
    if n == 0 {1} else {n*fac(n - 1)}
}
</pre>

<p>beispielsweise die Gestalt

<pre class="rust ibox">
fn fac(n: u32) -&gt; u32 {
    fn fac_rec(n: u32, y: u32) -&gt; u32 {
        if n == 0 {y} else {fac_rec(n - 1, n*y)}
    }
    fac_rec(n, 1)
}
</pre>

<p>an. Wir trampolinieren sie und erhalten:

<pre class="rust ibox">
fn fac(n: u32) -&gt; u32 {
    tail_iter((n, 1), |(n, y)| {
        if n == 0 {Return(y)} else {Continue((n - 1, n*y))}
    })
}
</pre>

<p>Besteht Bedarf an wechselseitiger Rekursion, genügt die beschriebene
Konstruktion nicht mehr. Wir bekommen sie trotzdem, indem wir die
aufzurufende Funktion mit einer weiteren Enumeration unterscheiden.
Betrachten wir

<pre class="rust ibox">
fn odd(n: u32) -&gt; bool {
    if n == 0 {false} else {even(n - 1)}
}

fn even(n: u32) -&gt; bool {
    if n == 0 {true} else {odd(n - 1)}
}
</pre>

<p>mit der endstänigen Rekursion:

<pre class="rust ibox">
fn even(n: u32) -&gt; bool {
    fn even_rec(n: u32, y: bool) -&gt; bool {
        if n == 0 {y} else {odd_rec(n - 1, y)}
    }
    fn odd_rec(n: u32, y: bool) -&gt; bool {
        if n == 0 {!y} else {even_rec(n - 1, y)}
    }
    even_rec(n, true)
}
</pre>

<p>Und nun das kleine Kunststück:

<pre class="rust ibox">
fn even(n: u32) -&gt; bool {
    enum Call {Even(u32), Odd(u32)}
    use Call::{Even, Odd};
    use Rec::{Return as R, Continue as C};
    tail_iter((Even(n), true), |(app, y)| {    
        match app {
            Even(n) =&gt; if n == 0 {R(y)} else {C((Odd(n - 1), y))},
            Odd(n) =&gt; if n == 0 {R(!y)} else {C((Even(n - 1), y))}
        }
    })
}
</pre>

</body>
</html>
