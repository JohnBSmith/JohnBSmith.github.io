<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Typsystem und Typtheorie</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Produkte">Produkte von Typen</a>
<li><span class="modest">Summen von Typen</span>
<li><a href="#Funktionen">Typisierung von Funktionen</a>
<li><a href="#Polymorphe-Typen">Polymorphe Typen</a>
<li><a href="#Existentielle-Typen">Existentielle Typen</a>
</ol>

<p>Dieses Kapitel erläutert Beziehungen zwischen dem Typsystem von
Rust und der Typtheorie. Das soll der tiefergehenden Einordnung
dienen, ist aber für das Verständnis der Programmiersprache und
der nachfolgenden Kapitel nicht essentiell.

<h2 id="Produkte">Produkte von Typen</h2>

<h3>Typen von Tupeln</h3>

<p>Zu zwei Typen <code>X</code>,&nbsp;<code>Y</code> lässt sich
der Typ <code>X&times;Y</code> bilden, auch <code>(X,Y)</code>
geschrieben. Dies ist der Datentyp der Paare <code>(x,y)</code> mit
<code>x:&nbsp;X</code> und <code>y:&nbsp;Y</code>.

<p>Die Schlussregel zur Einführung von Paaren ist
eigentlich straightforward:
<pre class="indent">
&Gamma; |- x: X,  &Gamma; |- y: Y
───────────────────── (Prod.)
  &Gamma; |- (x,y): (X,Y)
</pre>

<p>Hinzu kommen Regeln zur Projektion:
<table class="indent" style="border-collapse: collapse">
<tr><td style="padding-right: 1.5em">
<pre style="margin: 0">
&Gamma; |- t: (X,Y)
───────────── (Proj. 0)
 &Gamma; |- t.0: X
</pre>

<td style="padding-left: 1.5em">
<pre style="margin: 0">
&Gamma; |- t: (X,Y)
───────────── (Proj. 1)
 &Gamma; |- t.1: Y
</pre>
</table>

<p>Die Regeln für Produkte von mehr als zwei Faktoren sind
analog. Zu beachten ist, dass es einen Unterschied zwischen
<code>(X,Y,Z)</code> und <code>(X,(Y,Z))</code> gibt.

<h3>Typen von Strukturen</h3>

<p>Strukturen, auch Records genannt, sind Tupel mit frei wählbaren
Bezeichnern zur Indizierung. Die Regel zur Einführung einer Struktur
mit zwei Einträgen lautet:

<pre class="indent">
    &Gamma; |- x: X,    &Gamma; |- y: Y
───────────────────────────────
&Gamma; |- {a: x, b: y}: {a: X, b: Y}
</pre>

<p>Entsprechend gibt es wieder Regeln zur Projektion:
<pre class="indent">
&Gamma; |- s: {a: X, b: Y}
────────────────────
    &Gamma; |- s.a: X
</pre>

<p>Die Bezeichner <code>a</code>,&nbsp;<code>b</code> gehören zum
Typ dazu. Infolge bedeuten andere Bezeichner einen anderen Typ.

<p>Die Regeln für Strukturen mit mehr als zwei Einträgen sind analog
zu den genannten.

<h2 id="Funktionen">Typisierung von Funktionen</h2>

<p>Zu zwei Typen <code>X</code>,&nbsp;<code>Y</code> gibt es den
Typ <code>X&nbsp;&rarr;&nbsp;Y</code>, der alle Funktionen mit
Argument vom Typ <code>X</code> und Wert vom Typ <code>Y</code>
beschreibt. Z.&nbsp;B. besitzt die Funktion
<pre class="rust ibox">
fn f(x: u32) -> bool {x%2 == 0}
</pre>

<p>die Typisierung
<p class="indent"><code>f: u32 &rarr; bool</code>.


<p>Für Funktionen gilt die folgende Schlussregel:
<pre class="indent">
&Gamma; |- f: X &rarr; Y,  &Gamma; |- x: X
───────────────────────── (App.)
      &Gamma; |- f(x): Y
</pre>

<p>Diese Schlussregel nennt man die Regel der Applikation, kurz
App. geschrieben. Für den Kontext
<p class="indent"><code>&Gamma;&nbsp;:=&nbsp;{n: u32, f: u32 &rarr; bool}</code>

<p>gilt z.&nbsp;B. die Schlussfolgerung:
<pre class="indent">
1. &Gamma; |- f: u32 &rarr; bool
2. &Gamma; |- n: u32
3. &Gamma; |- f(n): bool  (App. 1., 2.)
</pre>

<h2 id="Polymorphe-Typen">Polymorphe Typen</h2>

<p>Polymorphe Typisierung erkennt man an Typvariablen. Polymorphe
Typen sind solche, die über Typvariablen allquantifiziert sind.

<p>Hat ein Term den Typ <code>&forall;T.A</code>,
bedeutet dies, der Term ist vom Typ <code>A[T:=U]</code> für jeden
beliebigen Typ <code>U</code>. Das heißt, der Term hat nicht nur
einen Typ, sondern unendliche viele, die durch die Substitution
der Typvariable <code>T</code> durch beliebige Typen entstehen.
Diese Substitution bezeichnet man als <i>Spezialisierung</i>.

<p>In Rust stehen die Typvariablen in spitzen Klammern. Betrachten wir
dazu einmal die identische Funktion, das ist:
<pre class="rust ibox">
fn id&lt;T&gt;(x: T) -&gt; T {x}
</pre>

<p>Diese Funktion hat die Typisierung
<p class="indent"><code>id: &forall;T. T &rarr; T</code>.

<p>Sagen wir mal, wir haben den Kontext

<p class="indent"><code>&Gamma;&nbsp;:=&nbsp;{n: u32, id: &forall;T. T &rarr; T}</code>.

<p>Dann kann man schlussfolgern:

<pre class="indent">
1. &Gamma; |- id: &forall;T. T &rarr; T
2. &Gamma; |- id: u32 &rarr; u32  (1. [T:=u32])
3. &Gamma; |- n: u32          
4. &Gamma; |- id(n): u32  (App. 2., 3.)
</pre>

<p>Bei Vorhandensein von Trait-Bounds wird das nun ein wenig
komplizierter. Betrachten wir dazu:
<pre class="rust ibox">
fn dup&lt;T: Clone&gt;(x: T) -&gt; (T,T) {(x.clone(),x)}
</pre>

<p>Diese Funktion hat die Typisierung

<p class="indent"><code>dup: &forall;T&in;Clone. T &rarr; (T,T)</code>.

<p>Eine Substitution <code>T:=U</code> ist nur noch dann
durchführbar, wenn <code>U</code> in <code>Clone</code> liegt, das
heißt wenn <code>Clone</code> für <code>U</code> implementiert wurde.

<h2 id="Existentielle-Typen">Existentielle Typen</h2>

<p>Existentielle Typisierung erlaubt es, Wissen über die genaue
Struktur eines Wertes zu Vergessen, womit sich abstrakte Schnittstellen
erstellen lassen. Dies bildet die theoretische Grundlage für
Module und abstrakte Datentypen.

<p>Regel zur Einführung existentieller Typen:
<pre class="indent">
&Gamma; |- t: X[T:=U]
──────────────── (Pack)
&Gamma; |- (U,t): &exist;T.X
</pre>

<p>In Worten: Vorausgesetzt sei, der Term <code>t</code> ist vom Typ
<code>X</code> nachdem in <code>X</code> jedes Vorkommen der
Typvariable <code>T</code> gegen den Typ <code>U</code> ersetzt wurde.
Dann ist das Paar <code>(U,t)</code> vom
existentiellen Typ <code>&exist;T.X</code>.

<p>Zu bemerken ist dazu noch, dass der Term <code>(U,t)</code> mehrere
unterschiedliche existentielle Typen haben kann. Zur eindeutigen
Zuordnung schreibt man explizit <code>(U,t) as &exist;T.X</code>.

<p>Nun muss man Terme mit existentiell typisierten Variablen auch
auswerten können, wofür es an weiteren Regeln bedarf. Wir definieren

<p class="indent"><code>unpack (T,x) = (U,t) in s</code>

<p>als <code>s[x:=t][T:=U]</code>. In Worten: Enthält der Term
<code>s</code> eine Variable <code>x</code> und ist ein Wert
<code>(U,t)</code> gegeben, und möchte man <code>x=t</code> haben,
kann man <code>s</code> auswerten, indem jedes Vorkommen von
<code>x</code> in <code>s</code> durch <code>t</code> ersetzt wird.

<p>Damit das einen Sinn ergibt, darf für <code>x</code> natürlich
kein beliebiger Term ersetzt werden. Zusätzliche Forderung ist
<code>x: X</code>. Das führt zu der folgenden Schlussregel:

<pre class="indent">
&Gamma; |- e: &exist;T.X,  &Gamma;&cup;{x: X} |- s: Y,  T &notin; FV(Y)
─────────────────────────────────────────── (Unpack)
      &Gamma; |- (unpack (T,x) = e in s): Y
</pre>

<p>Der Typ <code>X</code> kodiert die abstrakte Schnittstelle und
<code>x: X</code> sagt aus, dass man auf <code>x</code> lediglich
Operationen dieser Schnittstelle anwenden darf.

<p>Betrachten wir als Beispiel den Struktur-Typ
<pre class="indent">
X := {a: T; even: T &rarr; bool}.
</pre>

<p>Ohne die Forderung, dass <code>T</code> nicht in den freien
Variablen <code>FV(Y)</code> vorkommen darf, würde die
Abstraktion kaputt brechen, womit interne Struktur von <code>x</code>
in den Wert von <code>s</code> entweichen würde. Z.&nbsp;B. kann man
nicht einfach <code>s:=x.a</code> setzen. Dann wäre ja <code>s: T</code>,
also <code>Y=T</code> und daher <code>T&nbsp;&in;&nbsp;FV(Y)</code>.



</body>
</html>

