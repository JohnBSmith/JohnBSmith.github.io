<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Compiler und Erstellungswerkzeuge</h1>

<h2>Inhaltsverzeichnis</h2>

<ol>
<li><a href="#rustc">Direkter Aufruf des Compilers</a>
<li><a href="#cargo">Ein Programm erstellen</a>
<li><a href="#Abhaengigkeiten">Abhängigkeiten</a>
<li><a href="#Aufraeumen">Aufräumen</a>
<li><a href="#Dokumentation">Dokumentation</a>
</ol>


<h2 id="rustc">Direkter Aufruf des Compilers</h2>

<p>Für gewöhnlich geschieht die Bedienung des Rust-Compilers
<code>rustc</code> über das Erstellungswerkzeug <code>cargo</code>.
Stattdessen kann man den Compiler auch direkt aufrufen.
Zunächst erstellt man dafür in einem Verzeichnis die Datei
»<code>main.rs</code>«, in welche das Programm

<pre class="rust ibox">
fn main() {}
</pre>

<p>geschrieben wird. Im selben Verzeichnis öffnet man ein Terminal
und führt die folgenden Befehle aus:

<pre class="ibox">
&gt; rustc main.rs -o prog
&gt; ./prog
</pre>

<p>Der erste Befehl kompiliert das Programm, wobei die erzeugte
ausführbare Datei den Namen <code>prog</code> bekommen soll.
Der zweite Befehl ruft dieses Programm aus.

<h3>Ort von rustc (Linux)</h3>

<p>Der Befehl <code>rustc</code> wird nur dann gefunden, wenn
sich die Datei <code>rustc</code> in einem Verzeichnis befindet,
welches in der Umgebungsvariable <code>PATH</code> enthalten ist.
Unter Linux kann man diese Variable so auslesen:

<pre class="ibox">
&gt; echo $PATH
</pre>

<p>Der Befehl <code>whereis</code> findet das Verzeichnis,
in welchem sich ein Programm befindet. Bei Benutzerkonto-lokaler
Installation des Compilers bekommt man:

<pre class="ibox">
&gt; whereis rustc
rustc: /home/Benutzer/.cargo/bin/rustc
</pre>

<p>Nach frischer Installation des Compilers muss man sich unter
Umständen einmal neu in das Benutzerkonto einloggen, damit das
Verzeichnis zu <code>PATH</code> hinzugefügt wird. Nach dem Login
wird automatisch die <code>.profile</code> oder
<code>.bash_profile</code> genannte Datei im Verzeichnis
<code>/home/Benutzer/</code> ausgeführt. Dieses Shell-Skript kann
das Verzeichnis durch den Befehl

<pre class="ibox">
export PATH="$HOME/.cargo/bin:$PATH"
</pre>

<p>hinzufügen. Bei globaler Installation ist dies nicht notwendig,
da sich <code>rustc</code> im Verzeichnis <code>/usr/bin/</code>
befinden wird, welches standardmäßig in <code>PATH</code> enthalten ist.

<p>Die Reihenfolge der Verzeichnisse in <code>PATH</code>
ist signifikant. Wird ein Programm in einem Verzeichnis nicht gefunden,
wird es im nächsten Verzeichnis gesucht. Somit kann es bei
Mehrfachinstallation vorkommen, dass die globale Installation durch
die lokale überschattet wird, da die lokale in <code>PATH</code>
zuerst kommt.

<h2 id="cargo">Ein Programm erstellen</h2>

<p>Anstelle des direkten Aufrufs des Compilers benutzt man eigentlich
allermeistens das komfortable Erstellungswerkzeug <i>Cargo</i>.
Eine wesentliche Aufgabe von Cargo ist die automatische Beschaffung
und Kompilierung von benötigten Bibliotheken. Daneben enthält Cargo
aber auch viele weitere Teilwerkzeuge.

<p>Zunächst sei erläutert, wie die Erstellung eines Programms
abläuft. In einem Verzeichnis öffnet man ein Terminal und führt
die folgenden Befehle aus:

<pre class="ibox">
&gt; cargo new prog0
&gt; cd prog0
</pre>

<p>Der erste Befehl erzeugt ein neues Verzeichnis <code>prog0</code>.
Die vom Compiler erzeugte ausführbare Datei wird standardmäßig
ebenfalls <code>prog0</code> heißen. Der zweite Befehl wechselt in
dieses Verzeichnis. Man findet die folgende Struktur vor:

<pre class="ibox">
prog0/
├─ src/
│  └─ main.rs
└─ Cargo.toml
</pre>

<p>Das Verzeichnis <code>src</code> enthält die Quelltexte.
Die Benennung <code>src</code> ist eine Abkürzung für
<i>source</i>, das englische Wort für <i>Quelle</i>. Zunächst
liegt dort nur die Datei <code>main.rs</code> vor, welche die
Hauptfunktion <code>main</code> enthält. Die Datei
<code>Cargo.toml</code> dient zur Eintragung von Konfigurationen,
Informationen und Abhängigkeiten.

<p>Zur Kompilierung führt man nun der Reihe nach die folgenden
Befehle aus:

<pre class="ibox">
&gt; cargo check
&gt; cargo build
&gt; cargo build --release
</pre>

<p>Der erste Befehl prüft lediglich die Korrektheit des Programms,
erstellt aber keine ausführbare Datei.
Der zweite Befehl erstellt zusätzlich die ausführbare Datei im
Debug-Modus. Mit der Option <code>--release</code> wird die
ausführbare Datei stattdessen im Release-Modus erstellt,
bei dem Optimierungen eingeschaltet sind. Wir finden nun die
folgende Verzeichnis-Struktur vor:

<pre class="ibox">
prog0/
├─ src/
│  └─ main.rs
├─ target/
│  ├─ debug/
│  └─ release/
├─ Cargo.lock
└─ Cargo.toml
</pre>

<p>Von der ausführbaren Datei gibt es zwei Varianten.
Die im Debug-Modus erstellte Datei befindet sich im
Verzeichnis <code>target/debug</code>, die im Relase-Modus
erstellte in <code>target/release</code>.

<p>Zusätzlich gibt es einen Komfort-Befehl, der das Programm nach
der Erstellung sogleich ausführt:
<pre class="ibox">
&gt; cargo run
&gt; cargo run --release
</pre>

<p>Kommandozeilen-Argumente kommen hinter einen doppelten
Strich. Betrachten wir dazu dieses Programm:

<pre class="rust ibox">
fn main() {
    let argv: Vec&lt;String&gt; = std::env::args().collect();
    println!("{:?}", argv);
}
</pre>

<p>Der Aufruf

<pre class="ibox">
&gt; cargo run -- arg1 arg2
</pre>

<p>ist dann gleichbedeutend mit:

<pre class="ibox">
&gt; cargo build
&gt; ./target/debug/prog0 arg1 arg2
</pre>

<p>Zu bemerken ist, dass sich <code>cargo</code> in allen
Unterverzeichnissen aufrufen lässt. Das Arbeitsverzeichnis des
Programms <code>prog0</code> ist hierbei das Verzeichnis, in
welchem <code>cargo</code> aufgerufen wurde.


<h2 id="Abhaengigkeiten">Abhängigkeiten</h2>

<p>Die Datei <code>Cargo.lock</code> enthält alle transitiven
Abhängigkeiten und ihre kryptografischen Hashwerte. Transitiv
bedeutet hier, dass wenn Bibliothek A von B
und B von C abhängig ist, dann auch
A von C abhängig ist. Da Bibliotheken wieder abhängig von anderen
Bibliotheken sein können, erhält man so einen
zykelfreien Graph von Abhängigkeiten.

<p>Wenn man also wissen möchte, wie viele Abhängigkeiten eine
Software tatsächlich hat, lohnt sich ein Blick in die Datei
<code>Cargo.lock</code>. Zu beachten ist aber, dass darin nur
Crates zu finden sind. Bibliotheken, die über das C-ABI
angebunden wurden, sind darin natürlich nicht enthalten.

<h2 id="Aufraeumen">Aufräumen</h2>

<p>Der von Cargo erzeugte Ordner <code>target</code> sollte nicht im Backup
gespeichert werden, zumal er sehr groß werden kann. Man führt in der
Verzeichniswurzel den Befehl
<pre class="indent">
find -name "target"
</pre>
aus, daraufhin werden alle Verzeichnisse mit <code>target</code> aufgelistet.
In diesen Verzeichnissen führt man jeweils den Befehl
<pre class="indent">
cargo clean
</pre>
aus. Das Verzeichnis <code>target</code> verschwindet dann.

<h2 id="Dokumentation">Dokumentation</h2>

<p>Mit dem Unterbefehl <code>cargo doc</code> steht ein
Werkzeug zur Verfügung, welches die Dokumentation der
Schnittstellen aus dem Quelltext extrahiert. Das erzeugte HTML
besitzt Hyperlinks und eine bequeme Suchfunktion.

<p>Zunächst wird eine neue Bibliothek <code>lib0</code> erstellt:

<pre class="ibox">
&gt; cargo new --lib lib0
</pre>

<p>Alles das gehört zur öffentlichen Schnittstelle, was mit
<code>pub</code> versehen wurde. Wir fügen in
<code>lib0/src/lib.rs</code> eine öffentliche Funktion hinzu:

<pre class="rust ibox">
/// Die identische Funktion
pub fn id(x: i32) -&gt; i32 {x}
</pre> 

<p>Der Aufruf

<pre class="ibox">
&gt; cargo doc --open
</pre>

<p>erstellt nun die Dokumentation als HTML. Die Option
<code>--open</code> öffnet die Dokumentation danach sogleich
im Browser. Die Signatur der Funktion und ihre
Dokumentations-Kommentierung sind dort einsehbar.

<p>Die Dokumentation der Standardbibliothek ist übrigens mit

<pre class="ibox">
&gt; rustup doc --std
</pre>

<p>auch offline abrufbar.


</body>
</html>

