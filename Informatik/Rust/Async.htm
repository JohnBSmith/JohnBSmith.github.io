<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Asynchrone Programmierung</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Grundlagen">Grundlagen</a>
  <ol>
  <li><a href="#Futures">Futures</a>
  <li><a href="#AsyncFn">Asynchrone Funktionen</a>
  </ol>
<li><span class="modest">Technische Umsetzung</span>
  <ol>
  <li><span class="modest">Selbstreferenzen und Anheftung</span>
  <li><span class="modest">Koroutinen</span>
  <li><span class="modest">Exekutoren</span>
  <li><span class="modest">Waker</span>
  </ol>
</ol>

<h2 id="Grundlagen">Grundlagen</h2>

<h3 id="Futures">Futures</h3>

<p>Einige Anwendungen erfordern den Umgang mit Prozeduren, die erst
nach einer gewissen Zeit abgearbeitet sind. Das kann bspw. sein

<ul>
<li>das Warten auf eine Nutzereingabe,
<li>das Warten auf die Antwort eines Clients oder Servers,
<li>eine langwierige Berechnung.
</ul>

<p>Ein recht interessantes Beispiel ist für mich
ein Funktionenplotter. Erfordert eine Funktion einen hohen
Rechenaufwand, dauert es ein wenig bis der Graph vollständig
gezeichnet ist. Würde das Programm solange warten, würde es
um so schlimmer ruckeln, je höher die Rechenzeit ist. Die Idee ist
nun, die Prozedur zu pausieren und nach neuer Abfrage von
Nutzereingabe zu entscheiden ob die Prozedur abgebrochen oder
weitergeführt werden soll.

<p>Weil diese Beispiele alle recht komplizierte Technik enthalten
können, simulieren wir so einen Ablauf zunächst am besten möglichst
einfach mit einer Prozedur, die intern nichts anderes tut als eine
bestimmte Zeit warten.

<p>Wie modelliert man solche Prozeduren nun? Eine Möglichkeit wären
Threads, die sich vor allem auch bei langwierigen Berechnungen
wie dem Funktionenplotter anbieten würden. Der Grund dafür liegt
darin, dass übermäßig lange Rechenzeit in einem Thread nicht
dazu führt, dass der Hauptthread blockiert wird.

<p>Um Threads geht es nun aber schon in einem
anderen Kapitel.

<p>Die Prozedur muss pausieren können. Demzufolge muss man die
Prozedur so oft aufrufen können, bis sie fertig ist. Den
Rückgabewert der Prozedur formulieren wir daher als eine
Enumeration <code>Poll</code> in den Varianten <code>Ready</code>
und <code>Pending</code>. Ist die Prozedur fertig, hat sie
den Wert <code>Ready</code>, andernfalls <code>Pending</code>.
Eine solche Prozedur bezeichnet man als <i>Future</i>.

<p>Nun bedarf es auch noch einer Hilfsfunktion <code>block_on</code>,
die die Prozedur solange in einer Schleife aufruft, bis sie
abgearbeitet ist. Damit der Prozessor dabei nicht heiß läuft,
fügen wir noch einen Aufruf <code>sleep</code> ein, der das
Hauptprogramm für einen Sekundenbruchteil schlafen legt.

<p>Die folgende Umsetzung gestaltet nun die bisherigen Überlegungen aus.

<pre class="rust ibox">
use std::time::{Duration, Instant};
use std::thread::sleep;

enum Poll&lt;T&gt; {Ready(T), Pending}

type Future&lt;T&gt; = Box&lt;dyn FnMut() -&gt; Poll&lt;T&gt;&gt;;

fn block_on&lt;T&gt;(mut f: Future&lt;T&gt;) -&gt; T {
    loop {
        match f() {
            Poll::Ready(x) =&gt; return x,
            Poll::Pending =&gt; {}
        }
        sleep(Duration::from_millis(100));
    }
}

fn new_task(time: u64) -&gt; Future&lt;()&gt; {
    let clock = Instant::now();
    Box::new(move || {
        if clock.elapsed().as_secs() &lt; time {
            Poll::Pending
        } else {
            Poll::Ready(())
        }
    })
}

fn main() {
    let f1 = new_task(2);
    block_on(f1);
}
</pre>

<p>Gibt es nun zwei Aufgaben zu bewältigen, die jeweils zwei Sekunden
dauern, braucht das Programm bei sequentieller Ausführung schon
vier Sekunden.
<pre class="rust ibox">
fn main() {
    let f1 = new_task(2);
    block_on(f1);
    let f2 = new_task(2);
    block_on(f2);
}
</pre>

<p>Um die beiden Aufgaben parallel ausführen zu können, schreiben
wir eine Funktion <code>join_all</code>, die eine Liste von Aufgaben
entgegennimmt und einen Scheduler zurückgibt. Der Scheduler kümmert
sich solange um die Ausführung der Aufgaben, bis alle Aufgaben erledigt
sind. Wir formulieren auch den Scheduler als Future, denn dann können
wir <code>block_on</code> wiederbenutzen.

<pre class="rust ibox">
fn join_all(a: Vec&lt;Future&lt;()&gt;&gt;) -&gt; Future&lt;()&gt; {
    let mut a: Vec&lt;_&gt; = a.into_iter().map(Some).collect();
    Box::new(move || {
        let mut empty = true;
        for x in &amp;mut a {
            if let Some(f) = x {
                empty = false;
                if let Poll::Ready(()) =  f() {*x = None;}
            }
        }
        if empty {Poll::Ready(())} else {Poll::Pending}
    })
}

fn main() {
    let f1 = new_task(2);
    let f2 = new_task(2);
    let s = join_all(vec![f1,f2]);
    block_on(s);
}
</pre>

<p>Die Funktion <code>join_all</code> ist so verallgemeinerbar,
dass sie auch die Werte der Futures zurückgeben kann.

<pre class="rust ibox">
fn join_all&lt;T: 'static&gt;(a: Vec&lt;Future&lt;T&gt;&gt;) -&gt; Future&lt;Vec&lt;T&gt;&gt; {
    enum Either&lt;X,Y&gt; {Left(X), Right(Y)}
    let mut a: Vec&lt;_&gt; = a.into_iter().map(Either::Left).collect();
    Box::new(move || {
        let mut empty = true;
        for x in &amp;mut a {
            if let Either::Left(f) = x {
                empty = false;
                if let Poll::Ready(value) = f() {
                    *x = Either::Right(value);
                }
            }
        }
        match empty {
            false =&gt; Poll::Pending,
            true =&gt; Poll::Ready(std::mem::take(&amp;mut a)
                .into_iter().map(|x| match x {
                    Either::Right(value) =&gt; value,
                    _ =&gt; unreachable!()
                }).collect()),
        }
    })
}
</pre>

<h3 id="AsyncFn">Asynchrone Funktionen</h3>

<p>Wurde bisher eine gewöhnliche Funktion zur <i>äußerlichen</i>
Darstellung des Pausierens genutzt, wollen wir das nun
eigentlich <i>innerhalb</i> der Prozedur durchführen. Dafür bedarf es
allerdings der Semantik einer Koroutine, die man nicht über gewöhnliche
Funktionen ausdrücken kann. Eine Koroutine ist eine Prozedur, die
mit <code>yield</code> an einer Stelle im Ablauf unterbrochen wird
und sich später an dieser Stelle fortführen lässt.

<p>Asynchrone Funktionen bieten eine Abwandlung des Konzeptes einer
Koroutine. Anstelle von <code>yield</code> gibt es bei einer
asynchronen Funktion eine Anweisung <code>await</code>, die die
Fortführung des Programmablaufs der Funktion solange unterbricht, bis
vom Argument von <code>await</code> ein Wert erhalten wurde.

<p>Ab nun erforderlich ist die Einbindung der Bibliotheken
›<a href="https://crates.io/crates/futures">futures</a>‹ und
›<a href="https://crates.io/crates/async-std">async-std</a>‹.

<pre class="rust ibox">
use std::time::Duration;
use async_std::task;
use futures::{future::join_all, executor::block_on};

async fn new_task(time: u64) {
    task::sleep(Duration::from_secs(time)).await;
}

fn main() {
    let f1 = new_task(2);
    let f2 = new_task(2);
    block_on(join_all(vec![f1,f2]));
}
</pre>

<p>Eine asynchrone Funktion ist äquivalent zu einer gewöhnlichen
Funktion, die ein Future als asynchronen Closure-Block zurückgibt.
Außerdem ist das Argument von <code>await</code> selbst ein
Future.

<pre class="rust ibox">
use std::future::Future;

fn new_task(time: u64) -> impl Future&lt;Output=()&gt; {
    async move{task::sleep(Duration::from_secs(time)).await;}
}
</pre>

<p>Die Funktion <code>join_all</code> ist leider mit zwei Problemen
behaftet. Zum einen kommt dort mit der Erzeugung von
<code>vec![f1,f2]</code> offenbar eine unnötige Heap-Allokation vor.
Zum anderen müssen die Rückgabewerte von <code>f1</code> und
<code>f2</code> den gleichen Datentyp besitzen. Aus diesen Gründen gibt
es noch die Funktion <code>join</code>.

<pre class="rust ibox">
use std::time::Duration;
use async_std::task;
use futures::{future::join, executor::block_on};

struct S1 {value: &amp;'static str}
struct S2 {value: &amp;'static str}

async fn task1(time: u64) -&gt; S1 {
    task::sleep(Duration::from_secs(time)).await;
    S1{value: "Wert 1"}
}

async fn task2(time: u64) -&gt; S2 {
    task::sleep(Duration::from_secs(time)).await;
    S2{value: "Wert 2"}
}

fn main() {
    let f1 = task1(2);
    let f2 = task2(2);
    let (s1, s2) = block_on(join(f1,f2));
    println!("{}, {}", s1.value, s2.value);
}
</pre>

<p>Analog gibt es <code>join3</code>, <code>join4</code>,
<code>join5</code> und das variadische Makro <code>join</code>,
das auch mehr als fünf Futures verbinden kann.
Beim Makro muss man

<pre class="rust indent">
block_on(async{join!(f1,f2)})
</pre>

<p>schreiben.


</body>
</html>

