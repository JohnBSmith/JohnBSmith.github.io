<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="main.css" rel="stylesheet">
  <script src="rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Eingaben und Ausgaben</h1>
<h2 id="toc">Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Stdio">Die Standard-Ströme</a>
  <ol>
  <li><a href="#Standard-Ausgabe">Standard-Ausgabe</a>
  <li><span class="modest">Standard-Fehlerausgabe</span>
  <li><span class="modest">Standard-Eingabe</span>
  <li><span class="modest">Pipelines</span>
  </ol>
<li><span class="modest">Dateien</a>
  <ol>
  <li><span class="modest">Dateien lesen</span>
  <li><span class="modest">Dateien schreiben</span>
  <li><span class="modest">Binärdaten</span>
  <li><span class="modest">Datenströme</span>
  </ol>
</ol>

<h2 id="Stdio">Die Standard-Ströme</h2>

<h3 id="Standard-Ausgabe">Standard-Ausgabe</h3>

<p>Die Standard-Ausgabe <code>stdout</code> lässt sich auf mehrere
Arten ansprechen. Zunächst kann man einfach <code>println</code>
benutzen.

<pre class="rust indent">
fn main() {
    println!("{}","Ausgabe");
}
</pre>

<p>Man kann die Standard-Ausgabe auf Linux aber auch manuell als
Geräte-Datei öffnen:

<pre class="rust indent">
use std::{io,io::Write,fs::File};

fn main() -> Result&lt;(),io::Error&gt; {
    let mut stdout = File::create("/dev/stdout")?;
    stdout.write_all("Ausgabe".as_bytes())?;
    return Ok(());
}
</pre>

<p>Das ist aber nicht empfehlenswert, da das Verzeichnis
<code>/dev/stdout</code> nur in Unix-artigen Betriebssystemen
existiert, das Programm also weniger portabel wird. Aus diesem
Grund steht die Funktion <code>io::stdout</code> zur Verfügung:

<pre class="rust indent">
use std::{io,io::Write};

fn main() -> Result&lt;(),io::Error&gt; {
    let mut stdout = io::stdout();
    stdout.write_all("Ausgabe".as_bytes())?;
    return Ok(());
}
</pre>

</body>
</html>

