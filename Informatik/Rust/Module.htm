<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Module</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Module">Module</a>
<li><a href="#Bibliotheken">Bibliotheken</a>
<li><a href="#Konstanten">Konstanten</a>
</ol>

<h2 id="Module">Module</h2>

<p>Größere Programme werden durch Strukturierung leichter verständlich.
Auf der untersten Ebene benutzt man dazu Kontrollstrukturen anstelle
von Sprunganweisungen. Dann kommen Funktionen, die Vorgänge
abstrahieren und über ihre Argumente und Rückgabewerte
Schnittstellen liefern. Auf der nächsten Ebene bündelt man
zusammengehörige Funktionen und Datentypen in Module. Schnittstellen
entstehen hierbei, indem man bestimmte Funktionen und Datentypen als
öffentlich kennzeichnet.

<p>Ein Modul wird mit dem Schlüsselwort <code>mod</code> eingeleitet.
Der Inhalt des Moduls befindet sich entweder in geschweiften Klammern,
oder bei längeren Modulen in einer extra Datei. Funktionen, Datentypen,
Konstanten und Variablen sind nur dann öffentlich, wenn sie mit
dem Schlüsselwort <code>pub</code> markiert wurden.

<p>Die Grundstruktur von Modulen sei hier am Primzahltest verdeutlicht:
<pre class="rust ibox">
mod number_theory {
    pub fn is_prime(n: u64) -&gt; bool {
        for k in 2..n {
            if n%k == 0 {return false;}
        }
        true
    }
}

use number_theory::is_prime;

fn main() {
    let a: Vec&lt;u64&gt; = (1..).filter(|n| is_prime(*n))
        .take(10).collect();
    println!("{:?}", a);
}
</pre>

<p>Die <code>use</code>-Anweisung macht lediglich deutlich,
welchem Modul die Funktion <code>is_prime</code> entstammen soll.
Es könnte ja mehrere Module mit einer so benannten Funktion geben.
Zudem gibt die <code>use</code>-Anweisung darüber Aufschluss,
welche Abhängigkeiten ein Modul besitzt.

<h2 id="Bibliotheken">Bibliotheken</h2>
<p>Auf der nächsthöheren Ebene kann man auch wieder zusammengehörige
Module bündeln. Man spricht dann von einer Bibliothek, die in
Rust kurz als Crate bezeichnet wird.


<h2 id="Konstanten">Konstanten</h2>

<p>Das folgende Programm arbeitet zwar korrekt, ist jedoch in
schlechtem Stil geschrieben. 

<pre class="rust ibox">
fn is_ascii_alphabetic(c: char) -&gt; bool {
    let x = u32::from(c);
    65&lt;=x &amp;&amp; x&lt;=90 || 97&lt;=x &amp;&amp; x&lt;=122
}

fn main() {
    let a: Vec&lt;&amp;str&gt; = "Ein Schiff taucht im Nebel auf."
        .split(|x| !is_ascii_alphabetic(x)).collect();
    println!("{:?}", a);
}
</pre>

<p>Im Programm tauchen »magische« Konstanten mit irgendeiner
bestimmten Bedeutung auf, diese ist jedoch nicht
klar erkennbar. Der Leser muss sich die Bedeutung der Konstanten
erst erschließen. Hier mag das wohl einfach sein, bei komplizierten
Programmen steht man da aber schnell im Regen. Ganz kritisch ist
die Situation wo dieselbe Konstante mehrmals im Programm vorkommt.
Würde jemand die Konstante an einer Stelle zur Anpassung verändern,
blieben die anderen Stellen wahrscheinlich übersehen, es kommt zu
einem logischen Fehler.

<p>Für besseres Verständnis, Abstraktion und Faktorisierung lassen
sich globale oder auch lokale Konstanten mit dem Schlüsselwort
<code>const</code> definieren. Konstanten in einem Modul sind privat.
Öffentlich sind sie nur dann, wenn sie mit <code>pub</code> markiert
wurden. Das verbesserte Programm ist hoffentlich angenehmer zu lesen:

<pre class="rust ibox">
mod charsets {
    const A: u32 = 'a' as u32;
    const Z: u32 = 'z' as u32;
    const CAPA: u32 = 'A' as u32;
    const CAPZ: u32 = 'Z' as u32;

    pub fn is_ascii_alphabetic(c: char) -&gt; bool {
        let x = u32::from(c);
        CAPA&lt;=x &amp;&amp; x&lt;=CAPZ || A&lt;=x &amp;&amp; x&lt;=Z
    }
}

use charsets::is_ascii_alphabetic;

fn main() {
    let a: Vec&lt;&amp;str&gt; = "Ein Schiff taucht im Nebel auf."
        .split(|x| !is_ascii_alphabetic(x)).collect();
    println!("{:?}", a);
}
</pre>

<p>Unter normalen Umständen werden Konstanten in großen Buchstaben
geschrieben, das wird auch vom Compiler überprüft. Empfindet man
das in bestimmten Situation zu unschön, lässt es sich auch
ausschalten. Man muss dafür die Zeile
<pre class="rust ibox">
#[allow(non_upper_case_globals)]
</pre>
<p>vor die Definition der Konstante schreiben, oder wenn es dutzende
solche Konstanten gibt,
<pre class="rust ibox">
#![allow(non_upper_case_globals)]
</pre>
<p>am Anfang des Moduls.

<p>Konstante Zeichenketten werden normalerweise mit dem Schlüsselwort
<code>static</code> definiert, nicht mit <code>const</code>:

<pre class="rust ibox">
static TEXT: &amp;str = "Ein Schiff taucht im Nebel auf.";
</pre>

<p>Anders als <code>const</code> erlaubt <code>static</code> auch
globale Variablen. Man sollte diese so gut es geht vermeiden, das
heißt aber nicht dass sie unmöglich sind:

<pre class="rust ibox">
static mut X: u32 = 0;

fn main() {
    println!("{}", unsafe {X});
    unsafe {X = 1;}
    println!("{}", unsafe {X});
}
</pre>

<p>Der Grund für die Notwendigkeit von <code>unsafe</code> liegt
darin begründet, dass veränderliche globale Variablen nicht
Thread-sicher sind. Zwar arbeitet das Programm hier nicht
nebenläufig, jedoch würde uns nichts davon abhalten, mehrere
Threads zu starten. Man müsste die Variable dann Thread-lokal machen.
Ich will darauf an dieser Stelle nicht weiter eingehen.

</body>
</html>
