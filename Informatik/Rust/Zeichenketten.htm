<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Zeichenketten</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Zeichen">Zeichen</a>
<li><a href="#Literale">Zeichenkettenliterale</a>
<li><a href="#Zeichenketten">Zeichenketten</a>
<li><a href="#Puffer">Puffer</a>
<li><a href="#Formatierung">Formatierung mit Schablonen</a>
<li><a href="#Unicode">Unicode und UTF-8</a>
<li><a href="#Laenge">Länge von Zeichenketten</a>
<li><a href="#Komplexität">Eine gewisse Komplexität</a>
</ol>

<h2 id="Zeichen">Zeichen</h2>

<p>Der Darstellung von Zeichen dient der Typ <code>char</code>,
&ndash; im Prinzip nicht viel mehr als eine u32-Zahl zur Kodierung von
Unicode-Zeichen. Aufgrund der strengen Typisierung wird allerdings
ein Unterschied zwischen Zeichen und Zahlen gemacht.

<p>Genau genommen muss erst einmal erklärt sein, was man unter
»Unicode-Zeichen« genau versteht. In Unicode bekommen Zeichen und
andere semantische Informationseinheiten einen numerischen Wert
zugewiesen wie schon bei ASCII. Dieser numerische Wert wird
<i>code point</i> genannt, der Bereich reicht von
&ge;0 bis &le;0x10FFFF. Als kleine technische Komplikation kommt
allerdings noch hinzu, dass darin verbotene Surrogate-Werte enthalten
sind. Glücklicherweise sind die beiden Bereiche der Surrogate-Werte
wenigstens jeweils zusammenhängend. Schließt man diese Surrogate-Werte
aus, spricht man nun von einem <i>unicode scalar value</i>. Und genau
dies speichert <code>char</code>.

<p>Eine Kette von solchen Skalarwerten muss nun auch
irgendwie physisch auf einem Datenträger dargestellt sein. Die
Darstellung als Abfolge von u32-Zahlen bezeichnet man als
UTF-32-Kodierung.

<p>Nehmen wir das bisher gesagte ernst, ist eine Umwandlung eines
Zeichens in eine u32-Zahl immer durchführbar:
<pre class="rust ibox">
let x = u32::from('a');
</pre>

<p>Speziell für <code>u8</code> ist die umgekehrte Umwandlung noch
allgemeingültig:
<pre class="rust ibox">
let x: u8 = 97;
let c = char::from(x);
</pre>

<p>Die Umwandlung einer u32-Zahl in ein Zeichen ist aber offenbar
nicht immer möglich, was es zu berücksichtigen gilt:
<pre class="rust ibox">
use std::convert::TryFrom;

let x: u32 = 97;
let c = match char::try_from(x) {
    Ok(value) =&gt; value,
    _ =&gt; unreachable!()
};
</pre>

<p>Will man sich an fehlerhaften Eingaben nicht weiter stören,
lassen sich diese auch mit einem Ersatzzeichen ignorieren:
<pre class="rust ibox">
let c = char::try_from(x).unwrap_or('?');
</pre>

<p>Werden die Zeichen wieder auf irgendeine Art der Ausgabe zugeführt,
sollte man allerdings als Ersatzzeichen eines wählen, welches nicht
in der normalen Ausgabe vorkommt. Dies bringt den Vorteil, dass man
dann Dateien mit einem Suchprogramm wie <code>grep</code> nach diesem
Zeichen durchsuchen kann. In Unicode ist für diesen Zweck das Zeichen
<code>'&#xfffd;'</code> mit Wert U+FFFD vorgesehen, das auch als
Konstante  <code>std::char::REPLACEMENT_CHARACTER</code> verfügbar ist.
Eventuell möchte man einen solchen Fehler auch zumindest aufzeichnen,
damit dieser nicht unbemerkt bleibt. Das Programm gestaltet sich
dann so:

<pre class="rust ibox">
fn log_error(file: &amp;str, line: u32, text: String) {
    eprintln!("Fehler in {}:{}:\n{}", file, line, text);
}    

let c = char::try_from(x).unwrap_or_else(|e| {
    log_error(file!(), line!(), e.to_string());
    std::char::REPLACEMENT_CHARACTER
});
</pre>

<h2 id="Literale">Zeichenkettenliterale</h2>

<p>Literale dienen der Angabe von Zeichenketten im Quelltext.
Im einfachsten Fall steht die Zeichenkette in Anführungszeichen
in einer Zeile:
<pre class="rust ibox">
let s = "Die Ordnung der Dinge";
</pre>

<p>Längere Zeichenketten passen ja nun nicht mehr in eine Zeile.
Ein Zeilenumbruch im Literal ist gestattet, jedoch erzeugt dieser
auch einen Zeilenumbruch in der Zeichenkette. Um dies zu verhindern,
schreibt man einen Backslash an das Ende der Zeile, dann wird
jeglicher Freiraum bis zum nächsten Zeichen aufgefressen.
Ein äquivalente Angabe der vorherigen Zeichenkette ist demnach:

<pre class="rust ibox">
let s = "Die Ordnung \
         der Dinge";
</pre>

<p>Wenn die Zeichenkette tatsächlich auch einen Umbruch enthalten soll,
dann könnte man einfach schreiben:

<pre class="rust ibox">
let s = "Die Ordnung
der Dinge";
</pre>

<p>Das ist jedoch etwas unästhetisch, man schreibt besser:

<pre class="rust ibox">
let s = "Die Ordnung\n\
         der Dinge";
</pre>

<p>Folgende Escape-Sequenzen sind in einem Literal erlaubt.

<table class="bt indent">
<tr><th>Sequenz <th>Bedeutung
<tr><td><code>\n</code> <td>Zeilenumbruch
<tr><td><code>\r</code> <td>Wagenrücklauf
<tr><td><code>\t</code> <td>Tabulator
<tr><td><code>\\</code> <td>Backslash
<tr><td><code>\'</code> <td>einfaches Anführungszeichen
<tr><td><code>\"</code> <td>doppeltes Anführungszeichen
<tr><td><code>\u{221e}</code> <td>Unicode-Zeichen 0x221e
<tr><td><code>\0</code> <td>Kurzschreibweise für <code>\u{0}</code>
<tr><td><code>\x61</code> <td>Kurzschreibweise für <code>\u{61}</code>
</table>

<p>Dann gibt es noch die rohen Literale, bei denen
keine Escape-Sequenzen vorkommen. Diese dürfen daher auch
den Backslash enthalten:

<pre class="rust ibox">
let s = "\\sin(\\varphi)";
let s = r"\sin(\varphi)";
</pre>

<p>Umringt man die Anführungszeichen mit Rautezeichen,
dürfen doppelte Anführungszeichen auch im Literal vorkommen:

<pre class="ibox">
<span class='keyword'>let</span> s = r<span class='string'>#"&lt;span class="a"&gt;"#</span>;
</pre>

<p>Wenn man die Anführungszeichen mit <code>##</code>
umringt, darf auch <code>"#</code> im Literal vorkommen,
bei <code>###</code> entsprechend <code>"##</code> usw.

<pre class="ibox">
<span class='keyword'>let</span> s = r<span class='string'>##"&lt;a href="#id"&gt;"##</span>;
</pre>

<h2 id="Zeichenketten">Zeichenketten</h2>
<p>Zur Vereinfachung beschränken wir uns zunächst auf die
ASCII-Kodierung, dann gehört anders als bei UTF-8 zu jedem Zeichen
genau eine Speicherzelle. Wie wir eine Zeichenkette im Speicher
gestalten, ist nun ganz klar, das muss ein Array von Bytes sein.

<p>Zur genauen Darstellung gibt es mehrere Möglichkeiten. Zunächst
wäre die Festlegung einer festen Länge denkbar, also ein Typ
<code>&amp;[u8;N]</code>. Für bestimmte Optimierungen, etwa bei einem
Array von kurzen Zeichenketten, kann das vorteilhaft sein, für allgemeine
Aufgaben ist es jedoch zu unflexibel. Historisch gab und gibt es
dann noch die Möglichkeit, das Ende der Kette durch ein
Terminalzeichen zu markieren, dafür wird das Zeichen mit dem
Wert null benutzt. Allerdings ist dies problematisch, da die Länge
dann nicht effizient ermittelbar ist. Zudem hat dies im Zusammenspiel
mit mangelnder Typsicherheit in der Vergangenheit oft
zu Sicherheitslücken geführt. Übrig bleibt die Möglichkeit,
Byteketten über Zeiger und Länge anzusprechen, also als
<code>&amp;[u8]</code>. Das kann man tatsächlich direkt so
hinschreiben:

<pre class="rust ibox">
let a: &amp;[u8] = &amp;[b'E', b'u', b'l', b'e']; 
println!("{:?}", a);
</pre>

<p>Die Ausgabe ist hier nicht die Zeichenkette, sondern
das Array von Zahlenwerten der Zeichen in ASCII.
Die Literale können wir auch kompakter notieren:

<pre class="rust ibox">
let a: &amp;[u8] = b"Eule"; 
</pre>

<table>
<tr>
<td><img src="img/Eule.png">
<td style="padding-left: 1em">Bild: Struktur einer Zeichenkette.
</table>

<p>Der neue Datentyp <code>&amp;str</code> sorgt nun bei
Beibehaltung der Darstellung <code>&amp;[u8]</code> dafür,
dass dem Array die Bedeutung einer Zeichenkette zukommt:

<pre class="rust ibox">
let s: &amp;str = "Eule"; 
println!("{}", s);
</pre>

<p>Somit ist jede Zeichenkette als Bytearray betrachtbar:
<pre class="rust ibox">
let s: &amp;str = "Eule";
let a: &amp;[u8] = s.as_bytes();
</pre>

<p>Jedoch ist nicht jedes Bytearray eine gültige Zeichenkette:
<pre class="rust ibox">
let a: &amp;[u8] = b"Eule";
let s: &amp;str = std::str::from_utf8(a).unwrap();
</pre>

<p>Nebenbei bemerkt handelt es sich bei <code>b"Eule"</code> eigentlich
um eine Referenz auf ein Feld und nicht bloß um einen Auschnitt.
So darf man

<pre class="rust ibox">
let a: [u8; 4] = *b"Eule";
</pre>

<p>schreiben, jedoch ist

<pre class="rust ibox">
let a: [u8; 4] = *"Eule".as_bytes();
</pre>

<p>kein gangbarer Weg. Man kann in diesem Fall stattdessen
<code>try_into</code> heranziehen:

<pre class="rust ibox">
let a: [u8; 4] = "Eule".as_bytes().try_into().unwrap();
</pre>

<p>Manchmal ist die genaue Kodierung unbekannt. Weil die meisten
Kodierungen auf ASCII aufbauen, ist es in diesem Fall ggf. pragmatisch,
die Werte außerhalb ASCII zunächst durch eine Ersetzung darzustellen.
Nützlich ist das außerdem für die Untersuchung von Binärdaten, die
eingebettete Zeichenketten enthalten.

<pre class="rust ibox">
fn decode_ascii(a: &amp;[u8]) -&gt; String {
    let mut acc = String::new();
    for &amp;x in a {
        acc.push(if x.is_ascii() {char::from(x)} else {'?'});
    }
    acc
}
</pre>

<p>Eine etwas informativere Abwandlung:
<pre class="rust ibox">
fn decode_ascii(a: &amp;[u8]) -&gt; String {
    use std::fmt::Write;
    let mut acc = String::new();
    for &amp;x in a {
        if x.is_ascii_graphic() || x == b' ' || x == b'\n' {
            acc.push(char::from(x));
        } else {
            let _ = write!(acc, "[{:02x}]", x);
        }
    }
    acc
}
</pre>

<p>Alternativ kann man auch einen sogenannten Wrapper-Typ
formulieren und für diesen <code>Display</code> implementieren.
Zudem ist in der Standardbibliothek eine Funktion
<code>escape_default</code> enthalten, die Zeichen außerhalb
des druckbaren Bereichs gegen Escape-Sequenzen ersetzt.

<pre class="rust ibox">
struct Text&lt;'a&gt;(&amp;'a [u8]);

impl std::fmt::Display for Text&lt;'_&gt; {
    fn fmt(&amp;self, f: &amp;mut std::fmt::Formatter) -&gt; std::fmt::Result {
        for x in self.0 {
            write!(f, "{}", std::ascii::escape_default(*x))?;
        }
        Ok(())
    }
}

fn decode_ascii(a: &amp;[u8]) -&gt; String {
    format!("{}", Text(a))
}
</pre>


<h2 id="Puffer">Puffer</h2>

<p>So wie Arrays über Slices vom Typ <code>&amp;[u8]</code> angesprochen
werden oder als <code>Vec&lt;u8&gt;</code> bezüglich ihrer Länge
dynamisch sind, gibt es eine Unterscheidung zwischen
Zeichenketten-Slices vom Typ <code>&amp;str</code> und Zeichenketten
vom Typ <code>String</code>.

<p>Zeichenketten vom Typ <code>String</code> sind in Rust dynamisch
und lassen sich als Akkumulator benutzen. Ein Akkumulator oder
akkumulierender Puffer ist eine dynamische Zeichenkette, an die
beliebig viele Zeichenketten angehängt werden können.

<pre class="rust ibox">
fn main() {
    let mut acc = "".to_string();
    acc += "Die";
    acc += " Ordnung";
    acc += " der";
    acc += " Dinge";
    println!("{}", acc);
}
</pre>

<p>Es folgt ein Beispiel wo ein Akkumulator mit zwei dynamischen Ketten
gefüttert wird.
<pre class="rust ibox">
fn main() {
    let s1 = "Text1\n".to_string();
    let s2 = "Text2\n".to_string();

    let mut acc = "".to_string();
    acc += &amp;s1;
    acc += &amp;s2;
    println!("{}", acc);
}
</pre>

<p>Die Borrows sind notwendig, weil <code>s1</code> und <code>s2</code>
bei diesen Operationen nicht ihren Besitz verlieren.

<p>Die Ketten können auch von Unterprogrammen erzeugt worden sein.
<pre class="rust ibox">
fn p1() -> String {
    "Text1\n".to_string()
}

fn p2() -> String {
    "Text2\n".to_string()
}

fn main() {
    let mut acc = "".to_string();
    acc += &amp;p1();
    acc += &amp;p2();
    println!("{}", acc);
}
</pre>

<h2 id="Formatierung">Formatierung mit Schablonen</h2>

<h3>Mit Schablonen geht es am kürzesten</h3>
<p>Ein Paar von Zahlen in eine Zeichenkette umwandeln ließe
sich so bewerkstelligen:
<pre class="rust ibox">
fn pair_to_string(x: i32, y: i32) -&gt; String {
    let mut acc = String::new();
    acc.push_str("(");
    acc.push_str(&amp;x.to_string());
    acc.push_str(", ");
    acc.push_str(&amp;y.to_string());
    acc.push_str(")");
    acc
}

fn main() {
    println!("{}", pair_to_string(1, 2));
}
</pre>

<p>Etwas weniger umständlich geht es auch so:
<pre class="rust ibox">
fn pair_to_string(x: i32, y: i32) -&gt; String {
    ["(", &amp;x.to_string(), ", ", &amp;y.to_string(), ")"].join("")
}
</pre>

<p>Formatierung mit Schablonen bietet aber eine kurze und prägnante
Formulierung dieser Funktion:
<pre class="rust ibox">
fn pair_to_string(x: i32, y: i32) -&gt; String {
    format!("({}, {})", x, y)
}
</pre>

<p>Das Makro <code>format</code> setzt Argumente in eine Schablone
ein. Die Paare von geschweiften Klammern werden durch die Argumente
ersetzt und die dadurch entstandene Zeichenkette zurückgegeben.
Das kennen wir schon vom Makro <code>println</code>, mit dem einzigen
Unterschied, dass die Zeichenkette dort in der Konsole ausgegeben
wird.

<h3>Formatierung von Ganzzahlen</h3>
<p>Die Platzhalter für die Darstellung von Zahlen im Binärsystem,
Oktalsystem und Hexadezimalsystem sind
<code>{:b}</code>, <code>{:o}</code>, <code>{:x}</code>.
<pre class="rust ibox">
fn bin(n: u32) -&gt; String {format!("0b{:b}", n)}
fn oct(n: u32) -&gt; String {format!("0o{:o}", n)}
fn hex(n: u32) -&gt; String {format!("0x{:x}", n)}
</pre>

<p>Neben <code>{:x}</code> gibt es auch noch die Formatierung
<code>{:X}</code>, deren Unterschied in der Benutzung von
Großbuchstaben besteht.

<h3>Ausrichtung</h3>
<p>Man kann Text in Freiraum ausrichten. Beispiele für 10 Zeichen
Freiraum:
<pre class="rust ibox">
println!("|{:10}|", "Text");  // Text linksbündig ausrichten
println!("|{:&lt;10}|", "Text"); // Text linksbündig ausrichten
println!("|{:&gt;10}|", "Text"); // Text rechtsbündig ausrichten
println!("|{:^10}|", "Text"); // Text zentriert ausrichten

println!("|{:.&lt;10}|", "Text"); // Punkte anstelle von Leerzeichen
println!("|{:.&gt;10}|", "Text"); // Punkte anstelle von Leerzeichen
println!("|{:.^10}|", "Text"); // Punkte anstelle von Leerzeichen

println!("|{:10}|", 360);  // Zahl rechtsbündig ausrichten
println!("|{:&lt;10}|", 360); // Zahl linksbündig ausrichten
println!("|{:&gt;10}|", 360); // Zahl rechtsbündig ausrichten

println!("|{:010}|", 360); // Zahl mit führenden Nullen
println!("|{:010}|", -360); // Klappt auch für negative Zahlen
</pre>

<p>Man beachte: Die Standard-Ausrichtung von Text ist linksbündig,
die von Zahlen jedoch rechtsbündig. Das ist natürlich dem Umstand
geschuldet, dass wir Zahlen im Dezimalsystem in »Big-Endian«
aufschreiben.

<h3>Formatierung von Arrays</h3>

<p>Bekommt die Formatierungsangabe im Platzhalter ein Fragezeichen
hinzugestellt, drückt dies die Debug-Formatierung aus, die
auch Arrays erlaubt. Zusätzliche Voranstellung eines Raute-Zeichens
bewirkt darüber hinaus eine Darstellung in Langform, bei der
Verschachtelungen eingerückt werden.

<pre class="rust ibox">
println!("{:?}", [1, 2, 3, 4]);
println!("{:#?}", [1, 2, 3, 4]); // Zahlen untereinander
println!("{:?}", [[1, 2], [3, 4]]); // Arrays von Arrays
println!("{:#?}", [[1, 2], [3, 4]]); // Verschachtelung eingrückt
</pre>

<p>Byte-Arrays kann man dezimal oder auch hexadezimal darstellen.

<pre class="rust ibox">
println!("{:?}", b"Eule");    // Byte-Array, dezimal
println!("{:02x?}", b"Eule"); // Byte-Array, hexadezimal
</pre>

<h2 id="Unicode">Unicode und UTF-8</h2>

<p>Die Standardbibliothek besitzt Funktionen zum Kodieren und
Dekodieren von UTF-8.

<p>Aus didaktischen Gründen wollen wir zunächst einmal selbst einen
Dekodierer für UTF-8 schreiben. Im UTF-8 sind Bytes kleiner als 128
einfache ASCII-Zeichen. Trifft man auf ein Byte &ge;128, gibt es
folgende drei Möglichkeiten:
<pre class="indent">
0b110xxxxx 0b10xxxxxx
0b1110xxxx 0b10xxxxxx 0b10xxxxxx
0b11110xxx 0b10xxxxxx 0b10xxxxxx 0b10xxxxxx
</pre>
<p>Die Anzahl der 1-Bits vor dem 0-Bit im Startbyte ist die Anzahl
<var>n</var> der Bytes. Die Bytesequenz besteht aus einem
Startbyte und <var>n</var>&minus;1 Folgebytes.

<p>Das folgende Programm kann korrektes UTF-8 in ein Array
von Unicode-Zeichen dekodieren. Es wird auch niemals fehlschlagen,
da <code>&amp;str</code> nur korrektes UTF-8 enthalten darf.
<pre class="rust ibox">
use std::convert::TryFrom;

fn multibyte_count(byte: u8) -&gt; u32 {
    let mut count = 0;
    for k in (0..7).rev() {
        if (1&lt;&lt;k)&amp;byte == 0 {break;} else {count += 1;}
    }
    count
}

fn chars_from_utf8(s: &amp;str) -&gt; Vec&lt;char&gt; {
    let mut acc: Vec&lt;char&gt; = Vec::new();
    let mut count = 0;
    let mut c: u32 = 0;
    for byte in s.bytes() {
        if byte&lt;128 {
            acc.push(char::from(byte));
        } else if count == 0 {
            count = multibyte_count(byte);
            c = u32::from(byte &amp; match count {
                1 =&gt; 0b00011111,
                2 =&gt; 0b00001111,
                3 =&gt; 0b00000111,
                _ =&gt; unreachable!()
            });
        } else {
            c = (c&lt;&lt;6) | u32::from(byte&amp;0b00111111);
            count -= 1;
            if count == 0 {
                acc.push(char::try_from(c).unwrap());
            }
        }
    }
    acc
}

fn main() {
    println!("{:?}", chars_from_utf8("Café äöü ∀∃"));
}
</pre>

<p>Die Standardbibliothek enthält diese Funktionalität
natürlich bereits:
<pre class="rust ibox">
fn main() {
    let a: Vec&lt;char&gt; = "Café äöü ∀∃".chars().collect();
    println!("{:?}", a);
}
</pre>

<p>Bei der Umwandlung von <code>&amp;[u8]</code> in
<code>&amp;str</code> sind Prüfungen notwendig. Hierfür steht
<code>from_utf8</code> zur Verfügung:

<pre class="rust ibox">
let a: &amp;[u8] = &amp;[97, 98, 99, 100, 128];
let s = std::str::from_utf8(a)?;
</pre>

<p>Zusätzlich gibt es eine Funktion <code>from_utf8_lossy</code>,
die fehlerhaftes UTF-8 gegen das Ersatzzeichen
<code>std::char::REPLACEMENT_CHARACTER</code> mit dem Wert U+FFFD
ersetzt.

<pre class="rust ibox">
use std::borrow::Cow;

fn log_error(file: &amp;str, line: u32, text: &amp;str) {
    eprintln!("{} bei {}:{}.", text, file, line);
}

fn from_utf8_lossy(a: &amp;[u8]) -&gt; Cow&lt;str&gt; {
    let s = String::from_utf8_lossy(a);
    if let Cow::Owned(_) = s {
        log_error(file!(), line!(), "Fehlerhaftes UTF-8 detektiert");
    }
    return s;
}

fn main() {
    let a: &amp;[u8] = &amp;[97, 98, 99, 100, 128];
    let s = from_utf8_lossy(a);
    println!("{}", s);
}
</pre>

<h2 id="Laenge">Länge von Zeichenketten</h2>

<p>Die Länge einer Zeichenkette <code>s</code> bekommt man
mit dem Methodenaufruf <code>s.len()</code>. Hierbei handelt es
sich allerdings nicht um die Anzahl der Zeichen, sondern um die
Anzahl der Bytes. Dieser Umstand wird dadurch verschleiert, dass
die Diskrepanz bei der Untermenge ASCII noch nicht auftritt, erst
bei den UTF-8-Multibyte-Sequenzen. Bspw. gilt

<pre class="rust ibox">
"Wüste".len() == 6.
</pre>

<p>Zur Zählung der Zeichen muss die Kette zwangsläufig durchgegangen
werden, was aufwändig ist. Man schreibt hierfür
<code>s.chars().count()</code>. Das liefert

<pre class="rust ibox">
"Wüste".chars().count() == 5.
</pre>

<p>Eigentlich handelt es sich herbei allerdings um eine Zählung
der Unicode-Skalarwerte. Die wissenschaftliche Bezeichnung für ein
Zeichen lautet <i>Graphem</i>. In Unicode sind einige Grapheme als
Zusammensetzung aus Skalarwerten darstellbar, was die Zählung weiter
verkompliziert. Bei den Umlauten gehört zu jedem Graphem genau
ein Skalarwert, aber auch nur dann, wenn die Zeichenkette
<i>normalisiert</i> wurde. Bei einer nicht normalisierten Kette
kann man 0x00fc (ü) auch zusammensetzen aus 0x0075 (u) und
0x0308 (Combining diaeresis). Genau genommen gibt es eine
Unterscheidung zwischen Trema (Diärese) und Umlaut, aber Unicode
kodiert diesen Unterschied nicht.

<pre class="rust ibox">
let s = "Wu\u{0308}ste";
println!("{}, len = {}, count = {}", s, s.len(), s.chars().count());
</pre>

<p>Die Ausgabe ist:
<pre class="ibox">
Wüste, len = 7, count = 6
</pre>

<p>Technisch wird diese Zusammensetzung aus Skalarwerten
als <i>Graphemkluster</i> oder <i>Graphemhaufen</i> bezeichnet. Manche
Grapheme können in Unicode also als Graphemkluster dargestellt sein,
so die Sprechweise.

<p>Zur allgemeinen Bestimmung der Anzahl der Grapheme bedarf es
letztendlich einer Funktion, die eine Zeichenkette in Graphemkluster
zerlegt &ndash; man spricht von einer <i>Segmentierung</i> der Kette.
Solche Funktionen sind in der Standardbibliothek nicht enthalten.
Sicherlich braucht auch nicht jedes Programm diese Komplexität.
Wichtig wird das erst für die fortgeschrittene Verarbeitung und
Darstellung von Texten.

<h2 id="Komplexität">Eine gewisse Komplexität</h3>

<p>An dieser Stelle muss einmal gesagt werden dass Rust eine
Programmiersprache mit einer gewissen Komplexität ist. Der Zeitpunkt
ist günstig, dies einfach mal an den Datentypen für Zeichenketten zu
verdeutlichen. In einer einfachen Programmiersprache gibt es einen
Datentyp für Zeichenketten, in Rust kann man sie streng genommen nicht
mehr an der Hand abzählen. Das klingt jetzt zunächst abschreckend,
wäre da nicht das Prinzip der Orthogonalität.

<table class="bt">
<tr>
<th>Typ
<th>Erklärung
<tr>
<td><code>&amp;'static str</code>
<td>unveränderbare UTF-8-Kette, statisch in der Binärdatei
<tr>
<td><code>&amp;'a str</code>
<td>unveränderbare UTF-8-Kette mit Lebenszeit a
<tr>
<td><code>String</code>
<td>Besitz einer dynamischen UTF-8-Kette
<tr>
<td><code>&amp;String</code>
<td>Referenz auf eine unveränderbare dynamische UTF-8-Kette
<tr>
<td><code>&amp;mut String</code>
<td>Referenz auf eine veränderbare dynamische UTF-8-Kette
<tr>
<td><code>Box&lt;str&gt;</code>
<td>Besitz einer UTF-8-Kette fixer Länge
<tr>
<td><code>Rc&lt;str&gt;</code>
<td>gemeinschaftlicher Besitz unveränderbarer UTF-8-Kette
<tr>
<td><code>Rc&lt;RefCell&lt;String&gt;&gt;</code>
<td>gemeinschaftlicher Besitz einer dynamischen UTF-8-Kette
<tr>
<td><code>Cow&lt;str&gt;</code>
<td>Besitz einer UTF-8-Kette bei Clone-on-Write
<tr>
<td><code>&amp;'static [char]</Code>
<td>unveränderbare UTF-32-Kette, statisch in der Binärdatei
<tr>
<td><code>&amp;[char]</Code>
<td>unveränderbare UTF-32-Kette
<tr>
<td><code>&amp;mut [char]</Code>
<td>veränderbare UTF-32-Kette fester Länge
<tr>
<td><code>Box&lt;[char]&gt;</Code>
<td>Besitz einer UTF-32-Kette fester Länge
<tr>
<td><code>Vec&lt;char&gt;</Code>
<td>Besitz einer dynamischen UTF-32-Kette
<tr>
<td><code>Rc&lt;[char]&gt;</code>
<td>gemeinschaftlicher Besitz, unveränderbar
<tr>
<td><code>Rc&lt;RefCell&lt;[char]&gt;&gt;</code>
<td>gemeinschaftlicher Besitz, veränderbar, feste Länge
<tr>
<td><code>Rc&lt;RefCell&lt;Vec&lt;char&gt;&gt;&gt;</code>
<td>gemeinschaftlicher Besitz einer dynamischen UTF-32-Kette
<tr>
<td><code>&amp;[u8]</code>
<td>unveränderbare Byte-Kette
<tr>
<td><code>&amp;mut [u8]</code>
<td>veränderbare Byte-Kette fester Länge
<tr>
<td><code>Vec&lt;u8&gt;</code>
<td>Besitz einer dynamischen Byte-Kette
<tr>
<td><code>&amp;[u16]</code>
<td>unveränderbare ungeprüfte UTF-16-Kette
<tr>
<td><code>&amp;mut [u16]</code>
<td>veränderbare ungeprüfte UTF-16-Kette fester Länge
<tr>
<td><code>Vec&lt;u16&gt;</code>
<td>Besitz einer dynamischen ungeprüften UTF-16-Kette
<tr>
<td><code>&amp;CStr</Code>
<td>unveränderbare nullterminierte Kette
<tr>
<td><code>CString</Code>
<td>Besitz einer nullterminierten dynamischen Kette
<tr>
<td><code>&amp;OsStr</code>
<td>unveränderbare Kette, von plattformabhängiger Gestalt
<tr>
<td><code>OsString</code>
<td>Besitz einer Kette von plattformabhängiger Gestalt
</table>

<p>Die Typen <code>&amp;mut str</code> und
<code>Rc&lt;RefCell&lt;str&gt;&gt;</code> dürfen nicht auf normale
Art verwendet werden, da UTF-8-Zeichenketten nicht allgemein
manipuliert werden können, ohne deren Länge zu ändern. Für solche
Aufgaben sollte der Typ <code>&amp;mut str</code> in den Typ
<code>&amp;mut [u8]</code> transmutiert werden. Bei der Transmutation
von <code>&amp;[u8]</code> nach <code>&amp;str</code>
muss man Vorsicht walten lassen, da das UTF-8 invalide sein könnte.
Hierfür ist die Funktion <code>from_utf8</code> vorgesehen, die
eine Überprüfung vornimmt. Man sollte diese Funktion auch bitte
benutzen, sofern man nicht Experte ist.

<h2>Literatur</h2>
<ul>
<li>Amos: »<a href="https://fasterthanli.me/blog/2020/working-with-strings-in-rust/"
  >Working with strings in Rust</a>«.
<li>Andrew Gallant (BurntSushi): »<a href="https://crates.io/crates/bstr">bstr</a>«.
</ul>

</body>
</html>

