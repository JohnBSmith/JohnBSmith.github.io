<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Fehlerwerte</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Optional">Optionale Werte</a>
<li><a href="#Result">Resultate</a>
<li><a href="#Fragezeichen">Fehler weiterreichen</a>
</ol>

<h2 id="Optional">Optionale Werte</h2>

<p>Wir wollen eine Funktion programmieren die ein Array nach einem
Wert durchsucht und den ersten Index zurückgibt wo dieser Wert gefunden
wurde. Es kann natürlich aber auch sein dass dieser Wert nicht im Array
vorkommt. Man könnte in diesem Fall z.&nbsp;B. den negativen
Index <code>-1</code> zurückgeben. Jedoch geben Enumerationen unsere
Absicht besser wieder.

<p>Für solche optionalen Werte gibt es schon einen vordefinierten
Datentyp:

<pre class="rust ibox">
enum Option&lt;T&gt; {
    None,
    Some(T)
}
</pre>

<p>Hierbei ist <code>T</code> eine Typvariable für die ein
beliebiger aber fester Datentyp eingesetzt wird. In der Variante
<code>None</code> trägt der Wert keine Daten. In der Variante
<code>Some(T)</code> trägt der Wert genau einen Wert vom Typ
<code>T</code>. Das Suchprogramm lässt sich damit so formulieren:

<pre class="rust ibox">
fn find(a: &amp;[&amp;str], s: &amp;str) -&gt; Option&lt;usize&gt; {
    for index in 0..a.len() {
        if a[index] == s {return Some(index);}
    }
    return None;
}

fn print_index(a: &amp;[&amp;str], s: &amp;str) {
    match find(a,s) {
        Some(index) =&gt; println!("Der Index zu '{}' ist {}.",s,index),
        None =&gt; println!("Konnte '{}' nicht finden.",s)
    }
}

fn main() {
    let a = vec!["Kaffee", "Tee", "Mate"];
    print_index(&amp;a,"Tee");
    print_index(&amp;a,"Pfefferminztee");
}
</pre>

<h2 id="Resultate">Resultate</h2>

<p>Blieb der Erfolg bei der Ausführung einer Funktion aus, würde man
gerne mehr darüber erfahren wie es dazu kam. Die Funktion muss dafür
Information über den Fehler zurückgeben. Man könnte diese Information
in einer zusätzlichen Variablen speichern, was jedoch mit dem
Schönheitsfehler behaftet ist, dass diese Variable dann auch
vernachlässigt werden könnte. Wir würden lieber korrektes Benutzen
des Rückgabewertes erzwingen, was sich mittels Enumerationen
bewerkstelligen lässt.

<p>Für Resultate gibt es auch einen vordefinierten Datentyp:
<pre class="rust ibox">
enum Result&lt;T,E&gt; {
    Ok(T),
    Err(E)
}
</pre>

<p>In der Variante <code>Ok(T)</code> trägt der Wert einen normalen
Wert vom Typ <code>T</code>, in der Variante <code>Err(E)</code>
einen Fehlerwert vom Typ <code>E</code>.

<p>Als Beispiel wollen wir ein Programm zur Umwandlung von
Zeichenketten in Zahlen schreiben. Kommen in der Zeichenkette aber
Zeichen vor die keine Ziffern sind, wird ein darüber Aufschluss
gebender Fehlerwert zurückgegeben. Einen entsprechenden Fehlerwert
soll es geben falls die Zahl größer ausfällt als <code>u32</code>
halten kann.

<p>Zunächst die Funktion ohne Fehlerbehandlung:
<pre class="rust ibox">
fn int(s: &amp;str) -&gt; u32 {
    let mut value: u32 = 0;
    for c in s.chars() {
        let digit = u32::from(c)-u32::from('0');
        value = 10*value+digit;
    }
    return value;
}
</pre>

<p>Und nun mit Fehlerbehandlung:
<pre class="rust ibox">
enum ParseError {InvalidDigit, Overflow}

fn int(s: &amp;str) -&gt; Result&lt;u32,ParseError&gt; {
    let mut value: u64 = 0;
    for c in s.chars() {
        if !c.is_ascii_digit() {
            return Err(ParseError::InvalidDigit);
        }
        let digit = u32::from(c)-u32::from('0');
        value = 10*value+u64::from(digit);
        if value&gt;u64::from(std::u32::MAX) {
            return Err(ParseError::Overflow);
        }
    }
    return Ok(value as u32);
}

fn print_number(s: &amp;str) {
    match int(s) {
        Ok(value) =&gt; println!("Zahl: {}",value),
        Err(ParseError::InvalidDigit) =&gt; println!("Keine Zahl."),
        Err(ParseError::Overflow) =&gt; println!("Zahl zu groß.")
    }
}

fn main() {
    print_number("12");
    print_number("Firlefanz");
    print_number("10000000000")
}
</pre>

<h2 id="Fragezeichen">Fehler weiterreichen</h2>
<p>Bei Verzicht auf detailierte Fehlerinformation erlaubt sich
auch diese Ausgestaltung:

<pre class="rust ibox">
fn int(s: &amp;str) -&gt; Option&lt;u32&gt; {
    let mut value: u32 = 0;
    for c in s.chars() {
        if !c.is_ascii_digit() {return None;}
        let digit = u32::from(c)-u32::from('0');
        value = value.checked_mul(10)?.checked_add(digit)?;
    }
    return Some(value);
}
</pre>

<p>Die Operationen <code>checked_mul</code> und <code>checked_add</code>
überprüfen ob es bei Multiplikation zu einem Überlauf kommt, der
Rückgabewert hat den Typ <code>Option&lt;u32&gt;</code>. Die
Operation <code>x?</code> ist eine Kurzschreibweise für:

<pre class="rust ibox">
match x {
    Some(value) =&gt; value,
    None =&gt; return None
}
</pre>

<p>Das ist ein sogenannter Wächter-Ausdruck. Falls <code>x</code>
den Wert <code>None</code> haben sollte, wird die Ausführung
der Funktion abgebrochen und <code>None</code> zurückgeben. Da
im weiteren Verlauf also <code>None</code> ausgeschlossen ist,
kann <code>value</code> einfach aus <code>Some(value)</code>
herausgeholt werden.

<p>Den Fragezeichen-Operator gibt es auch für Resultate:
<pre class="rust ibox">
match x {
    Ok(value) => value,
    error => return error
}
</pre>

<p>Die vollständige Definition des Operators kann auch noch
eine Konvertierung zwischen Fehlerarten vornehmen:
<pre class="rust ibox">
match x {
    Ok(value) => value,
    Err(error) => return Err(From::from(error))
}
</pre>

</body>
</html>
