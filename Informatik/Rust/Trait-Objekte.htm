<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Trait-Objekte</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Laufzeit-Polymorphie">Laufzeit-Polymorphie</a>
  <ol>
  <li><a href="#Heterogene-Felder">Heterogene Felder</a>
  <li><a href="#Downcasts">Downcasts</a>
  </ol>
<li><a href="#Technik">Teschnische Aspekte</a>
</ol>

<h2 id="Laufzeit-Polymorphie">Laufzeit-Polymorphie</h2>

<h3 id="Heterogene-Felder">Heterogene Felder</h3>

<p>In dynamischen Programmiersprachen wie Python sind
Felder so wie alle Datenstrukturen heterogen.
Damit ist gemeint, dass jedes Feld-Element einen
unterschiedlichen Typ besitzen darf. Bei der schnellen Zusammenstellung
von kleineren Programmen kann diese Flexibilität ausgesprochen
praktisch sein. Für jemanden, der nur dynamische Sprachen gewohnt ist,
mag das ganz natürlich erscheinen, in Rust müssen wir eine solche
Funktionalität jedoch erst konstruieren.

<p>Man könnte nun darauf kommen, den Einwand vorzubringen dass
es mit den Tupeln schon heterogene Felder gäbe. Das ist zwar richtig,
führt aber am Ziel vorbei, weil zwei Tupel von unterschiedlichem
Typ sind, sobald die Element-Typen oder die Längen nicht mehr
übereinstimmen. Stattdessen wollen wir haben, dass zu einem Index
des gleichen Feldes Werte unterschiedlichen Typs gespeichert
werden können.

<h4>Realisierung mit Enumerationen</h4>

<p>Grundsätzlich wird Heterogenität durch Konstruktion von Element-Typen
erreicht, die mehrere Typen zusammenfassen. Dieser Ansatz erlaubt
es, die gewöhnlichen vorhandenen generischen Datenstrukturen
weiterhin zu benutzen.

<p>Ein Ansatz zur Zusammenfassung sind, wie schon bekannt, die
Enumerationen. Nachteilig ist hierbei jedoch, dass die in Frage
kommenden Element-Typen schon im Voraus bekannt sein müssen.

<pre class="rust ibox">
enum Object {
    Int(i32),
    String(String)
}

impl Object {
    fn to_string(&amp;self) -&gt; String {
        match self {
            Object::Int(x) =&gt; format!("{}", x),
            Object::String(x) =&gt; x.clone()
        }
    }
}

fn main() {
    let v = vec![
        Object::String(String::from("Boot")),
        Object::Int(12)
    ];
    for x in &amp;v {
        println!("{}", x.to_string());
    }
}
</pre>

<h4>Realisierung mit Trait-Objekten</h4>

<pre class="rust ibox">
trait Object {
    fn to_string(&amp;self) -&gt; String;
}

impl Object for i32 {
    fn to_string(&amp;self) -&gt; String {format!("{}",self)}
}

impl Object for String {
    fn to_string(&amp;self) -&gt; String {self.clone()}
}

fn main() {
    let v: Vec&lt;Box&lt;dyn Object&gt;&gt; = vec![
        Box::new(String::from("Boot")),
        Box::new(12)
    ];
    for x in &amp;v {
        println!("{}", x.to_string());
    }
}
</pre>

<h4>Gemischte Realisierung</h4>

<pre class="rust ibox">
trait Interface {
    fn to_string(&amp;self) -&gt; String;
}

enum Object {
    Int(i32),
    Ref(Box&lt;dyn Interface&gt;)
}

impl Object {
    fn to_string(&amp;self) -&gt; String {
         match self {
             Object::Int(x) =&gt; format!("{}", x),
             Object::Ref(ref x) =&gt; x.to_string()
         }
    }
}

impl Interface for String {
    fn to_string(&amp;self) -&gt; String {self.clone()}
}

fn main() {
    let v: Vec&lt;Object&gt; = vec![
        Object::Ref(Box::new(String::from("Boot"))),
        Object::Int(12)
    ];
    for x in &amp;v {
        println!("{}", x.to_string());
    }
}
</pre>

<h3 id="Downcasts">Downcasts</h3>
<p>Manchmal möchte man ein Trait-Objekt vom Trait <code>A</code>
zum Typ <code>T</code> wieder in das passende Objekt vom Typ
<code>T</code> umwandeln. Um Typsicherheit zu gewährleisten muss
zur Laufzeit eine Typ-Identifikation überprüft werden, die im
Objekt gespeichert wird. Prinzipiell ließe sich die Speicheradresse
der Dispatch-Tabelle als Typ-Identifikation nehmen. Da diese
neben dem Objektzeiger liegt, wäre zum Laden nicht einmal eine
Indirektion notwendig.

<p>Der Funktionalität der Typ-Identifikation ist im Trait
<code>Any</code> implementiert. Hier zunächst ein einfaches Beispiel
mit einem Upcast und einem Downcast:
<pre class="rust ibox">
use std::any::Any;

fn main() {
    let x: Box&lt;Any&gt; = Box::new(12);
    let n: i32 = *match x.downcast_ref::&lt;i32&gt;() {
        Some(n)=&gt;n,
        None=>panic!()
    };
    println!("{}",n);
}
</pre>

<p>Es lässt sich auch einfach ein Typtest vornehmen:
<pre class="rust ibox">
use std::any::Any;

fn main() {
    let x: Box&lt;Any&gt; = Box::new(12);
    assert_eq!(true,x.is::&lt;i32&gt;());
}
</pre>

<p>Beim Methoden-Aufruf ist zunächst auch ein Downcast notwendig:
<pre class="rust ibox">
use std::any::Any;

trait Item {
    fn to_string(&amp;self) -&gt; String;
}

impl Item for i32 {
    fn to_string(&amp;self) -&gt; String {
        format!("{}",self)
    }
}

fn main() {
    let x: Box&lt;Any&gt; = Box::new(12);
    let item = x.downcast_ref::&lt;i32&gt;().unwrap() as &amp;Item;
    println!("{}",item.to_string());
}
</pre>

<p>Ein Downcast für ein allgemeines Objekt lässt sich durch
eine Methode <code>as_any</code> ermöglichen, die einen
Upcast nach <code>Any</code> durchführt:

<pre class="rust ibox">
use std::any::Any;

trait Item {
    fn to_string(&amp;self) -&gt; String;
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
}
impl Item for i32 {
    fn to_string(&amp;self) -&gt; String {
        format!("{}",self)
    }
    fn as_any(&amp;self) -&gt; &amp;dyn Any {
        self
    }
}

fn main() {
    let x: Box&lt;dyn Item&gt; = Box::new(12);
    println!("{}",x.to_string());
    let n: i32 = *x.as_any().downcast_ref::&lt;i32&gt;().unwrap();
    println!("{}",n);
}
</pre>

<p>Hierbei lässt sich <code>Item</code> auch für eigene Datentypen
implementieren:

<pre class="rust ibox">
struct Point {
  x: i32, y: i32
}

impl Item for Point {
    fn to_string(&amp;self) -&gt; String {
        format!("({}|{})",self.x,self.y)
    }
    fn as_any(&amp;self) -&gt; &amp;dyn Any {
        self
    }
}

fn main() {
    let x: Box&lt;dyn Item&gt; = Box::new(Point{x: 1, y: 2});
    println!("{}",x.to_string());
    let p: &amp;Point = x.as_any().downcast_ref::&lt;Point&gt;().unwrap();
    println!("({}|{})",p.x,p.y);
}
</pre>
<p>Eine andere Überlegung geht davon aus, dass <code>Item</code>
von <code>Any</code> erben soll. Ein solcher Ansatz ist aber aus
bestimmten Gründen nicht möglich.<sup><a href="#1">1</a></sup>

<p>Man kann <code>as_any</code> aber generisch für alle Typen mit Trait
<code>Any</code> implementieren:

<pre class="rust ibox">
trait AsAny {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
}
impl&lt;T: Any&gt; AsAny for T {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
}

trait Item: AsAny {
    // ...
}
</pre>

<p>Hier muss man allerdings vorsichtig sein, denn nun ist zwingend
<code>(&amp;*x).as_any()</code> anstelle von <code>x.as_any()</code>
zu schreiben. Das muss man machen, weil <code>as_any</code>
als Nebenefekt nun auch für <code>Box&lt;dyn Item&gt;</code> vorliegt.


<h2 id="Technik">Technische Aspekte</h2>

<p>In Rust dient das Trait-System auch dem Zweck der Verwirklichung
von Laufzeit-Polymorphie. Zum Beispiel ist es möglich ein Feld
zu konstruieren, dessen Elemente jeweils einen unterschiedlichen
Typ besitzen.

<h3>Summentypen</h3>
<p>Zunächst kommt man auf die Idee eine solche
Konstruktion als Summentyp (<code>enum</code>)
zu verwirklichen:

<pre class="rust ibox">
enum Item {
    Int(i32),
    String(String)
}

impl Item {
    pub fn items_to_string(a: &amp;[Item]) -&gt; String {
        let mut s = "[".to_string();
        let mut first = true;
        for x in a {
            if first {first=false;} else {s.push_str(", ");}
            s.push_str(&amp;match *x {
                Item::Int(i)=&gt;format!("{}",i),
                Item::String(ref s)=&gt;format!("{}",s)
            });
        }
        s.push_str("]");
        return s;
    }
}

fn main() {
    let v = vec![
        Item::String("Boot".to_string()),
        Item::Int(12)
    ];
    println!("{}",Item::items_to_string(&amp;v));
}
</pre>

<p>Ein solcher Ansatz ist für große Felder mit vielen kleinen
Elementen effizienter als Konstruktionen mit Referenz-Strukturen.
Referenz-Strukturen müssen auf der Halde (oder auf einer Arena)
alloziert werden. Außerdem kann man die Überlegung aufstellen, ob die
Referenz-Strukturen durch die Indirektion zu fragmentiertem Speicher
zu schlechterer Cache-Lokalität führen können. Fragmentierung kann unter
bestimmten Voraussetzungen natürlich durch einen vernünftigen
Arena-Allokator vermieden werden.

<h3>Dispatch-Tabellen</h3>
<p>Eine allgemeine Polymorphie ergibt sich bei einfachen Summentypen
aber nicht, da die verfügbaren Varianten im Vorhinein bekannt sein
müssen. Zur Aufhebung dieser Beschränkung wird die Grundkonstruktion
der objektorientierten Programmierung herangezogen: eine
Dispatch-Tabelle, auch »Tabelle virtueller Methoden«
genannt.

<p>Jedes Objekt bekommt einen Zeiger auf eine Dispatch-Tabelle,
die eine untrennbare Verbindung von Methoden zu ihrem Objekt
ermöglicht. Jede Methode eines Objektes wird dann über diese
Dispatch-Tabelle aufgerufen. Die Polymorphie ergibt sich nun dadurch,
dass für jeden Datentyp eine separate Dispatch-Tabelle vorhanden ist.

<p>In Rust ist es nun so, dass der Zeiger auf die Dispatch-Tabelle
nicht in der Struktur des Objektes gespeichert ist, sondern dem
Objekt-Zeiger nachgestellt wird. Man spricht von einem
<i>Fat-Pointer</i>, das ist einfach ein Tupel aus den beiden Zeigern.

<p>Ein Datentyp <code>T</code> soll nun den Trait <code>A</code>
implementieren. Hierbei werden die (Methodenzeiger auf die)
Implementationen der Methoden von <code>A</code> zur Dispatch-Tabelle
von <code>T</code> hinzugefügt. Man kann auch von den »realen«
Implementationen der »virtuellen« Methoden von <code>A</code> sprechen,
womit ausgerückt wird dass der Trait <code>A</code> für sich allein
nur ein Interface ist.

<p>Bei einem Upcast von <code>T</code> zu <code>Box&lt;A&gt;</code>
wird automatisch ein Fat-Pointer erstellt. Bei <code>Box&lt;T&gt;</code>
ist das offensichtlich nicht notwendig, da die Methode hier bereits zur
Kompilierzeit angegeben werden kann. Ein Objekt vom Typ
<code>Box&lt;A&gt;</code> wird Trait-Objekt genannt. Auch die Borrows
vom Typ <code>&amp;A</code> und <code>&amp;mut A</code>
sind Fat-Pointer.

<p>Der polymorphe Ansatz gestaltet sich wie folgt:
<pre class="rust ibox">
trait Item {
    fn to_string(&amp;self) -&gt; String;
}

impl Item for i32 {
    fn to_string(&amp;self) -&gt; String {
        format!("{}",self)
    }
}

impl Item for String {
    fn to_string(&amp;self) -&gt; String {
        self.clone()
    }
}

fn items_to_string(a: &amp;[Box&lt;Item&gt;]) -&gt; String {
    let mut s = "[".to_string();
    let mut first = true;
    for x in a {
        if first {first=false;} else {s.push_str(", ");}
        s.push_str(&amp;x.to_string());
    }
    s.push_str("]");
    return s;
}

fn main() {
    let v: Vec&lt;Box&lt;Item&gt;&gt; = vec![
        Box::new("Boot".to_string()),
        Box::new(12)
    ];
    println!("{}",items_to_string(&amp;v));
}
</pre>
<p>Durch Hinzufügen von <code>impl Item for T</code> für eine
unbeschränkte Anzahl von weiteren, erst in speziellen Situationen
bekannten Typen <code>T</code> lässt die polymorphe Funktion
<code>items_to_string</code> für alle diese Typen nutzen.
Die Funktion <code>items_to_string</code> liegt dabei tatsächlich
polymorph im Maschinencode vor.


<p>Zufälligerweise enthält der Trait <code>ToString</code>
aus der Standardbibliothek bereits die Methode <code>to_string</code>,
einschließlich der Implementationen für die grundlegenden Datentypen.
Hätten wir <code>to_representation</code> genommen, die
Anführungszeichen um Zeichenketten zeigen soll, wäre das nicht der Fall.

<p>Rust besitzt <i>Trait-Vererbung</i>. Hierbei werden einfach die
Methoden aus anderen Traits automatisch zum Trait hinzugefügt.
Für jeden implementierten Typ wird dabei zur Kompilierzeit eine
Dispatch-Tabelle erzeugt, bei der automatisch die Methodenzeiger der
anderen Trait-Implementationen hinzugefügt werden. Die Angabe der Methode
<code>to_string</code> wird überflüssig:

<pre class="rust ibox">
use std::string::ToString;
trait Item: ToString {}
impl Item for i32 {}
impl Item for String {}
</pre>

<h3>Dispatch-Tabellen bei Vererbung</h3>

<p>Wir wollen uns kurz anschauen, wie eine mögliche Implementation
von Dispatch-Tabellen bei Vererbung aussehen kann.

<p>Angenommen wir haben die folgende Situation:
<pre class="rust ibox">
trait A {fn f(); fn g();}
trait B {fn h();}
trait S: A,B {fn s();}
</pre>

<p>Für jeden Typ <code>T</code> mit Trait-Implementationen zu
<code>A,B,S</code> werden nun die folgenden
Dispatch-Tabellen erzeugt:
<pre class="rust ibox">
(S for T).vtable = (T::f, T::g, T::h, T::s);
(A for T).vtable = (T::f, T::g);
(B for T).vtable = (T::h);
</pre>

<p>Da hier eine Einbettung vorliegt, können die Bestandteile
der größten Dispatch-Tabelle gemeinsam genutzt werden:
<pre class="rust ibox">
(S for T).vtable = (T::f, T::g, T::h, T::s);
(A for T).vtable = (S for T).vtable[0..2];
(B for T).vtable = (S for T).vtable[2..3];
</pre>

<p>Der Methodenaufruf geschieht nun wie folgt:
<pre class="rust ibox">
let x: Box&lt;S&gt; = Box::new(T);
let (pdata,pvtable): (&amp;T,&amp;(S for T)) = x;

x.f() == pvtable.0(),
x.g() == pvtable.1(),
x.h() == pvtable.2(),
x.s() == pvtable.3()
</pre>
<p>Bzw. wenn ein self-Argument vorliegt:
<pre class="rust ibox">
x.f() == pvtable.0(pdata)
</pre>

<h2>Fußnoten</h2>
<ol>
<li id="1">Siehe hierzu
  »<a href="https://stackoverflow.com/questions/33687447/how-to-get-a-struct-reference-from-a-boxed-trait"
  >How to get a struct reference from a boxed trait?</a>«. In: StackOverflow (rust, traits) (13. November 2015).
</ol>

</body>
</html>

