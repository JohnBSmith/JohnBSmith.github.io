<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Trait-Objekte</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Laufzeit-Polymorphie">Laufzeit-Polymorphie</a>
  <ol>
  <li><a href="#Heterogene-Felder">Heterogene Felder</a>
  <li><a href="#Downcasts">Downcasts</a>
  </ol>
<li><a href="#Technik">Technische Umsetzung</a>
  <ol>
  <li><a href="#Dispatch">Dispatch-Tabellen</a>
  </ol>
</ol>

<h2 id="Laufzeit-Polymorphie">Laufzeit-Polymorphie</h2>

<h3 id="Heterogene-Felder">Heterogene Felder</h3>

<p>In dynamischen Programmiersprachen wie Python sind
Felder so wie alle Datenstrukturen heterogen.
Damit ist gemeint, dass jedes Feld-Element einen
unterschiedlichen Typ besitzen darf. Bei der schnellen Zusammenstellung
von kleineren Programmen kann diese Flexibilität ausgesprochen
praktisch sein. Für jemanden, der nur dynamische Sprachen gewohnt ist,
mag das ganz natürlich erscheinen, in Rust müssen wir eine solche
Funktionalität jedoch erst konstruieren.

<p>Man könnte nun darauf kommen, den Einwand vorzubringen dass
es mit den Tupeln schon heterogene Felder gäbe. Das ist zwar richtig,
führt aber am Ziel vorbei, weil zwei Tupel von unterschiedlichem
Typ sind, sobald die Element-Typen oder die Längen nicht mehr
übereinstimmen. Stattdessen wollen wir haben, dass zu einem Index
des gleichen Feldes Werte unterschiedlichen Typs gespeichert
werden können.

<h4>Realisierung mit Enumerationen</h4>

<p>Grundsätzlich wird Heterogenität durch Konstruktion von Element-Typen
erreicht, die mehrere Typen zusammenfassen. Dieser Ansatz erlaubt
es, die gewöhnlichen vorhandenen generischen Datenstrukturen
weiterhin zu benutzen.

<p>Ein Ansatz zur Zusammenfassung sind, wie schon bekannt, die
Enumerationen. Nachteilig ist hierbei jedoch, dass die in Frage
kommenden Element-Typen schon im Voraus bekannt sein müssen.

<pre class="rust ibox">
enum Object {
    Int(i32),
    String(String)
}

impl Object {
    fn to_string(&amp;self) -&gt; String {
        match self {
            Object::Int(x) =&gt; format!("{}", x),
            Object::String(x) =&gt; x.clone()
        }
    }
}

fn main() {
    let v = vec![
        Object::String(String::from("Boot")),
        Object::Int(12)
    ];
    for object in &amp;v {
        println!("{}", object.to_string());
    }
}
</pre>

<h4>Realisierung mit Trait-Objekten</h4>

<p>Was wir bräuchten, wäre eine Art Enumeration von allen beliebigen
Typen. Weil die Speichergröße von Typen unbeschränkt hoch sein kann,
muss dies ein Typ dynamischer Größe sein. Werte eines solchen Typs
sind nur über Zeiger ansprechbar.

<p>Zudem muss eine Schnittstelle der Operationen vorhanden sein,
die alle Typen gemeinsam haben. In diesem Beispiel ist das die
Methode <code>to_string</code>. Was <code>to_string</code> tut, ist
für jeden Typ unterschiedlich, nur die Schnittstelle bleibt gleich.
Um dies zu erreichen, bekommt jeder Typ zur Laufzeit eine eigene
<i>Dispatch-Tabelle</i>, etwas schwammig auch <i>Tabelle virtueller
Methoden</i> oder kurz <i>virtual table</i> genannt. Diese Tabelle
enthält Funktionenzeiger auf die gewünschten Operationen. Zum Zugriff
auf die Tabelle bekommt der Wert-Zeiger den Zeiger auf die
Dispatch-Tabelle nachgestellt.

<p>Der Compiler macht dies alles automatisch für uns. Die Schnittstelle
wird als Trait definiert, nennen wir ihn <code>Object</code>.
Der durch das Schlüsselwort <code>dyn</code> eingeleitete Operator
ordnet dem Trait den zugehörigen opaken Typ mit dieser Schnittstelle
zu. Weil <code>dyn Object</code> wie gesagt ein Typ dynamischer
Größe ist, sind die Werte nur über Zeigertypen wie
<code>&amp;dyn Object</code> oder <code>Box&lt;dyn Object&gt;</code>
ansprechbar. Die Zeiger dieser Typen sind wie gesagt Paare von
Zeigern auf Wert und Dispatch-Tabelle.

<pre class="rust ibox">
trait Object {
    fn to_string(&amp;self) -&gt; String;
}

impl Object for i32 {
    fn to_string(&amp;self) -&gt; String {format!("{}",self)}
}

impl Object for String {
    fn to_string(&amp;self) -&gt; String {self.clone()}
}

fn main() {
    let v: Vec&lt;Box&lt;dyn Object&gt;&gt; = vec![
        Box::new(String::from("Boot")),
        Box::new(12)
    ];
    for object in &amp;v {
        println!("{}", object.to_string());
    }
}
</pre>

<h4>Gemischte Realisierung</h4>

<p>Es ist nicht besonders effizient, Werte von kleinen Typen wie
<code>i32</code> über Zeiger anzusprechen, geschweige denn, deren
Speicherplätze über <code>Box</code> auf dem Haldenspeicher zu
allozieren. Ein Ansatz zur Vermeidung von solchen Zeiger-Indirektionen
ist eine Zusammenfügung aus Enumeration und Trait-Objekt.
Das Trait-Objekt wird hierbei als residuale Variante der Enumeration
betrachtet.

<pre class="rust ibox">
trait Interface {
    fn to_string(&amp;self) -&gt; String;
}

enum Object {
    Int(i32),
    Ref(Box&lt;dyn Interface&gt;)
}

impl Object {
    fn to_string(&amp;self) -&gt; String {
         match self {
             Object::Int(x) =&gt; format!("{}", x),
             Object::Ref(ref x) =&gt; x.to_string()
         }
    }
}

impl Interface for String {
    fn to_string(&amp;self) -&gt; String {self.clone()}
}

fn main() {
    let v: Vec&lt;Object&gt; = vec![
        Object::Ref(Box::new(String::from("Boot"))),
        Object::Int(12)
    ];
    for object in &amp;v {
        println!("{}", object.to_string());
    }
}
</pre>

<h3 id="Downcasts">Downcasts</h3>

<h4>Der Trait Any</h4>

<p>Die Standardbibliothek stellt den Trait <code>Any</code> zur
Verfügung und implementiert diesen bereits für alle Typen. Genau
genommen liegt die Implementation nur für Typen ohne Lebenszeiten
außer <code>'static</code> vor, aber das ist jetzt erst einmal
nicht so wichtig. Der Zweck von <code>Any</code> ist die
Typ-Identifikation zur Laufzeit.

<p>Die opaken Zeigertypen wie <code>&amp;dyn Any</code>
und <code>Box&lt;dyn Any&gt;</code> dürfen daher auf Werte
beliebigen Typs zeigen. Man kann dies als sicheres Äquivalent
zu den aus der Programmiersprache&nbsp;C bekannten void-Zeigern
sehen. Anders als bei void-Zeigern gewährleistet die Typ-Identifikation
einen sicheren Downcast. Ein Downcast vermittelt, von einem allgemeinen
Typ wieder zu einem speziellen zu kommen. Man darf sich das als
Analogon zum Matching einer Enum-Variante vorstellen.

<pre class="rust ibox">
use std::any::Any;

struct Duck {name: String}

fn main() {
    let object: &amp;dyn Any = &amp;Duck{name: "Donald".into()};

    assert!(object.is::&lt;Duck&gt;());

    if let Some(duck) = object.downcast_ref::&lt;Duck&gt;() {
        println!("{} ist eine Ente.", duck.name);
    }
}
</pre>

<p>Naive Benutzung von <code>Any</code> befähigt uns zur Kaputtbrechung
des Typsystems. Zwar wird dadurch die Typsicherheit nicht beschädigt,
da die Typ-Identifikation diese erhält, allerdings ist das Resultat
ein zur Kompilierzeit teilweise  untypisiertes Programm. Bspw. könnten
wir das heterogene Feld letztendlich auch wie folgt konstruieren.

<pre class="rust ibox">
use std::any::Any;

fn object_to_string(x: &amp;dyn Any) -&gt; String {
    if let Some(s) = x.downcast_ref::&lt;String&gt;() {
        s.clone()
    } else if let Some(n) = x.downcast_ref::&lt;i32&gt;() {
        format!("{}", n)
    } else {
        unimplemented!()
    }
}

fn main() {
    let v: Vec&lt;Box&lt;dyn Any&gt;&gt; = vec![
        Box::new(String::from("Boot")),
        Box::new(12)
    ];
    for object in &amp;v {
        println!("{}", object_to_string(object.as_ref()));
    }
}
</pre>

<p>Die Konvertierung <code>object.as_ref()</code> ist hier aus einem
subtilen Grund notwendig. Nämlich besitzt
<code>Box&lt;dyn Any&gt;</code> selbst den <code>Any</code>-Trait.
Die Variable <code>object</code> bezieht sich auf diesen Typ,
und somit auch <code>x</code>. Folgendes Programm zeigt ausführlich
die Unterschiede:

<pre class="rust ibox">
use std::any::Any;

struct Duck {}

fn main() {
    let object: Box&lt;dyn Any&gt; = Box::new(Duck{});
    let object = &amp;object;

    let x: &amp;dyn Any = object;
    assert!(x.is::&lt;Box&lt;dyn Any&gt;&gt;());

    let x: &amp;dyn Any = object.as_ref();
    assert!(x.is::&lt;Duck&gt;());

    let x: &amp;dyn Any = &amp;**object;
    assert!(x.is::&lt;Duck&gt;());
}
</pre>

<h4>Benutzung von Any für Downcasts</h3>

<p>Einen Downcast möchte man nun für beliebige Trait-Objekte
zur Verfügung haben, nicht bloß für <code>dyn Any</code>.
Um dies zu erreichen, macht man sich genau den durch <code>Any</code>
zur Verfügung gestellten Mechanismus zunutze. Hierfür bedarf es
lediglich eines weiteren Upcasts nach <code>dyn Any</code>.
Der direkte Upcast von Trait-Objekt-Typ zu Trait-Objekt-Typ
ist allerdings nicht möglich. Um dennoch zum Ziel zu gelangen,
müssen wir einen kleinen Umweg gehen. Bei Trait-Methoden besitzt
das self-Argument jeweils den ursprünglichen Typ. Daher dürfen wir
eine Methode zum Upcast schreiben, nennen wir sie <code>as_any</code>.

<p>Dies wollen wir erreichen:
<div class="indent">
<img src="img/Downcast.png">
</div>

<p>Diesen Umweg müssen wir gehen:
<div class="indent">
<img src="img/as-any.png">
</div>

<p>Die Implementation gestaltet sich so:
<pre class="rust ibox">
use std::any::Any;

trait Object {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
}

struct Duck {name: String}

impl Object for Duck {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
}

fn main() {
    let object: &amp;dyn Object = &amp;Duck{name: "Donald".into()};

    assert!(object.as_any().is::&lt;Duck&gt;());

    if let Some(duck) = object.as_any().downcast_ref::&lt;Duck&gt;() {
        println!("{} ist eine Ente.", duck.name);
    }
}
</pre>

<p>Man kann <code>as_any</code> auch gleich für alle Typen mit Trait
<code>Any</code> implementieren:

<pre class="rust ibox">
use std::any::Any;

trait AsAny {
    fn as_any(&amp;self) -&gt; &amp;dyn Any;
}
impl&lt;T: Any&gt; AsAny for T {
    fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
}

trait Object: AsAny {}

struct Duck {name: String}

impl Object for Duck {}

fn main() {
    let object: Box&lt;dyn Object&gt; = Box::new(Duck{
        name: "Donald".into()
    });

    assert!((&amp;*object).as_any().is::&lt;Duck&gt;());

    if let Some(duck) = (&amp;*object).as_any().downcast_ref::&lt;Duck&gt;() {
        println!("{} ist eine Ente.", duck.name);
    }
}
</pre>

<p>Hier muss man allerdings vorsichtig sein, denn nun ist zwingend
<code>(&amp;*object).as_any()</code> anstelle von <code>object.as_any()</code>
zu schreiben. Das muss man machen, weil <code>as_any</code>
als Nebeneffekt nun auch für <code>Box&lt;dyn Object&gt;</code>
vorliegt. Um diese Problematik aufzuzeigen, wurde <code>Box</code>
in das Beispiel eingebracht.

<p>Dieses Problem besteht aber nur, solange <code>AsAny</code>
eingebunden ist. Das wissen wir zu verhindern, indem
<code>AsAny</code> durch ein Modul verhüllt wird:

<pre class="rust ibox">
mod as_any {
    use std::any::Any;
    
    pub trait AsAny {
        fn as_any(&amp;self) -&gt; &amp;dyn Any;
    }
    impl&lt;T: Any&gt; AsAny for T {
        fn as_any(&amp;self) -&gt; &amp;dyn Any {self}
    }
}

trait Object: as_any::AsAny {}
</pre>


<h2 id="Technik">Technische Umsetzung</h2>

<h3 id="Dispatch">Dispatch-Tabellen</h3>

<p>Zum besseren Verständnis von Trait-Objekten wird im Folgenden
ein Nachbau des Dispatch-Mechanismus gezeigt. Der Typ
<code>Box&lt;dyn Object&gt;</code> ist als Struktur
<code>BoxDynObject</code> modelliert. Diese besteht aus zwei Zeigern,
dem untypisierten Zeiger <code>data</code> auf die Daten und
dem Zeiger <code>dispatch</code> auf die jeweilige Dispatch-Tabelle.

<p>Für den untypisierten Zeiger dient zunächst
<code>Box&lt;dyn Any&gt;</code> als Hilfsmittel. Dies gestattet
die Konstruktion des Dispatch-Mechanismus ohne Rückgriff auf
unsichere Mittel.

<pre class="rust ibox">
use std::any::Any;

struct Dispatch {
    to_string: fn(pself: &amp;dyn Any) -&gt; String
}

struct BoxDynObject {
    data: Box&lt;dyn Any&gt;,
    dispatch: &amp;'static Dispatch
}
impl BoxDynObject {
    fn to_string(&amp;self) -&gt; String {
        (self.dispatch.to_string)(&amp;*self.data)
    }
}

fn to_string_i32(pself: &amp;dyn Any) -&gt; String {
    let pself = pself.downcast_ref::&lt;i32&gt;().unwrap();
    format!("{}", pself)
}

fn to_string_string(pself: &amp;dyn Any) -&gt; String {
    let pself = pself.downcast_ref::&lt;String&gt;().unwrap();
    pself.clone()
}

static DISPATCH_I32: Dispatch = Dispatch{
    to_string: to_string_i32
};
static DISPATCH_STRING: Dispatch = Dispatch{
    to_string: to_string_string
};

impl From&lt;i32&gt; for BoxDynObject {
    fn from(x: i32) -&gt; Self {
        BoxDynObject{
            data: Box::new(x),
            dispatch: &amp;DISPATCH_I32
        }
    }
}
impl From&lt;&amp;str&gt; for BoxDynObject {
    fn from(x: &amp;str) -&gt; Self {
        BoxDynObject{
            data: Box::new(String::from(x)),
            dispatch: &amp;DISPATCH_STRING
        }
    }
}

fn main() {
    let v: Vec&lt;BoxDynObject&gt; = vec!["Boot".into(), 12.into()];
    for object in &amp;v {
        println!("{}", object.to_string());
    }
}
</pre>

<p>Wir verlassen nun die sicheren Gefilde und tauschen
<code>Box&lt;dyn Any&gt;</code> gegen <code>*mut u8</code> aus.
Als Nebeneffekt kommt hinzu, dass wir uns nun selbst um
die Destruktoraufrufe kümmern müssen. Da der Destruktor
<code>drop</code> selbst von Typ zu Typ unterschiedlich ausfällt,
muss auch dieser als Methode in der Dispatch-Tabelle vorkommen.

<pre class="rust ibox">
struct Dispatch {
    to_string: fn(pself: *const u8) -&gt; String,
    drop: fn(pself: *mut u8)
}

struct BoxDynObject {
    data: *mut u8,
    dispatch: &amp;'static Dispatch
}
impl BoxDynObject {
    fn to_string(&amp;self) -&gt; String {
        (self.dispatch.to_string)(self.data)
    }
}

fn to_string_i32(pself: *const u8) -&gt; String {
    let pself = pself as *const i32;
    format!("{}", unsafe {&amp;*pself})
}

fn to_string_string(pself: *const u8) -&gt; String {
    let pself = pself as *const String;
    unsafe {&amp;*pself}.clone()
}

fn drop_i32(pself: *mut u8) {
    drop(unsafe {Box::from_raw(pself as *mut i32)});
}

fn drop_string(pself: *mut u8) {
    drop(unsafe {Box::from_raw(pself as *mut String)});
}

static DISPATCH_I32: Dispatch = Dispatch{
    to_string: to_string_i32,
    drop: drop_i32
};
static DISPATCH_STRING: Dispatch = Dispatch{
    to_string: to_string_string,
    drop: drop_string
};

impl Drop for BoxDynObject {
    fn drop(&amp;mut self) {
        (self.dispatch.drop)(self.data)
    }
}

impl From&lt;i32&gt; for BoxDynObject {
    fn from(x: i32) -&gt; Self {
        BoxDynObject{
            data: Box::into_raw(Box::new(x)) as *mut u8,
            dispatch: &amp;DISPATCH_I32
        }
    }
}
impl From&lt;&amp;str&gt; for BoxDynObject {
    fn from(x: &amp;str) -&gt; Self {
        let data = Box::new(String::from(x));
        BoxDynObject{
            data: Box::into_raw(data) as *mut u8,
            dispatch: &amp;DISPATCH_STRING
        }
    }
}

fn main() {
    let v: Vec&lt;BoxDynObject&gt; = vec!["Boot".into(), 12.into()];
    for object in &amp;v {
        println!("{}", object.to_string());
    }
}
</pre>

<h2>Referenzen</h2>
<ol>
<li id="1">
  »<a href="https://stackoverflow.com/questions/33687447/how-to-get-a-struct-reference-from-a-boxed-trait"
  >How to get a struct reference from a boxed trait?</a>«. In: StackOverflow (rust, traits) (13. November 2015).
</ol>

</body>
</html>

