<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="main.css" rel="stylesheet">
  <script src="rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Netzwerk-Programmierung</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Sockets">Sockets</a>
<li><a href="#IP-Adressen">IP-Adressen</a>
</ol>

<h2 id="Sockets">Sockets</h2>

<p>Als ersten Beispiel soll ein Client-Programm geschrieben
werden, welches sich mit dem Server der Domain <code>www.example.com</code>
verbindet und über das HTTP-Protokoll die HTML-Seite
<code>http://www.example.com/</code> erfragt.

<p>Es gibt natürlich Bibliotheken dafür, auch welche mit denen man
gleich verschlüsselt über HTTPS kommunizieren kann. Diese Bibliotheken
sollte man auch benutzen. Aus didaktischen Gründen wollen wir das
hier aber zunächst einmal manuell machen.

<p>Zunächst wird die IP-Adresse der Domain benötigt. Um an diese
zu gelangen, müsste man sich zunächst mit einem DNS-Server verbinden,
und dieser besitzt auch wieder eine IP-Adresse. Wir lassen das zur
Vereinfachung bleiben und tragen die Adresse manuell ein.
IP-Adressen können sich von Zeit zu Zeit ändern. Am 23. Dez. 2019
bekam ich <code>93.184.216.34</code>. Das Format ist noch das
alte IPv4, man kann aber genauso gut IPv6 eintragen. Zusätzlich
muss man noch eine Portnummer angeben, bei HTTP ist das normalerweise 80.

<p>Zum Aufbau einer Verbindung mit dem Server muss man ein Socket eröffnen,
über das man über das Protokoll TCP/IP mit dem Server kommunizieren
kann. Zum Erfragen der HTML-Seite wird eine HTTP-GET-Nachricht
abgeschickt. Das ist eine Zeichenkette, deren Format im HTTP-Protokoll
festgelegt ist. Danach wird auf eine Rückmeldung vom Server
gewartet, die ebenfalls im HTTP-Protokoll ankommt. HTTP-Nachrichten
bestehen aus einem Header und einem Body, welche durch eine
leere Zeile getrennt sind. Bei HTTP-GET ist der Body leer. Die
Rückmeldung sollte aber einen Body mit dem eigentlichen HTML-Text
enthalten.

<p>Das Programm:
<pre class="rust indent">
use std::net::TcpStream;
use std::io::{Write,Read};

fn main() -&gt; Result&lt;(),std::io::Error&gt; {
    let host = "www.example.com";
    let path = "/";
    let mut stream = TcpStream::connect("93.184.216.34:80")?;
    let message = format!(
        "GET {} HTTP/1.0\r\nHost: {}\r\n\r\n",
        path, host
    );
    stream.write(message.as_bytes())?;
    let mut response = String::new();
    stream.read_to_string(&amp;mut response)?;
    println!("{}",response);
    return Ok(());
}
</pre>

<p>Ich bekam die folgende Nachricht:
<pre style="overflow: scroll; background-color: #000000;
color: #a0a0a0; padding: 10px">
HTTP/1.0 200 OK
Accept-Ranges: bytes
Cache-Control: max-age=604800
Content-Type: text/html; charset=UTF-8
Date: Mon, 23 Dec 2019 05:04:22 GMT
Etag: "3147526947+ident"
Expires: Mon, 30 Dec 2019 05:04:22 GMT
Last-Modified: Thu, 17 Oct 2019 07:18:26 GMT
Server: ECS (nyb/1DCD)
Vary: Accept-Encoding
X-Cache: HIT
Content-Length: 1256
Connection: close

&lt;!doctype html&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;title&gt;Example Domain&lt;/title&gt;

    &lt;meta charset="utf-8" /&gt;
    &lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;
    &lt;style type="text/css"&gt;
    ...
    &lt;/style&gt;    
&lt;/head&gt;

&lt;body&gt;
&lt;div&gt;
    &lt;h1&gt;Example Domain&lt;/h1&gt;
    &lt;p&gt;This domain is for use in illustrative examples in documents. You may use this
    domain in literature without prior coordination or asking for permission.&lt;/p&gt;
    &lt;p&gt;&lt;a href="https://www.iana.org/domains/example"&gt;More information...&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>Es gibt mit dem Programm aber noch gewisse Probleme. Sollte
der Server nicht sofort auf die Nachricht antworten, hängt das
Programm. Man kann sich dafür verschiedene Lösungsansätze überlegen.
Zum einen wäre es möglich, die Anfrage in einem extra Thread
durchzuführen. Zum anderen lässt sich für die Anfrage ein
Timeout festlegen &ndash; falls dieses nicht eingehalten wird,
fragt man später nochmals nach. Im Endeffekt läuft es darauf hinaus,
Server und Clients nebenläufig zu programmieren.
Netzwerk-Programmierung ist ein typischer Anwendungsfall für
Nebenläufigkeit.

<h2 id="IP-Adressen">IP-Adressen</h2>

<h3>IPv4</h3>
<p>Die IP-Adresse muss man nicht unbedingt als Zeichenkette übergeben:
<pre class="rust indent">
use std::net::{TcpStream,SocketAddrV4,Ipv4Addr};

let socket = SocketAddrV4::new(Ipv4Addr::new(93,184,216,34),80);
let mut stream = TcpStream::connect(socket)?;
</pre>
<p>Die IP-Adresse ist eine <code>u32</code>-Zahl. Die Angabe
können wir umrechnen:
<pre class="indent">
93*255<sup>3</sup> + 184*255<sup>2</sup> + 216*255 + 34
</pre>
<p>Die direkte Angabe als Zahl ist möglich:
<pre class="rust indent">
let ip: u32 = 0x5db8d822;
let socket = SocketAddrV4::new(Ipv4Addr::from(ip),80);
</pre>
<p>Oder als Zeichenkette:
<pre class="rust indent">
let ip = "93.184.216.34".parse::&lt;Ipv4Addr&gt;().unwrap();
let socket = SocketAddrV4::new(Ipv4Addr::from(ip),80);
</pre>

<h3>IPv6</h3>
<p>Jede IPv4-Adresse ist auch eine gültige IPv6-Adresse.
Die IPv4-Adresse <code>0xhhhhhhhh</code> wird so eingebettet:
<pre class="indent">
0000:0000:0000:0000:0000:ffff:hhhh:hhhh
</pre>
bzw. kurz:
<pre class="indent">
::ffff:hhhh:hhhh
</pre>

<p>Das Programm ist dann von folgender Form:
<pre class="rust indent">
let ip = Ipv6Addr::new(0,0,0,0,0,0xffff,0x5db8,0xd822);
let socket = SocketAddrV6::new(ip,80,0,0);
</pre>

<p>Entsprechend gibt es auch hier die Angabe als Zahl:
<pre class="rust indent">
let ip: u128 = 0xffff5db8d822;
let socket = SocketAddrV6::new(Ipv6Addr::from(ip),80,0,0);
</pre>
<p>Oder als Zeichenkette:
<pre class="rust indent">
let ip = "::ffff:5db8:d822".parse::&lt;Ipv6Addr&gt;().unwrap();
let socket = SocketAddrV6::new(ip,80,0,0);
</pre>

</body>
</html>
