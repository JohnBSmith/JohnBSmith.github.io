<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Generische Programmierung</h1>

<h2 id="toc">Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Parametrische-Polymorphie">Parametrische Polymorphie</a>
  <ol>
  <li><a href="#Generische-Funktionen">Generische Funktionen</a>
  <li><a href="#Generische-Typen">Generische Typen</a>
  <li><a href="#Bounds">Beschränkte Quantifizierung</a>
  <li><a href="#AT">Assoziierte Typen</a>
  </ol>
<li><a href="#Technik">Technische Aspekte</a>
  <ol>
  <li><a href="#Konzept">Das Konzept der Polymorphie</a>
  <li><a href="#Monomorphisierung">Monomorphisierung</a>
  <li><a href="#Laufzeit">Laufzeit-Polymorphie</a>
  <li><a href="#Laufzeit-allg">Laufzeit-Polymorphie allgemein</a>
  <li><a href="#Laufzeit-polymorphe-Container">Laufzeit-polymorphe Container</a>
  </ol>
</ol>

<h2 id="Parametrische-Polymorphie">Parametrische Polymorphie</h2>

<h3 id="Generische-Funktionen">Generische Funktionen</h3>

<p>Betrachten wir nochmals die Funktion zur Umkehrung der Reihenfolge
eines Feldes, das war:
<pre class="rust ibox">
fn reverse(a: &amp;mut [i32]) {
    let n = a.len();
    for i in 0..n/2 {a.swap(i,n-1-i);}
}
</pre>

<p>Für jeden weiteren Element-Typ wäre diese neu zu schreiben.
Hierbei stellt man jedoch fest, dass die Funktion für jeden
Element-Typ die gleiche Gestalt besitzt. Es liegt auf der Hand.
Wir würden die Funktion gerne für <i>alle</i> denkbaren Element-Typen
auf einmal schreiben.

<p>Zur Realisierung dieser Idee führt man ein neues Konzept ein.
Der Element-Typ wird durch eine <i>Typvariable</i> ersetzt.
In die so gegebene Typsignatur darf für die Typvariable dann jeder beim
Aufruf vorgefundene Typ eingesetzt werden. Um Typvariablen besser
von gewöhnlichen Typen unterscheiden zu können, werden diese
zusätzlich in spitzen Klammern hinter den Bezeichner der Funktion
gestellt.

<pre class="rust ibox">
fn reverse&lt;T&gt;(a: &amp;mut [T]) {
    let n = a.len();
    for i in 0..n/2 {a.swap(i,n-1-i);}
}
</pre>

<p>Man spricht von einer <i>Allquantifizierung</i> über die
Typvariable <code>T</code>. Eine solche Funktion nennt man
<i>generisch</i> oder <i>parametrisch polymorph</i>.

<h3 id="Generische-Typen">Generische Typen</h3>

<p>So wie Funktionen dürfen auch andere Typen generisch sein.
Betrachten wir zunächst die folgende Konstruktion eines
dynamischen Stapels.

<pre class="rust ibox">
struct Node {
    data: i32,
    next: Option&lt;Box&lt;Node&gt;&gt;
}

struct Stack {
    top: Option&lt;Box&lt;Node&gt;&gt;
}

impl Stack {
    fn new() -&gt; Self {
        Stack {top: None}
    }
    fn push(&amp;mut self, x: i32) {
        let node = self.top.take();
        self.top = Some(Box::new(Node {data: x, next: node}));
    }
    fn pop(&amp;mut self) -&gt; Option&lt;i32&gt; {
        if let Some(node) = self.top.take() {
            self.top = node.next;
            Some(node.data)
        } else {
            None
        }
    }
}
</pre>

<p>Wie bei Funktionen enthält die Formulierung eine Typvariable,
in die bei der Benutzung der jeweilige Element-Typ eingesetzt
wird.

<pre class="rust ibox">
struct Node&lt;T&gt; {
    data: T,
    next: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;
}

struct Stack&lt;T&gt; {
    top: Option&lt;Box&lt;Node&lt;T&gt;&gt;&gt;
}

impl&lt;T&gt; Stack&lt;T&gt; {
    fn new() -&gt; Self {
        Stack {top: None}
    }
    fn push(&amp;mut self, x: T) {
        let node = self.top.take();
        self.top = Some(Box::new(Node {data: x, next: node}));
    }
    fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {
        if let Some(node) = self.top.take() {
            self.top = node.next;
            Some(node.data)
        } else {
            None
        }
    }
}
</pre>

<p>Man beachte, dass <code>Stack</code> und dessen Methoden
<code>push</code> und <code>pop</code> über dieselbe Typvariable
parametrisiert sind. Steht der in die Typvariable eingesetzte
Typ an einer Stelle fest, muss der gleiche Typ auch an allen
anderen Stellen für die Typvariable eingesetzt werden. Aufgrund
der Typinferenz besteht hierbei nicht immer die Notwendigkeit,
den Typ explizit anzugeben.

<h3 id="Bounds">Beschränkte Quantifizierung</h3>

<p>Nun sind auch generische Funktionen denkbar, bei denen für die
Typvariable nur solche Typen einsetzbar sind, die notwendige
Eigenschaften erfüllen. Betrachten wir dazu die Berechnung des
Maximums eines nicht-leeren Feldes:

<pre class="rust ibox">
fn max(a: &amp;[i32]) -&gt; i32 {
    let mut m = a[0];
    for &amp;x in a[1..].iter() {
        if m&lt;x {m = x;}
    }
    return m;
}
</pre>

<p>Auf den ganzen Zahlen ist auf natürliche Weise eine Totalordnung
definiert. Wollen wir diese Funktion generisch formulieren, brauchen
wir Zugriff auf die Ordnungsrelation. Die zielführende Idee dazu ist
ein Funktionenzeiger auf die Ordnungsrelation.

<pre class="rust ibox">
fn max&lt;T&gt;(a: &amp;[T], lt: fn(&amp;T,&amp;T) -&gt; bool) -&gt; &amp;T {
    let mut m = &amp;a[0];
    for x in a[1..].iter() {
        if lt(m,x) {m = x;}
    }
    return m;
}

fn lt_i32(x: &amp;i32, y: &amp;i32) -&gt; bool {
    x&lt;y
}

fn main() {
    let a = [2, 4, 1, 3];
    println!("{}", max(&amp;a, lt_i32));
}
</pre>

<p>Die Benutzung von Funktionenzeigern kommt hier als unbefangener
Ansatz daher, doch liegt darin ein kritischer Schritt, der das
Potential der generischen Programmierung schlagartig um Größenordnungen
ausweitet.

<p>Weiterführende Überlegungen bringen die Einsicht, dass
generische Funktionen durch Tabellen von Funktionenzeigern gesteuert
werden, man spricht von sogenannten Dispatch-Tabellen.
Wohlgemerkt darf der Compiler das Dispatching im Rahmen der
Monomorphisierung bereits zur Kompilierzeit auflösen, womit die
Dispatch-Tabellen zur Laufzeit verschwunden sein dürfen. Allerdings
muss eine generische Funktion hierzu für jeden Typ neu kompiliert
werden.

<p>Zur Gewährleistung erhöhter Typsicherheit wollen wir nun aber
haben, dass es zwischen einem Typ und seinen Eigenschaften eine
feste Verbindung geben kann. Dazu wurde das Konzept der <i>Traits</i>
in die Programmiersprache eingeführt. Ein Trait fasst analog
zur Dispatch-Tabelle die Funktionen zusammen, die die generische
Funktion benötigt.

<p>In der Definition der generischen Funktion bekommt die Typvariable
den benötigten Trait annotiert. Ein solcher <i>Trait-Bound</i>
sagt aus, dass die Funktion nicht mehr über alle möglichen
Typen parametrisiert ist, sondern nur noch über solche,
die diese Eigenschaft erfüllen. Anders ausgedrückt ist die
Allquantifizierung der Typvariable durch den Trait-Bound
beschränkt.

<p>Der Trait <code>Ord</code> stellt die Totalordnung dar.
Für Ganzzahltypen wie <code>i32</code> ist dieser bereits durch die
Standardbibliothek implementiert. Damit dürfen wir formulieren:

<pre class="rust ibox">
fn max&lt;T: Ord&gt;(a: &amp;[T]) -&gt; &amp;T {
    let mut m = &amp;a[0];
    for x in a[1..].iter() {
        if m &lt; x {m = x;}
    }
    return m;
}
</pre>

<p>Wir können auch die gesamte Funktionalität nachbauen.
Das geht so:
<pre class="rust ibox">
trait Ord {
    fn lt(x: &amp;Self, y: &amp;Self) -&gt; bool;
}

impl Ord for i32 {
    fn lt(x: &amp;i32, y: &amp;i32) -&gt; bool {x&lt;y}
}

fn max&lt;T: Ord&gt;(a: &amp;[T]) -&gt; &amp;T {
    let mut m = &amp;a[0];
    for x in a[1..].iter() {
        if Ord::lt(m,x) {m = x;}
    }
    return m;
}
</pre>

<p>Der eigentlichen Definition, wie sie in der Standardbibliothek
auftritt, kommt die folgende Formulierung näher.
<pre class="rust ibox">
enum Ordering {
    Less, Equal, Greater
}

trait Ord {
    fn cmp(&amp;self, other: &amp;Self) -&gt; Ordering;
    fn lt(&amp;self, other: &amp;Self) -&gt; bool {
        matches!(Ord::cmp(self,other), Ordering::Less)
    }
}

impl Ord for i32 {
    fn cmp(&amp;self, other: &amp;i32) -&gt; Ordering {
        if self &lt; other {Ordering::Less}
        else if self == other {Ordering::Equal}
        else {Ordering::Greater}
    }
}

fn max&lt;T: Ord&gt;(a: &amp;[T]) -&gt; &amp;T {
    let mut m = &amp;a[0];
    for x in a[1..].iter() {
        if m.lt(x) {m = x;}
    }
    return m;
}
</pre>

<p>Eine kurze Bemerkung noch. Zur Notation von Trait-Schranken
darf man alternativ eine wobei-Klausel schreiben. Die Signatur
<pre class="rust ibox">
fn max&lt;T: Ord&gt;(a: &amp;[T]) -> &amp;T
</pre>

<p>ist äquivalent zu:
<pre class="rust ibox">
fn max&lt;T&gt;(a: &amp;[T]) -> &amp;T
where T: Ord
</pre>

<p>Solche wobei-Klauseln bieten sich an, wenn die Signatur mehrere
Typparameter und Trait-Schranken enthält, und man dabei
Übersichtlichkeit wahren will. Wir werden darüber hinaus später auf
Signaturen stoßen, bei denen die Benutzung der wobei-Klausel
obligatorisch ist.

<h3 id="AT">Assoziierte Typen</h3>

<p>Nun verhält es sich so dass Traits selbst Typparameter enthalten
können. Wozu das nützlich ist, will ich am folgenden Beispiel
erklären. Vorzulegen sei ein Trait, dessen Methode die Reihenfolge der
Elemente eines sequentiellen Typs umdreht. Man könnte diesen Trait
so formulieren:

<pre class="rust ibox">
trait Rev {
    fn rev(self) -&gt; Self;
}

impl Rev for [i32; 2] {
    fn rev(self) -&gt; Self {[self[1], self[0]]}
}

fn main() {
    let a = [1, 2];
    println!("{:?}", a.rev());
}
</pre>

<p>Soweit mag das in Ordnung sein. Gleichwohl stoßen wir umgehend
auf eine Komplikation. Nämlich ist der Trait nicht für Leihgaben
implementierbar, da die Rückgabe aufgrund der Signatur ebenfalls
eine Leihgabe sein muss. Die Lebenszeit des erzeugten Wertes, zu
welchem diese Leihgabe bestehen soll, wäre über die Funktion hinaus
auszudehnen, was nicht machbar ist. Das heißt, wir würden gerne
haben:

<pre class="ibox rust">
impl Rev for &amp;[i32; 2] {
    fn rev(self) -&gt; Self {&amp;[self[1], self[0]]}
}
</pre>

<p>Diese Funktion ist jedoch nicht kompilierbar. Stattdessen bedarf
es einer Besitzübertragung des erzeugten Wertes von der aufgerufenen
an die aufrufende Funktion. Dafür müssen wir zwangsläufig die
Signatur ändern. Erreichbar ist dies durch Parametrisierung des
Traits über den Rückgabetyp:

<pre class="ibox rust">
trait Rev&lt;Return&gt; {
    fn rev(self) -&gt; Return;
}

impl Rev&lt;[i32; 2]&gt; for &amp;[i32; 2] {
    fn rev(self) -&gt; [i32; 2] {[self[1], self[0]]}
}

fn main() {
    let a = &amp;[1, 2];
    println!("{:?}", &amp;a.rev());
}
</pre>

<p>Nun gestattet die Parametrisierung das Hinzufügen einer jeweiligen
Implementierung zu weiteren Rückgabetypen. Bspw. darf man
hinzufügen:

<pre class="rust ibox">
impl Rev&lt;(i32, i32)&gt; for &amp;[i32; 2] {
    fn rev(self) -&gt; (i32, i32) {(self[1], self[0])}
}
</pre>

<p>Der Aufruf braucht infolge allerdings die qualifizierte
Angabe der Methode, da nicht mehr eindeutig abgeleitet werden kann,
mit welchem Typ <code>Return</code> zu belegen ist. Das heißt, man
muss den Aufruf <code>a.rev()</code> gegen
<code>Rev::&lt;[i32;&nbsp;2]&gt;::rev(a)</code> ersetzen.

<p>Auf der anderen Seite möchte man unter Umständen die Beschränkung
haben, dass dem sequentiellen Typ genau ein Typ <code>Return</code>
zugeordnet ist. Um diese Beschränkung zum Ausdruck bringen zu können,
wurde das Konzept der <i>assoziierten Typen</i> in die
Programmiersprache eingebracht. Zur Angabe des assoziierten Typs wird
der Typparameter in den Trait geschoben und dort mit dem Schlüsselwort
<code>type</code> eingeleitet.

<pre class="rust ibox">
trait Rev {
    type Return;
    fn rev(self) -&gt; Self::Return;
}

impl Rev for &amp;[i32; 2] {
    type Return = [i32; 2];
    fn rev(self) -&gt; [i32; 2] {[self[1], self[0]]}
}

fn main() {
    let a = &amp;[1, 2];
    println!("{:?}", &amp;a.rev());
}
</pre>

<p>Der aufgezeigte Weg verdeutlicht die Entbehrlichkeit assoziierter
Typen bezüglich dieser Art von Problemstellung. Sie dienen zur
Klarstellung der eindeutigen Zuordnung, bringen abseits dieser
Verschärfung aber zunächst keine neue Funktionalität.

<p>Aufgrund der eindeutigen Zuordnung kann man allerdings des Weiteren
zu jedem Typ die assoziierten Typen erhalten, was bei der Schaffung
fortgeschrittener generischer Konstruktionen dienlich ist. Ist
<code>Rev</code> für einen Typ <code>X</code> mit
<code>Return&nbsp;=&nbsp;Y</code> implementiert, gilt

<pre class="rust indent">
Y = &lt;X as Rev&gt;::Return.
</pre>


<h2 id="Technik">Technische Umsetzung</h2>

<h3 id="Konzept">Das Konzept der Polymorphie</h3>

<p>Eine Funktion zur elementweisen Addition zweier Arrays lässt sich
ohne Schwierigkeiten umsetzen:
<pre class="rust ibox">
fn add(a: &amp;[i32], b: &amp;[i32]) -&gt; Vec&lt;i32&gt; {
    let mut acc: Vec&lt;i32&gt; = Vec::with_capacity(a.len());
    for i in 0..a.len() {
        acc.push(a[i] + b[i]);
    }
    acc
}

fn main() {
    let a = vec![1, 2, 3, 4];
    println!("{:?}", add(&amp;a,&amp;a));
}
</pre>

<p>Die Elemente haben hier nun allerdings 32&nbsp;Bit große Ganzzahlen
als festen Datentyp. Man spricht von einer <i>monomorphen</i>
Typisierung. Die Funktion würde aber auch für andere Datentypen
wie <code>f64</code> einen Sinn ergeben. Man könnte nun auf die Idee
kommen, die Funktion für die gewünschten Datentypen nochmals zu
implementieren. Es kann doch aber sein, dass die Anzahl der Datentypen
sehr groß oder nicht von vornherein bekannt ist.

<p>Die Lösung dieses Problems besteht in der <i>polymorphen</i>
Umsetzung der Funktion. Hierbei abstrahiert man das wiederkehrende
Muster von den konkreten Datentypen. Nun stellt sich dabei aber die
Frage, wie sich dies am besten bewerkstelligen lässt. Der Compiler
weiß ja bisher nur wie er monomorphe Funktionen kompilieren muss.

<p>Zunächst müssen wir Klarheit darüber bekommen was die Polymorphie
für die Funktion bedeutet. Was ändert sich an der Funktion für
unterschiedliche Datentypen und was bleibt gleich? Ändern muss man
die Addition, und dann auch noch die Operationen zum Verschieben
der Zahlen im Speicher, denn diese sind ja von der Speichergröße des
Datentyps abhängig. Nimmt man etwas Abstand, dann sieht man ein,
dass Veränderungen nur überall dort zwangsweise vorkommen müssen,
wo Operationen von den unterschiedlichen Eigenschaften der Datentypen
abhängig sind.

<p>Die Funktion sollte aber auch möglichst wenig über die Datentypen
wissen. Eigentlich muss die Funktion nur darüber Bescheid wissen,
dass für den gewünschten Datentyp die Addition definiert ist.
Datentypen mit dieser Eigenschaft fassen wir zu einer
<i>Typklasse</i> <code>Add</code> zusammen.

<p>Die Funktion kann man nun polymorph mit einer gebundenen
Typvariable schreiben, die man nennen kann wie man möchte.
Nennen wir sie <code>T</code>. Die Funktion ließe sich dann
so formulieren:

<pre class="rust ibox">
fn add&lt;T: Add&gt;(a: &amp;[T], b: &amp;[T]) -&gt; Vec&lt;T&gt; {
    ...
}
</pre>

<p>Die vollständige Angabe ist in Rust die folgende:
<pre class="rust ibox">
use std::ops::Add;

fn add&lt;T: Copy + Add&lt;Output=T&gt;&gt;(a: &amp;[T], b: &amp;[T]) -&gt; Vec&lt;T&gt; {
    let mut acc: Vec&lt;T&gt; = Vec::with_capacity(a.len());
    for i in 0..a.len() {
        acc.push(a[i] + b[i]);
    }
    acc
}
</pre>

<p>In Rust wird eine Typklasse als <i>Trait</i> bezeichnet. Jeder
Trait macht bestimmte Aussagen über die Eigenschaften eines Datentyps.
Daher entstammt auch die Bezeichnung Trait.

<h3 id="Monomorphisierung">Monomorphisierung</h3>

<p>Was fängt der Compiler nun damit an? Nun ja, das ist nicht schwer
zu verstehen. Der Compiler prüft bei der Anwendung der Funktion einfach
ob der dortige Datentyp in den Typklassen <code>Add</code> und
<code>Copy</code> liegt, entnimmt dann die somit bekannten
Eigenschaften des Datentyps und ist damit befähigt, die unbekannten
Operationen gegen ihre konkreten zu ersetzen. Dieser Prozess wird als
<i>Monomorphisierung</i> bezeichnet.

<p>Man kann sich die polymorphe Funktion auch als Schablone vorstellen,
in der für die Typvariable <code>T</code> der gewünschte Datentyp
eingesetzt wird. Danach liegt die Funktion ja in monomorpher Form vor,
so dass sie auf ganz gewöhnliche Art vom Compiler kompiliert werden
kann.

<h3 id="Laufzeit">Laufzeit-Polymorphie</h3>

<p>Die bisherige Umsetzung von Polymorphie enthält noch einen kleinen
Schönheitsfehler. Angenommen, die Datentypen sind zahlreich und die
Implementation ist relativ groß, dann ist das Programm im Quelltext
zwar polymorph, bei der Monomorphisierung bläht es sich jedoch in
ein großes Maschinenprogramm auf. Außerdem kann ja auch die Situation
bestehen dass Datentypen nicht im Vorhinein bekannt sind. Dies führt
dazu dass die Funktionen über die Programm-Bibliothek hinaus
polymorph vorliegen müssen und bei der Anwendung jeweils
monomorphisiert werden. Zwar erlaubt die Monomorphisierung viele
Optimierungen, jedoch führt dies auch zu langen Kompilierzeiten,
da separate Kompilation höchstens teilweise möglich ist.

<p>Die alternative Umsetzung ist eine ganz einfache Überlegung:
Wir halten die Funktion einfach polymorph. Was muss man dafür
genau tun? Nun, es gibt diese Operationen die von den Eigenschaften
des Argument-Datentyps abhängig sind. <i>Wenn die Funktion denn zur
Laufzeit polymorph vorliegen soll, dann muss auf diese Operationen
über Funktionenzeiger zugegriffen werden</i>. Der Funktionenzeiger
muss zur Laufzeit irgendwie an die Funktion übergeben werden. Dies
lässt sich günstig bewerkstelligen, indem die Funktionenzeiger
in einer Tabelle gespeichert werden, welche mit an die Funktion
übergeben wird. Solche Tabellen werden als <i>dispatch tables</i>
oder <i>virtual method tables</i> bezeichnet.

<p>Beim Dispatch gibt es nun zwei Ansätze. Der erste Ansatz ist der
homogene Dispatch. Hierbei werden zusätzlich Informationen über die
Speichergröße gespeichert um einfache Kopien und Verschiebungen
zu gestatten. Der zweite Ansatz ist der heterogene Dispatch. Hierbei
findet eine Indirektion der Daten über einen Zeiger statt. Heterogener
Dispatch hat den den Vorteil dass er flexibler ist, indem er Daten
von wechselndem Datentyp ermöglicht. Z.&nbsp;B. lässt sich damit ein
Array formulieren, in welchem jedes Element von einem anderen
Datentyp ist.

<p>Die Umsetzung von automatischem homogenen Dispatch gilt im
Zusammenspiel mit dem Monomorphisierungs-System als schwierig.
Um sich hier aus der Affäre zu ziehen, entschied man sich
für kontrollierten heterogenen Dispatch. Hierzu wird in Rust ein Wert
als Zeigerpaar gespeichert, wobei der erste Zeiger auf die Daten
zeigt, und der zweite Zeiger auf die Dispatch-Tabelle. Für solche
Zeigerpaare ist auch die Sprechweise <i>fat pointer</i>
(engl. dicker Zeiger) geläufig.

<p>Der kontrollierte Dispatch manifestiert sich nun aber auch im
Typsystem. Die polymorphe Funktion soll ja eine feste Schnittstelle
besitzen, auf die man zur Laufzeit zugreifen kann. Da diese
Schnittstelle nicht automatisiert erzeugt wird, muss man sich darum
kümmern wie diese aussehen soll. Dafür braucht man zwar nicht bis auf
die Binärschnittstelle runtergehen, das sollte der Compiler schon
erledigen, allerdings müssen wir in der Schnittstelle eine monomorphe
Typisierung vorgaukeln.

<p>Gegeben ist also zunächst die polymorphe Typisierung, wobei
die Typvariable in einer angegebenen Typklasse liegt. Gebraucht wird
aber ein monomorpher Typ, der diese Typklasse zur Laufzeit umsetzt.
Diese Abbildung erlaubt der Operator <code>dyn</code>, welcher
nur in Verbindung mit einem Zeigertyp vorkommt, also als
<code>Pointer&lt;dyn Trait&gt;</code> angeben wird. Werte dieses
Typs werden in Rust zuweilen auch als Trait-Objekte bezeichnet.
Speziell sind das z.&nbsp;B. <code>Box&lt;dyn Trait&gt;</code>
und <code>Rc&lt;dyn Trait&gt;</code>, außerdem auch
<code>&amp;dyn Trait</code> und <code>&amp;mut dyn Trait</code>.

<p>Betrachten wir z.&nbsp;B. eine polymorphe Funktion zur Umkehrung
der Reihenfolge eines Arrays:

<pre class="rust ibox">
fn reverse&lt;T&gt;(a: &amp;mut [T]){
    let n = a.len();
    for i in 0..n/2 {a.swap(i, n-1-i);}
}

fn main(){
    let mut a: Vec&lt;i32&gt; = vec![1, 2, 3, 4];
    reverse(&amp;mut a);
    println!("{:?}", a);
}
</pre>

<p>Die Typvariable der Funktion <code>reverse</code> ist nicht
durch Traits eingeschränkt. Der Trait <code>Any</code> ermöglicht
eine Laufzeitdarstellung dieses Umstandes. Es folgt die
Laufzeit-polymorphe Implementation:

<pre class="rust ibox">
use std::any::Any;

fn reverse(a: &amp;mut [&amp;dyn Any]) {
    let n = a.len();
    for i in 0..n/2 {
        a.swap(i, n-1-i);
    }
}

fn downcast(a: &amp;[&amp;dyn Any]) -&gt; Vec&lt;i32&gt; {
    a.iter().map(|x| *(*x).downcast_ref::&lt;i32&gt;().unwrap()).collect()
}

fn main() {
    let mut a: Vec&lt;&amp;dyn Any&gt; = vec![&amp;1, &amp;2, &amp;3, &amp;4];
    reverse(&amp;mut a);
    println!("{:?}", downcast(&amp;a));
}
</pre>

<p>Der hierbei vorkommende Downcast ist allerdings kein gutes Zeichen.
Downcasts entstehen dadurch, dass der durch <code>dyn</code>
erzeugte Type erasure rückgängig gemacht werden muss. Hierbei kann
man aber Fehler machen, da Type erasure maßgeblich einen Teil der
Typisierung entfernt. Und bei <code>Any</code> ist das nicht nur
ein Teil, sondern die gesamte Typisierung. Downcasts laufen also
der Sicherheit zuwider, die uns das Typsystem eigentlich bieten soll.

<p>Zur Umgehung dieses Problems kann man sämtliche von dem polymorphen
Code abhängige Programmteile selbst polymorph gestalten:

<pre class="rust ibox">
use std::fmt::{Display, Debug};

trait Object: Display + Debug {}
impl&lt;T: Display + Debug&gt; Object for T {}

fn reverse(a: &amp;mut [&amp;dyn Object]) {
    let n = a.len();
    for i in 0..n/2 {
        a.swap(i, n-1-i);
    }
}

fn main() {
    let mut a: Vec&lt;&amp;dyn Object&gt; = vec![&amp;1, &amp;2, &amp;3, &amp;4];
    reverse(&amp;mut a);
    println!("{:?}", a);
}
</pre>

<p>Der missliebige Downcast ist nun verschwunden.

<h3 id="Laufzeit-allg">Laufzeit-Polymorphie allgemein</h3>

<p>Betrachten wir einmal den folgenden Algorithmus zur Berechnung
von Potenzen mit natürlichem Exponenten.

<pre class="rust ibox">
fn pow(x: i32, n: u32) -&gt; i32 {
    let mut acc = 1;
    for _ in 0..n {acc = acc*x;}
    acc
}

fn main() {
    println!("{}", pow(2,10));
}
</pre>

<p>Eigentlich ist diese Berechnung für jede Verknüpfung möglich, die
mit dem zugrundeliegenden Definitionsbereich ein Monoid bildet. Das
Monoid lässt sich als ein Trait darstellen, welcher das
neutrale Element (auch »Einselement« genannt)
und die multiplikativ geschriebene Verknüpfung enthält.
Der abstrakte Algorithmus nimmt dann die folgende Gestalt an:

<pre class="rust ibox">
trait Monoid {
    fn one() -&gt; Self;
    fn mul(&amp;self, x: &amp;Self) -&gt; Self;
}

fn pow&lt;T: Monoid&gt;(x: T, n: u32) -&gt; T {
    let mut acc = T::one();
    for _ in 0..n {acc = acc.mul(&amp;x);}
    acc
}

impl Monoid for i32 {
    fn one() -&gt; Self {1}
    fn mul(&amp;self, x: &amp;Self) -&gt; Self {self*x}
}
</pre>

<p>Nun ist der Compiler bisher (Stand Mai 2020) leider nicht zur
Erzeugung eines Laufzeit-polymorphen Maschinenprogramms in der Lage.
Die notwendigen Mittel zur Beschreibung dessen, was wir gerne haben
wollten, bietet Rust allerdings schon.

<p>Zunächst müssen wir hier zur Einsicht kommen, dass
<code>Monoid</code> für <code>dyn</code> unzugänglich ist.
Man sagt, <code>Monoid</code> sei nicht <i>object safe</i>.
Der Grund dafür liegt im expliziten Vorkommen von <code>Self</code>.
Die Aufgabe von <code>dyn</code> ist ja nämlich Type erasure, und da
darf dann der Typ nicht mehr explizit vorkommen, sonst ergibt das
nicht so richtig einen Sinn.

<p>Eigentlich, so ist es am Algorithmus ersichtlich, wollen wir
die Dispatch-Tabelle auch nicht fest an das Objekt binden, sondern
in einer Variable speichern, welche den Platz der Typvariable
<code>T</code> einnimmt. Zur Erreichung von Polymorphie muss das
Maschinenprogramm auch die konkreten Eigenschaften des Typs vergessen
haben. Ein sicheres Mittel zur Bewerkstelligung dieser Forderung
ist <code>dyn Any</code>.

<p>Zunächst die Struktur der Dispatch-Tabelle:
<pre class="rust ibox">
struct MonoidPtr(Box&lt;dyn std::any::Any&gt;);

struct MonoidType {
    one: &amp;'static dyn Fn() -&gt; MonoidPtr,
    mul: &amp;'static dyn Fn(&amp;MonoidPtr,&amp;MonoidPtr) -&gt; MonoidPtr
}
</pre>

<p>Die Dispatch-Tabelle nun für <code>Monoid</code> implementieren:
<pre class="rust ibox">
fn type_monoid&lt;T: Monoid + 'static&gt;() -&gt; MonoidType {
    let one = &amp;|| -&gt; MonoidPtr {MonoidPtr(Box::new(T::one()))};
    let mul = &amp;|a: &amp;MonoidPtr, b: &amp;MonoidPtr| -&gt; MonoidPtr {
        if let Some(a) = a.0.downcast_ref::&lt;T&gt;() {
            if let Some(b) = b.0.downcast_ref::&lt;T&gt;() {
                return MonoidPtr(Box::new(a.mul(b)));
            }
        }
        unreachable!();
    };
    MonoidType {one, mul}
}
</pre>

<p>Nun der explizit Laufzeit-polymorphe Algorithmus:
<pre class="rust ibox">
fn pow_intern(t: &amp;MonoidType, x: &amp;MonoidPtr, n: u32) -&gt; MonoidPtr {
    let mut acc = (t.one)();
    for _ in 0..n {acc = (t.mul)(&amp;acc, &amp;x);}
    acc
}
</pre>

<p>Schließlich noch eine typsichere Einhüllung des Algorithmus:
<pre class="rust ibox">
fn pow&lt;T: Monoid + 'static&gt;(x: T, n: u32) -&gt; T {
    let t = type_monoid::&lt;T&gt;();
    let px = MonoidPtr(Box::new(x));
    match pow_intern(&amp;t, &amp;px, n).0.downcast::&lt;T&gt;() {
        Ok(y) =&gt; *y,
        _ =&gt;  unreachable!()
    }
}
</pre>

<p>Pedantische Leser mögen nun noch fragen, was es mit dem
Trait-Bound <code>'static</code> auf sich hat. Dieser schließt
Lifetime-Variablen aus und ermöglicht dadurch die Benutzung von
<code>Any</code>. Es verhält sich nämlich so, dass <code>Any</code> für
jeden Datentyp eine Typ-Identifikation bekommt, bzw. bekommen muss,
diese jedoch für Lifetimes nicht erzeugt werden kann.

<p>Letztendlich haben wir nun echte Laufzeit-Polymorphie, mussten
dafür aber das Typsystem kaputtbrechen. Dies hat wieder den faulen
Beigeschmack, dass der Compiler für die interne Implementation
keine vollständige Typprüfung mehr durchführen kann und bei den
Downcasts unnötige if-Anweisungen entstehen.

<h2 id="Laufzeit-polymorphe-Container">Laufzeit-polymorphe Container</h2>

<p>Beim Schreiben generischer Programme tut sich oft das Problem des
<i>Code Bloats</i> auf. Das soll am Beispiel von <code>Vec</code>, dem
Datentyp dynamischer Felder, verdeutlicht werden. Weil der Compiler
bei der Monomorphisierung von <code>Vec</code> für unterschiedliche
Typen <code>A</code>,&nbsp;<code>B</code>,&nbsp;<code>C</code>
jeweils neuen optimierten Programmcode zu <code>Vec&lt;A&gt;</code>,
<code>Vec&lt;B&gt;</code>, <code>Vec&lt;C&gt;</code>
erzeugt, können generische Programme zu großen Binärdateien führen.

<p>Allerdings muss dies nicht bei jeder Funktionalität
zwangsläufig geschehen. Sind die Funktionen recht kurz,
könnte durch die inline-Optimierungen nach der Monomorphisierung
sogar kürzerer Maschinencode entstehen, oder moderat aufgeblähter,
aber dafür hocheffizienter Maschinencode.

<p>Zur Lösung des Problems bieten sich vier Ansätze an:
<ol>
<li>Die Monomorphisierung wird schlicht verhindert,
  indem mit polymorphen Zeigern gearbeitet wird.
<li>Die Implementation ist intern polymorph gestaltet mit
  <code>str::ptr::copy</code>, eventuell mit
  ein paar Spezialisierungen zur Optimierung.
<li>Der Compiler erzeugt bei der Monomorphisierung eine
Zwischenrepräsentation, die z.&nbsp;B. nur <code>str::ptr::copy</code>
verwendet und erkennt dabei, dass Funktionen wiederverwendet werden
können.
<li>Die Monomorphisierung findet zur Laufzeit statt. Das bietet sich
  bei Rust nicht an, weil dafür eine Laufzeitumgebung
  benötigt wird, die unter Umständen groß und kompliziert ausfallen kann.
</ol>
<p>Davon wollen wir uns auf 1. beschränken.
Zunächst ist denkbar, dass der Compiler schon bei
<code>Vec&lt;Box&lt;T&gt;&gt;</code> für unterschiedliche Typen
<code>T</code> bei der Monomorphisierung die gleichen Funktionen
erzeugt und wiederverwendet. Ein guter Compiler sollte das auf jeden
Fall bewerkstelligen. Um das zu erzwingen, können aber Trait-Pointer
<code>Box&lt;dyn A&gt;</code> desselben Traits <code>A</code> benutzt
werden. Oder aber man verwendet <code>Box&lt;dyn&nbsp;Any&gt;</code>.

<p>Wir wollen den allgemeinen Ansatz mit <code>Box&lt;dyn&nbsp;Any&gt;</code>
verfolgen. Rust bietet uns nun die Mittel, um den polymorphen Code
in ein monomorphisiertes Interface einzuhüllen. Das gestaltet sich wie
folgt:

<pre class="rust ibox">
pub mod polyvec {
    use std::any::Any;
    use std::marker::PhantomData;
    pub struct PolyVec&lt;T&gt; {
        v: Vec&lt;Box&lt;dyn Any&gt;&gt;,
        _marker: PhantomData&lt;T&gt;
    }
    impl&lt;T: 'static&gt; PolyVec&lt;T&gt; {
        pub fn new() -&gt; Self {
            Self {v: Vec::new(), _marker: PhantomData}
        }
        pub fn push(&amp;mut self, x: T) {
            self.v.push(Box::new(x));
        }
        pub fn pop(&amp;mut self) -&gt; Option&lt;T&gt; {
            match self.v.pop() {
                None =&gt; None,
                Some(x) =&gt; {
                    if let Ok(x) = x.downcast::&lt;T&gt;() {
                        Some(*x)
                    } else {
                        unreachable!()
                    }
                }
            }
        }
    }
}

use polyvec::PolyVec;

struct LargeChunk {}

fn main() {
    let mut v: PolyVec&lt;LargeChunk&gt; = PolyVec::new();
    v.push(LargeChunk {});
    v.push(LargeChunk {});
}
</pre>

<p>Interessant ist, dass <code>PolyVec</code> eine Teilmenge
der Operationen von <code>Vec</code> unterstützt und dabei nicht
von <code>Vec</code> zu unterscheiden ist.
Um diesen Umstand auszunutzen, können wir einen abstrakten Datentyp
als Typalias formulieren:

<pre class="rust ibox">
type VecADT = Vec;
// type VecADT = PolyVec;
</pre>

<p>Aber Vorsicht: hierbei handelt es sich nicht um einen echten
abstrakten Datentyp, sondern um eine Typvariable.

<p>Man kann nun zu jeder Zeit zwischen <code>Vec</code>
und <code>PolyVec</code> umschalten, um zu sehen wie sich
die Speichergröße der erzeugten Binärdatei verändert.

<p>Da <code>PolyVec</code> mit <code>Box</code> Indirektionen und
zusätzliche Speicherallokationen erzeugt, ist dieser Container natürlich
nicht für laufzeitkritische Unterprogramme geeignet. Wie immer gilt,
dass zur Entscheidungsfindung konkrete Messungen hilfreich sein können.

</body>
</html>

