<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Rust-Buch</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/rust.js"></script>
</head>
<body>

<p>&uparrow;<a href="Rust.htm">Programmieren in Rust</a>
<h1>Grundbegriffe</h1>

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Erstes-Programm">Das erste Programm</a>
<li><a href="#Ausdruecke">Ausdrücke</a>
  <ol>
  <li><a href="#Arithmetik">Arithmetik</a>
  <li><a href="#Variablen">Variablen</a>
  <li><a href="#Typen">Typen</a>
  <li><a href="#Bloecke">Blöcke</a>
  <li><a href="#Ueberschattung">Überschattung</a>
  </ol>
<li><a href="#Kontrollfluss">Kontrollfluss</a>
  <ol>
  <li><a href="#Funktionen">Funktionen</a>
  <li><a href="#Verzweigungen">Verzweigungen</a>
  <li><a href="#Schleifen">Schleifen</a>
  </ol>
<li><a href="#Felder">Felder</a>
  <ol>
  <li><a href="#Felder-fester-Laenge">Felder fester Länge</a>
  <li><a href="#Ausschnitte">Ausschnitte von Feldern</a>
  <li><a href="#Dynamische-Felder">Dynamische Felder</a>
  <li><a href="#Alleinige-Referenzen">Alleinige Referenzen auf ein Feld</a>
  <li><a href="#Nochmals-Ausschnitte">Nochmals Ausschnitte</a>
  <li><a href="#Stapelspeicher">Stapelspeicher</a>
  </ol>
<li><a href="#Eingaben">Eingaben</a>
</ol>

<h2 id="Erstes-Programm">Das erste Programm</h2>

<p>Es ist üblich, als erstes ein Programm zu schreiben, welches
nichts weiter tut als »Hallo Welt!« auf dem Terminal auszugeben.
Es folgt das obligatorische Hallo-Welt-Programm:
<pre class="rust ibox">
fn main() {
    println!("Hallo Welt!");
}
</pre>

<p>Wie aus diesem Quelltext ein ausführbares Programm gemacht wird,
steht in ›<a href="Compiler.htm">Compiler und Erstellungswerkzeuge</a>‹
erläutert.

<p>Der Befehl <code>println</code> (print line) sorgt für die
Ausgabe der Zeichenkette in den Anführungszeichen.

<p>Das Schlüsselwort <code>fn</code> steht für <i>function</i> und
leitet die Definition einer Funktion ein. In Rust versteht man unter
einer Funktion jegliche Art von Prozedur (Unterprogramm), &ndash; das
betrifft auch solche Prozeduren die keine Funktionen im mathematischen
Sinn darstellen. Der Bezeichner <code>main</code> deutet an, dass die
Hauptprozedur des Programms definiert wird. Jedes ausführbare Programm
muss diese Hauptprozedur enthalten. Das kürzeste ausführbare Programm
ist demnach:

<pre class="rust ibox">
fn main() {}
</pre>


<h2 id="Ausdruecke">Ausdrücke</h2>

<h3 id="Arithmetik">Arithmetik</h3>

<p>Das Wesen von Computern liegt in gewisser Hinsicht in ihrer Fähigkeit,
Berechnungen schnell ausführen zu können. Aus diesem Grund erscheint
es erwartungsgemäß, wenn die Programmiersprache in bequemer Weise
die Angabe einer Berechnung ermöglicht. Arithmetische Ausdrücke
schreibt man wie gewohnt. Das Programm »Gib den Wert des Ausdrucks
<code>1+2</code> aus« geht so:
<pre class="rust ibox">
fn main() {
    println!("{}", 1 + 2);
}
</pre>

<p>Der Befehl <code>println</code> nimmt hier die Zeichenkette
<code>"{}"</code> als Schablone und ersetzt das geschweifte Klammerpaar
gegen den Wert des Ausdrucks. Die resultierende Zeichenkette wird dann
ausgegeben, woraufhin ein Zeilenumbruch folgt.

<p>Zu den Grundrechenarten liegen Operatoren vor:

<table class="bt indent">
<tr><th>Operation <th>Erklärung
<tr><td style="text-align: center"><code>x+y</code> <td>Addition
<tr><td style="text-align: center"><code>x-y</code> <td>Subtraktion
<tr><td style="text-align: center"><code>x*y</code> <td>Multiplikation
<tr><td style="text-align: center"><code>x/y</code> <td>Division
<tr><td style="text-align: center"><code>x%y</code> <td>Rest-Bildung
<tr><td style="text-align: center"><code>-x</code> <td>Negation
</table>

<p>Die Division von ganzen Zahlen hat ein ganzzahliges Ergebnis.
Ist der Zähler nichtnegativ und der Nenner positiv, ist der Quotient
der abgerundete Wert. Das folgende Programm zeigt eine
Division mit Rest.

<pre class="rust ibox">
fn main() {
    println!("{}/{} = {} Rest {}", 17, 5, 17/5, 17%5);
}
</pre>

<p>Die Ausgabe:

<pre class="ibox">
17/5 = 3 Rest 2
</pre>

<h3 id="Variablen">Variablen</h3>

<p>Im Programm zur Division mit Rest wurden mehrmals
die gleichen Zahlen wiederholt. Wollte man den Nenner oder
den Zähler ändern, müsste man dies an mehreren Stellen tun.
Es wäre doch vorteilhaft, wenn wir einen Wert an eine Variable
binden könnten, womit man den Wert nur noch an einer
Stelle ändern bräuchte.

<p>Das Schlüsselwort <code>let</code> leitet eine solche
Bindung einer Variablen an einen Wert ein. Wir dürfen
schreiben:

<pre class="rust ibox">
fn main() {
    let x = 17;
    let y = 5;
    println!("{}/{} = {} Rest {}", x, y, x/y, x%y);
}
</pre>

<p>Die Bindungen sind auch in der kompakten Form

<pre class="rust ibox">
let (x, y) = (17, 5);
</pre>

<p>möglich. Man darf dies als ein Abgleich von Tupeln
verstehen. In der Mathematik ist definiert:

<pre class="indent">
(x, y) = (a, b) gelte genau dann, wenn x = a und y = b.
</pre>

<h3 id="Typen">Typen</h3>

<p>In der Sprache Rust besitzt jeder Wert und jede Variable einen
<i>Datentyp</i>, kurz <i>Typ</i>. Um auszudrücken dass die Variable
<code>v</code> vom Typ <code>T</code> ist, schreibt man
<code>v:&nbsp;T</code>. Beispielsweise sagt <code>x:&nbsp;i32</code> aus, dass
<code>x</code> eine Ganzzahl sein soll,
welche binär in einer 32&nbsp;Bit langen Speicherzelle gespeichert
werden kann. Alle Berechnungen müssen den Regeln des
<i>Typsystems</i> genügen. So ist es nicht erlaubt, Zahlen
mit Farben zu verrechnen. Dies ergibt keinen Sinn, und der Compiler
verweigert sich auch, ein solches Programm zu übersetzen.

<p>Der Typ einer Variablen muss nicht unbedingt angegeben sein, sofern
sich der Compiler in der Lage sieht, diesen Typ aus dem Zusammenhang
abzuleiten. Der Vorgang des Ableitens wird als <i>Typinferenz</i>
bezeichnet, und davon wurde im Programm zur Division mit Rest auch
bereits Gebrauch gemacht. Vollständig typisiert schaut
das Programm so aus:

<pre class="rust ibox">
fn main() {
    let x: i32 = 17;
    let y: i32 = 5;
    println!("{}/{} = {} Rest {}", x, y, x/y, x%y);
}
</pre>

<p>Typen werden in Rust eigentlich mit einem großen Anfangsbuchstaben
geschrieben. Bei den <i>primitiven Datentypen</i> wurde da
jedoch eine Ausnahme gemacht. Von diesen primitiven Datentypen
gibt es allerdings nur eine Hand voll. Sie sind in der folgenden
Tabelle aufgeführt.

<table class="bt">
<tr>
<th>Typ
<th>Englisch
<th>Deutsch
<tr>
<td><code>u8, u16, u32, u64, u128</code>
<td>unsigned integer of size 8, 16, 32, 64, 128 bit
<td>vorzeichenlose Ganzzahl der Größe 8, 16, 64, 128 Bit
<tr>
<td><code>i8, i16, i32, i64, i128</code>
<td>integer of size 8, 16, 32, 64, 128 bit
<td>Ganzzahl der Größe 8, 16, 32, 64, 128 Bit
<tr>
<td><code>usize</code>
<td>unsigned integer of address size (32&nbsp;bit or 64&nbsp;bit)
<td>vorzeichenlose Ganzzahl der Adressgröße (32&nbsp;Bit oder 64&nbsp;Bit)
<tr>
<td><code>isize</code>
<td>integer of address size (32&nbsp;bit or 64&nbsp;bit)
<td>Ganzzahl der Adressgröße (32&nbsp;Bit oder 64&nbsp;Bit)
<tr>
<td><code>f32, f64</code>
<td>floating point number of size 32&nbsp;bit, 64&nbsp;bit
<td>Fließkommazahl der Größe 32&nbsp;Bit, 64&nbsp;Bit
<tr>
<td><code>bool</code>
<td>boolean, i.e. logical values
<td>boolesch, d.&nbsp;h. logische Werte
<tr>
<td><code>str</code>
<td>string
<td>Zeichenkette
</table>

<h3 id="Bloecke">Blöcke</h3>

<p>Überall dort wo ein Ausdruck oder eine Anweisung stehen darf, darf
auch ein von geschweiften Klammern umfasster Block vorkommen.
Ein Block schränkt das Vorhandensein von lokal definierten Variablen
auf einen kleineren Bereich ein. Formal gesprochen ist mit dem Block
ein lexikalischer Bereich, engl. <i>lexical scope</i>, verbunden.

<p>Betrachten wir folgendes Programm:
<pre class="rust ibox">
fn main() {
    {
        let x = 1;
        println!("{}", x);
    }
    println!("{}", x);
}
</pre>

<p>Dieses Programm ist nicht korrekt, denn außerhalb des
Blocks kann auf die Variable <code>x</code> nicht mehr
zugegriffen werden.

<p>Die Sprache Rust ist, wie die Sprachen der ML-Familie, eine
ausdrucksorientierte. So stellt bestimmte Syntax einen Ausdruck
dar, die in anderen Sprachen lediglich eine Anweisung bildet.
Dies trifft auch auf Blöcke zu.

<p>Nun ist dem Wert eines Ausdrucks aber immer ein Typ zugeordnet.
Welchen Typ besitzt denn ein Block dort, wo kein Wert erwartet wird?
Dies wurde auf mathematisch besonders reine Art gelöst, indem ein
wertloser Ausdruck den <i>Einheitstyp</i>, engl. <i>unit type</i>,
bekommt. In Rust ist dieser Typ als leeres Tupel <code>()</code>
kodiert. Dieser Typ enthält einen einzigen informationslosen Wert,
den leeren Tupelwert <code>()</code>.

<p>Bspw. erzeugt das Programm
<pre class="rust ibox">
fn main() {
    println!("{:?}", {
        println!("Die Ordnung");
        println!("der Dinge");
    });
}
</pre>

<p>die Ausgabe:

<pre class="ibox">
Die Ordnung
der Dinge
()
</pre>

<p>Einen Wert besitzt ein Block dann, wenn der letzte Teil
des Blocks ein Ausdruck ist. Der Wert des Blocks ist dann
erwartungsgemäß der Wert dieses letzten Ausdrucks.
Zu beachten ist hierbei, den letzten Ausdruck nicht mit einem
Semikolon abzuschließen.

<p>Betrachten wir dazu die Auswertung eines Polynoms vierten Grades:

<pre class="rust ibox">
let (a0, a1, a2, a3, a4) = (5, 4, 3, 2, 1);
let x = 10;
let y = a0 + a1*x + a2*x*x + a3*x*x*x + a4*x*x*x*x;
println!("{}", y);
</pre>

<p>In der Berechnung stecken vier Additionen und zehn Multiplikationen
drin. In kritischen Situationen kostet jede Berechnung Zeit
und Energie. Es wäre daher schön, wenn wir irgendwie Operationen
einsparen könnten.

<p>Einführung von Hilfsvariablen reduziert die Anzahl der
Multiplikationen auf sieben:

<pre class="rust ibox">
let (a0, a1, a2, a3, a4) = (5, 4, 3, 2, 1);
let x = 10;
let y = {
    let x2 = x*x;
    let x3 = x2*x;
    let x4 = x2*x2;
    a0 + a1*x + a2*x2 + a3*x3 + a4*x4
};
println!("{}", y);
</pre>

<p>Weil die Hilfsvariablen in einem Block definiert wurden,
sind sie auf diesen beschränkt. Außerhalb des Blocks sind
die Variablen nicht mehr sichtbar.

<p>Manchmal gewährt die Mathematik allerdings noch wesentlich
umfangreichere Einsparungen. Die Überführung ins Horner-Schema
reduziert hier die Anzahl der Multiplikationen auf lediglich vier:

<pre class="rust ibox">
let (a0, a1, a2, a3, a4) = (5, 4, 3, 2, 1);
let x = 10;
let y = a0 + x*(a1 + x*(a2 + x*(a3 + a4*x)));
println!("{}", y);
</pre>

<h3 id="Ueberschattung">Überschattung</h3>

<p>Befindet sich innerhalb eines Blocks die Definition einer
Variable, die denselben Namen trägt wie eine bereits außerhalb
des Blocks vorkommende Variable, dann überschattet die innere
die äußere Variable. Die Überschattung bleibt auf den Block
beschränkt.

<p>Probieren wir es aus. Das Programm

<pre class="rust ibox">
let x = 1;
{
    let x = 2;
    println!("{}", x);
}
println!("{}", x);
</pre>

<p>liefert die Ausgabe:

<pre class="ibox">
2
1
</pre>

<p>Überschattung kann auch ohne explizite Blöcke stattfinden.
Man muss das so verstehen dass dabei implizit ein innerer Block
gebildet wird, der ganz bis zum Ende des äußeren Blocks verläuft.
Das heißt, man kann das Programm

<pre class="rust ibox">
fn main() {
    let x = 1;
    println!("{}", x);
    let x = 2;
    println!("{}", x);
}
</pre>

<p>als

<pre class="rust ibox">
fn main() {
    let x = 1;
    println!("{}", x);
    {
        let x = 2;
        println!("{}", x);
    }
}
</pre>

<p>lesen.

<h2 id="Kontrollfluss">Kontrollfluss</h2>

<h3 id="Funktionen">Funktionen</h3>

<p>Trifft der Kontrollfluss auf den Aufruf eines Unterprogramms,
dann kommt es zu einem Sprung in das Unterprogramm, woraufhin
der darin vorhandene Code ausgeführt wird. Mit
einer Rücksprunganweisung <code>return</code> kehrt der Kontrollfluss
später wieder an die Stelle des Aufrufs zurück. Wie bei einer
mathematischen Funktion kann das Unterprogramm Argumente und einen
Wert haben.

<p>Das folgende Beispiel zeigt die Berechnung des Umfangs zu einem
gegebenen Radius mittels der Funktion <code>circumference</code>.

<pre class="rust ibox">
use std::f64::consts::PI;

fn circumference(radius: f64) -&gt; f64 {
    return 2.0*PI*radius;
}

fn main() {
    print!("{}", circumference(1.0));
}
</pre>

<p>Steht die Rücksprunganweisung ganz am Ende der Funktion,
darf diese auch entfallen:

<pre class="rust ibox">
fn circumference(radius: f64) -> f64 {
    2.0*PI*radius
}
</pre>

<h3 id="Verzweigungen">Verzweigungen</h3>

<p>Bei vielen Prozeduren kommen im Kontrollfluss Verzweigungen vor.
Das Programm ändert dabei sein Verhalten aufgrund des Wertes von
Variablen. Das folgende Programm macht bspw. unterschiedliche
Ausgaben, je nachdem welcher Wert für die Temperatur <code>theta</code>
angegeben wird.

<pre class="rust ibox">
fn main() {
    let theta = 4.0;
    print!("Draußen ist es ");
    if theta &lt; 0.0 {
        println!("eisig.");
    } else if theta &lt; 10.0 {
        println!("kalt.");
    } else if theta &lt; 16.0 {
        println!("mild.");
    } else {
        println!("warm.");
    }
}
</pre>

<p>Bei der if-Anweisung handelt es sich in Rust eigentlich um einen
Ausdruck. Demnach lässt sich ein if-Ausdruck auch dort angeben,
wo ein Ausdruck bzw. Term erwartet wird. Dies erlaubt eine etwas
elegantere Formulierung des letzten Programms:

<pre class="rust ibox">
fn main() {
    let theta = 4.0;
    let text = if theta &lt;  0.0 {"eisig"}
          else if theta &lt; 10.0 {"kalt"}
          else if theta &lt; 16.0 {"mild"}
          else {"warm"};
    print!("Draußen ist es {}.", text);
}
</pre>

<p>In der Mathematik kommen im Zusammenhang mit ganzen Zahlen oft
rekursive Definitionen vor. Die rekursive Definition der
Potenzierung&nbsp;ist:
<p class="indent">
<var>x</var><sup>0</sup> := 1,<br>
<var>x</var><sup><var>n</var></sup> :=
<var>x</var><sup><var>n</var>&minus;1</sup>&nbsp;&sdot;&nbsp;<var>x</var>.


<p>Diese Definition lässt sich in Rust direkt als rekursive Funktion
angeben:

<pre class="rust ibox">
fn pow(x: f64, n: u32) -&gt; f64 {
    if n == 0 {1.0} else {pow(x, n-1)*x}
}

fn main() {
    print!("{}", pow(2.0, 10));
}
</pre>

<p>Für Fallunterscheidungen gibt es auch den match-Ausdruck.
Dieser Ausdruck vergleicht einen Wert mit einer Liste von Mustern
und wählt den Ausdruck zum ersten passenden Muster. Für die
Potenzierung ergibt sich damit eine äquivalente Formulierung:

<pre class="rust ibox">
fn pow(x: f64, n: u32) -> f64 {
    match n {
        0 => 1.0,
        n => pow(x, n-1)*x
    }
}
</pre>


<h3 id="Schleifen">Schleifen</h3>

<h4>While-Schleifen</h4>

<p>Anstelle von rekursiver Programmierung ist in Rust eher die
iterative Programmierung üblich, was unterschiedliche Gründe hat.
Zum einen lassen sich iterative Programme leichter vom Compiler
optimieren. Zum anderen ist aus Gründen der Effizienz die Größe des
Aufrufstapels und damit die maximale Rekursionstiefe beschränkt.
Man bräuchte Tail-call-Optimierungen, die aber wieder zu Einschränkungen
beim Programmierstil führen. Das heißt nicht, dass rekursive
Programmierung nicht in Rust vorkommt, jedoch ist sie meistens auf
solche baumartige Strukturen und gerichtete Graphen beschränkt, welche
nicht besonders tief sind und demnach nur geringe Rekursionstiefe
benötigen.

<p>Aus der rekursiven Definition der Potenzierung lässt sich
ein iterativer Algorithmus zur Berechnung gewinnen. Unter Benutzung
einer while-Schleife ist der Algorithmus von folgender Gestalt:

<pre class="rust ibox">
fn pow(x: f64, n: u32) -&gt; f64 {
    let mut acc = 1.0;
    let mut i = 0;
    while i &lt; n {
        acc = acc*x;
        i = i + 1;
    }
    acc
}
</pre>

<p>Die Variable <code>i</code> ist eine sogenannte Laufvariable.
Die Laufvariable speichert hier lediglich die Anzahl der
Iterationen. Die Anweisung <code>i = i+1</code> bedeutet
»berechne den Wert des Ausdrucks <code>i+1</code> und überschreibe
die Variable <code>i</code> mit diesem Wert«. Entsprechend ist
die Anweisung <code>acc = acc*x</code> zu verstehen. Für beide Anweisungen
gibt es auch eine Kurzschreibweise:

<pre class="rust ibox">
acc *= x; i += 1;
</pre>

<p>Die Variable <code>acc</code> nimmt die Stellung eines
Akkumulators ein, da sie in der Schleife schrittweise
Multiplikationen ansammelt. Algorithmen mit Akkumulatoren sind
oft von einer besonderen Form, dergestalt dass sie sich im Rahmen
der funktionalen Programmierung als eine sogenannte Faltung
beschreiben lassen. So ist

<pre class="rust ibox">
fn pow(x: f64, n: u32) -&gt; f64 {
    (0..n).fold(1.0, |acc, _| acc*x)
}
</pre>

<p>zum obigen Algorithmus äquivalent. Eine genauere Erläuterung
der Faltung kommt später im Kapitel über funktionale Programmierung.

<h4>For-Schleifen</h4>

<p>Oft günstiger ist die Benutzung von for-Schleifen anstelle von
while-Schleifen. Zur Verdeutlichung hier nochmals die Berechnung
der Potenzierung:

<pre class="rust ibox">
fn pow(x: f64, n: u32) -&gt; f64 {
    let mut acc = 1.0;
    for _ in 0..n {acc *= x;}
    acc
}
</pre>

<p>Hinter dem <code>for</code> steht eigentlich die Laufvariable,
die hier entfallen darf, da in der Schleife kein Zugriff darauf
vorkommt.

<p>Im nächsten Programm kommen for-Schleifen zur Suche von
pythagoreischen Tripeln zur Anwendung. Pythagoreische Tripel sind
solche Tripel aus natürlichen Zahlen, zu denen es ein rechtwinkliges
Dreieck mit diesen Zahlen als Seitenlängen gibt. Demnach sind
natürliche Zahlen <var>a</var>,&nbsp;<var>b</var>,&nbsp;<var>c</var>
gesucht, die die im Satz des Pythagoras enthaltene Gleichung

<p class="indent"><var>a</var><sup>2</sup> + <var>b</var><sup>2</sup>
= <var>c</var><sup>2</sup>

<p>erfüllen. Das Programm findet alle Tripel, bei denen jede
der Seitenlängen maximal 20 beträgt.

<pre class="rust ibox">
fn main() {
    let n = 20;
    for a in 1..=n {
        for b in 1..=n {
            for c in 1..=n {
                if a*a + b*b == c*c {
                    println!("{:2}, {:2}, {:2}", a, b, c);
                }
            }
        }
    }
}
</pre>

<p>Die Ausgabe:

<pre class="ibox">
 3,  4,  5
 4,  3,  5
 5, 12, 13
 6,  8, 10
 8,  6, 10
 8, 15, 17
 9, 12, 15
12,  5, 13
12,  9, 15
12, 16, 20
15,  8, 17
16, 12, 20
</pre>

<p>Das Programm ist ein einfaches Beispiel für eine <i>erschöpfende
Suche</i>, auch <i>Brute-Force-Methode</i> genannt. Hierbei wird
der gesamte Suchraum auf naive Weise durchsucht, ohne weitergehende
mathematische Einsichten zur Anwendung zu bringen. Typisch für diese
Methode ist die hohe Inanspruchnahme des Computers. So kann sich der
Suchraum mit steigenden Parametern beträchtlich vergrößern. Der
Aufwand kann dabei quadratisch, kubisch oder sogar exponentiell
steigen. Irgendwann ist eine Grenze erreicht, wo der Aufwand die
Rechenkapazitäten des Computers übersteigt, so dass die Berechnung
nicht mehr in überschaubarer Zeit zum Ende kommt. Man spricht
auch von einer sogenannten kombinatorischen Explosion.

<p>Im obigen Programm steigt die Zahl der Prüfungen kubisch in
Abhängigkeit der maximalen Seitenlänge. Sind es bei einer Seitenlänge
von 20 noch 8000 Prüfungen, so sind es bei einer Seitenlänge von
100 schon 1&nbsp;Mio. Prüfungen

<p>Von den meisten mathematischen Funktionen
weiß der Computer nichts. Ein paar wenige liegen als
Schaltkreise in der Hardware vor, für alle anderen bedarf es eines
Programms. Ein effizientes Verfahren zur Berechnung der Quadratwurzel
einer Zahl <var>a</var> ist das Heron-Verfahren, das ist die Iteration
<var>x</var><sub><var>n</var>+1</sub>&nbsp;=&nbsp;&phi;(<var>x</var><sub><var>n</var></sub>)
mit Startwert <var>x</var><sub>0</sub>=<var>a</var>/2
und Abbildung

<p class="indent">&phi;(<var>x</var>)
= (<var>x</var> + <var>a</var>/<var>x</var>)/2.

<p>Zur iterativen Formulierung benutzen
wir wieder einfach eine for-Schleife:
<pre class="rust ibox">
fn sqrt(a: f64) -&gt; f64 {
    let mut x = 0.5*a;
    for _ in 0..20 {
        x = 0.5*(x + a/x);
    }
    return x;
}

fn main() {
    println!("{}", sqrt(2.0))
}
</pre>

<p>Das Programm sollte <code>1.414213562373095</code> ausgeben.
Wie viele Iterationen benötigt man? Für Zahlen, die nicht gigantisch
groß oder winzig klein sind, reichen 20 Iterationen mit Sicherheit aus.
Man kann durch Experimente oder mathematische Analyse sicherlich herausfinden,
wie viele Iterationen für eine bestimmte Zahl <var>a</var> notwendig
sind. Eine elegantere Formulierung verzichtet aber auf dieses Wissen
und benutzt stattdessen eine Abbruchbedingung. Der Abbruch der
Schleife wird durch den Befehl <code>break</code> ausgelöst:
<pre class="rust ibox">
fn sqrt(a: f64) -&gt; f64 {
    let mut x = 0.5*a;
    for _ in 0..1000 {
        if (x*x - a).abs() &lt; 1E-14 {break;}
        x = 0.5*(x + a/x);
    }
    return x;
}
</pre>

<p>Die folgende Modifikation des Programms gibt auch die Anzahl der
benötigten Iterationen an. Dazu gibt die Funktion ein aus Wert
und Anzahl bestehendes Paar zurück:
<pre class="rust ibox">
fn sqrt_count(a: f64) -&gt; (f64, u32) {
    let mut x = 0.5*a;
    for k in 0..1000 {
        if (x*x - a).abs() &lt; 1E-14 {return (x, k);}
        x = 0.5*(x + a/x);
    }
    return (x, 1000);
}

fn main() {
    let (x,n) = sqrt_count(2.0);
    println!("Wert: {};", x);
    println!("Iterationen: {}", n); 
}
</pre>

<h2 id="Felder">Felder</h2>

<h3 id="Felder-fester-Laenge">Felder fester Länge</h3>
<p>Ein <i>Feld</i>, auch <i>Array</i> genannt, ist eine zusammenhängende
Folge von Elementen desselben Datentyps. Die Elemente werden dabei
in Speicherzellen gespeichert, welche auch zusammenhängend im Speicher
liegen. Jedes Feld hat eine Länge, das ist die Anzahl der Elemente.
Betrachten wir ein einfaches Programm, welches ein Feld mit
vier Ganzzahlen ausgibt:

<pre class="rust ibox">
fn main() {
    let a: [i32; 4] = [1, 2, 3, 4];
    println!("{:?}", a);
}
</pre>

<p>Hier liegt ein Feld <code>a</code> vom Typ <code>[i32;&nbsp;4]</code> vor,
also vier Speicherzellen mit jeweils einer Zahl vom Typ <code>i32</code>.
Jedes Element lässt sich über eine Indizierung <code>a[i]</code> ansprechen.
Der Index <code>i</code> startet immer ab null. Im genannten Beispiel
gilt daher
<pre class="rust indent">
a[0]==1, a[1]==2, a[2]==3, a[3]==4.
</pre>

<p>Nun wird eine Funktion gezeigt, welche ein Feld nimmt
und die Summe der Elemente zurückgibt. Das lässt sich
wie folgt bewerkstelligen:
<pre class="rust ibox">
fn sum(a: &amp;[i32; 4]) -&gt; i32 {
    let mut acc = 0;
    for x in a {acc += x;}
    acc
}

fn main() {
    let a: [i32; 4] = [1, 2, 3, 4];
    println!("{}", sum(&amp;a));
}
</pre>

<p>Das Feld braucht für diese Aufgabe lediglich ausgeborgt werden,
wofür eine Referenz auf das Feld genügt. Aus disem Grund befindet
sich in der Typ-Signatur des Arguments ein
Et-Zeichen&nbsp;(<code>&amp;</code>). Das Feld selbst besitzt
den Typ <code>[i32;&nbsp;4]</code>. Der Typ
<code>&amp;[i32;&nbsp;4]</code> beschreibt eine <i>Leihgabe</i>
des Feldes, engl. <i>borrow</i>. Unter einer Leihgabe versteht man
einen Zeiger auf das Feld, der durch das Typsystem
um eine sogenannte Lebenszeit angereichert ist.

<p>Ein Zeiger enthält lediglich eine darüber Auskunft gebende Adresse,
wo sich das Feld im Speicher befindet. Der Sinn dahinter besteht darin,
dass ein Unterprogramm auf diese Weise effizient auf das Feld zugreifen
kann. Andernfalls müsste das Feld in den Speicher des Unterprogramms
verschoben oder kopiert werden. Je nach Größe des Feldes bedeutet
das einen erhöhten bis außerordentlichen Aufwand.

<p>Das Konzept der Lebenszeiten gewährleistet bereits zur
Kompilierzeit, dass für Zeiger kritische Probleme wie
<i>Use after free</i> niemals auftreten. Bei Verzicht auf
Lebenszeiten ergibt sich ein einfacher Zeiger, dessen
Dereferenzierung eine unsichere Operation darstellt. Bspw.
nimmt <code>sum</code> bei Benutzung eines einfachen Zeigers
die Form

<pre class="rust ibox">
fn sum(a: *const [i32; 4]) -&gt; i32 {
    let mut acc = 0;
    for x in unsafe{*a}.iter() {acc += x;}
    acc
}
</pre>

<p>an.

<h3 id="Ausschnitte">Ausschnitte von Feldern</h3>
<p>Dem Leser mag nun auffallen, dass die Funktion <code>sum</code>
lediglich Felder der Länge vier verarbeiten kann. Zur Lösung dieses
Problems existiert ein eigener Datentyp, der <i>Slice</i> eines Feldes,
geschrieben <code>&amp;[i32]</code>. Die Signatur der Funktion
<code>sum</code> braucht lediglich auf <code>a:&nbsp;&amp;[i32]</code>
abgeändert werden, und schon lassen sich Summen von Feldern beliebiger
Länge bilden.

<p>Ein Slice besteht intern aus zwei Bestandteilen, einem Zeiger auf den
Anfang des Feldes und der Länge des Feldes. Slices können auch
zusammenhängende Teilbereiche eines Feldes beschreiben. Wenn
nur die ersten drei Zahlen des Feldes aufsummiert werden sollen,
sieht das Programm wie folgt aus:
<pre class="rust ibox">
fn main() {
    let a: [i32; 4] = [1, 2, 3, 4];
    println!("{}", sum(&amp;a[0..3]));
}
</pre>

<p>Der Bereich <code>0..3</code> enthält die Indizes <code>0,1,2</code>.
Daher beschreibt der Slice <code>&amp;a[0..3]</code> eine Referenz auf
<code>[a[0],a[1],a[2]]</code>.

<h3 id="Dynamische-Felder">Dynamische Felder</h3>

<p>Felder vom Typ <code>[T;&nbsp;N]</code> haben immer eine feste,
schon zur Kompilierzeit bekannte Länge <code>N</code>. Da diese
Einschränkung für viele Problemstellungen zu hinderlich ist, gibt es
noch den Datentyp <code>Vec&lt;T&gt;</code> zur Beschreibung von
Feldern, die ihre Länge automatisch vergrößern. Dynamische Felder
werden ganz analog zu den Feldern fester Länge gehandhabt:
<pre class="rust ibox">
fn main() {
    let a: Vec&lt;i32&gt; = vec![1, 2, 3, 4];
    println!("{}", sum(&amp;a));
}
</pre>

<p>Der Aufruf <code>a.push(x)</code> fügt ein Element <code>x</code>
zum Ende von <code>a</code> hinzu. Es folgt eine Funktion
<code>reverse</code>, die ein Feld <code>a</code> umdreht, indem sie
rückwärts durch das Feld iteriert und dabei die Elemente zu einem
neuen Feld <code>acc</code> hinzufügt.

<pre class="rust ibox">
fn reverse(a: &amp;[i32]) -> Vec&lt;i32&gt; {
    let mut acc: Vec&lt;i32&gt; = vec![];
    for x in a.iter().rev() {
        acc.push(*x);
    }
    acc
}

fn main() {
    let a: Vec&lt;i32&gt; = vec![1, 2, 3, 4];
    println!("{:?}", reverse(&amp;a));
}
</pre>

<h3 id="Alleinige-Referenzen">Alleinige Referenzen auf ein Feld</h3>

<p>Zum Umdrehen eines Feldes muss man eigentlich kein neues erzeugen.
Das Feld lässt sich auch selbst umdrehen, man nennt diese Vorgehensweise
<i>in place</i>. Der folgende Algorithmus vertauscht das erste
Element mit dem letzten, das zweite mit dem vorletzten usw. bis
das Verfahren in der Mitte des Feldes angekommen ist.
<pre class="rust ibox">
fn reverse(a: &amp;mut [i32]) {
    let n = a.len();
    for i in 0..n/2 {
        a.swap(i, n-1-i);
    }
}

fn main() {
    let mut a: Vec&lt;i32&gt; = vec![1, 2, 3, 4];
    reverse(&amp;mut a);
    println!("{:?}", a);
}
</pre>
<p>Da dem Feld selbst Veränderung widerfährt, ist hier eine
<i>alleinige Referenz</i> (<i>unique reference</i>) auf den
Gesamtausschnitt des Feldes notwendig. Eine ausführliche Erläuterung,
warum das so ist, folgt später. Zunächst muss man nur wissen dass diese
Art von Referenz die Signatur
<code>&amp;mut</code> anstelle von <code>&amp;</code> besitzt.
Das <code>mut</code> (mutable) weist daraufhin, dass die Daten,
auf die die Referenz zeigt, verändert werden dürfen.

<h3 id="Nochmals-Ausschnitte">Nochmals Ausschnitte von Feldern</h3>

<p>Ausschnitte bestehen nur aus Zeiger und Länge. Intuitiv lässt sich
von einem Ausschnitt ein Teilausschnitt bilden und von diesem wieder
ein Teilausschnitt usw. Solange bis man den leeren Ausschnitt erhält.
Ein Beispiel dazu ist diese Implementation der Summierung: 
<pre class="rust ibox">
fn sum(a: &amp;[i32]) -&gt; i32 {
    if a.is_empty() {0} else {a[0] + sum(&amp;a[1..])}
}
</pre>

<p>Eine solche rekursive Formulierung ist zwar mathematisch elegant,
in der Praxis jedoch leider ineffizient.

<p>Der Ausschnitt <code>&amp;a[i..]</code> ist eine Abkürzung für
<code>&amp;a[i..a.len()]</code>. Außerdem gibt es noch
<code>&amp;a[..j]</code>, das ist <code>&amp;a[0..j]</code>. Demnach
hat <code>&amp;a[..]</code> die Bedeutung <code>&amp;a[0..a.len()]</code>.

<p>Ausschnitte sind recht praktisch, daher sind für diese eine ganze
Reihe von Methoden definiert. Beispielsweise ist eine Methode zur
Sortierung eines veränderbaren Ausschnittes vorhanden:
<pre class="rust ibox">
fn main() {
    let mut a: Vec&lt;i32&gt; = vec![4, 2, 1, 3];
    a[..].sort();
    println!("{:?}", a);
}
</pre>

<h3 id="Stapelspeicher">Stapelspeicher</h3>

<p>Ein wichtiges Hilfsmittel in der Programmierung sind
Stapelspeicher. Diese lassen sich mit Feldern modellieren.
Als Anwendung wird ein Programm gezeigt, das herausfindet
ob die Klammersetzung in einer Zeichenkette korrekt verschachtelt ist.

<p>Das machen wir so: Die Zeichenkette wird von vorne bis hinten
durchgegangen. Trifft das Programm auf eine öffnende Klammer, packet es
diese auf einen Stapel. Trifft es auf eine schließende, nimmt es die
oberste Klammer vom Stapel und schaut ob diese zur schließenden
passt. Wir müssen außerdem bedenken: Ist der Stapel vorzeitig leer
oder verbleiben am Ende noch Klammern auf dem Stapel, liegt auch
ein Mismatch vor.

<p>Die erste Variante benutzt ein Feld <code>stack</code> von
fester Länge und zur Indizierung einen sogenannten <i>Stapelzeiger</i>
<code>sp</code>, engl. <i>stack pointer</i>. Der Stapelzeiger
zeigt immer auf bzw. indiziert immer die leerstehende Stapelzelle
oberhalb des Stapels. Weil die maximale Stapelhöhe fest ist,
sagen wir zehn Zeichen, arbeitet das Programm nur dann korrekt,
falls die Verschachtelung der Klammerung nicht mehr als
zehn Klammern tief ist.

<pre class="rust ibox">
fn close(c: char) -&gt; char {
    match c {
        '(' =&gt; ')', '[' =&gt; ']', '{' =&gt; '}', _ =&gt; '?'
    }
}

fn is_valid(s: &amp;str) -&gt; bool {
    let mut stack: [char; 10] = ['-'; 10];
    let mut sp = 0;
    for c in s.chars() {
        if c == '(' || c == '[' || c == '{' {
            stack[sp] = c;
            sp += 1;
        } else if c == ')' || c == ']' || c == '}' {
            if sp == 0 || c != close(stack[sp-1]) {
                return false;
            } else {
                sp -= 1;
            }
        }
    }
    return sp == 0;
}
</pre>

<p>Bei der zweiten Variante kommt nun ein dynamisches Feld
zur Anwendung, das die Beschränkung der maximalen Verschachtelungstiefe
aufhebt. Ein Stapelzeiger ist hier nicht notwendig, da die
Methoden <code>push</code> und <code>pop</code> vorliegen, die
gerade die Funktionalität eines Stapelspeichers auszeichnen.

<pre class="rust ibox">
fn is_valid(s: &amp;str) -&gt; bool {
    let mut stack: Vec&lt;char&gt; = Vec::new();
    for c in s.chars() {
        if c == '(' || c == '[' || c == '{' {
            stack.push(c);
        } else if c == ')' || c == ']' || c == '}' {
            match stack.pop() {
                Some(x) =&gt; if c != close(x) {return false;},
                None =&gt; {return false;}
            }
        }
    }
    return stack.is_empty();
}
</pre>

<h2 id="Eingaben">Eingaben</h2>
<h3>Eingaben von der Konsole</h3>

<p>In Rust gibt es Funktionen für die Eingaben/Ausgaben im Modul
<code>io</code>. Diese erlauben sehr kontrolliertes Ansprechen
der Schnittstelle zum Betriebssystem, die sowohl Ein- und Ausgaben
über die Konsole als auch über Dateien ermöglicht. Aus diesem Grund
sind die Funktionen etwas unergonomisch. Zur Vereinfachung der Eingabe
gebe ich hier eine Funktion <code>input</code> vor und packe die
technischen Details darein.

<p>Als Beispiel erweitern wir das Programm für die gefühlte
Temperatur um Nutzereingaben.

<pre class="rust ibox">
fn input(prompt: &amp;str) -&gt; String {
    use std::{io, io::Write};
    let mut buffer = String::new();
    print!("{}",prompt);
    io::stdout().flush().unwrap();
    io::stdin().read_line(&amp;mut buffer).unwrap();
    if buffer.ends_with('\n') {
        buffer.pop();
        if buffer.ends_with('\r') {buffer.pop();}
    }
    buffer
}

fn message(theta: f64) -&gt; String {
    let text = if theta &lt;  0.0 {"eisig"}
          else if theta &lt; 10.0 {"kalt"}
          else if theta &lt; 16.0 {"mild"}
          else {"warm"};
    format!("Draußen ist es {}.", text)
}

fn main() {
    loop {
        let s = input("Gib eine Temperatur ein: ");
        match s.trim().parse::&lt;f64&gt;() {
            Ok(theta) =&gt; {
                println!("{}", message(theta));
            },
            _ =&gt; {
                println!("Eine Zahl bitte.");
            }
        };
    }
}
</pre>

<h3>Eingaben aus Dateien</h3>

<p>Eingaben aus Dateien ermöglicht die Funktion
<code>read_to_string</code>. Die Funktion gibt ein Resultat zurück,
bei welchem zwischen Erfolg (<code>Ok</code>) und Fehler
(<code>Err</code>) unterschieden wird.

<pre class="rust ibox">
fn main() {
    let path = "Datei.txt";
    let s = match std::fs::read_to_string(path) {
        Ok(value) =&gt; value,
        _ =&gt; panic!("Fehler: Konnte Datei '{}' nicht finden/lesen.",path)
    };
    println!("Inhalt von Datei '{}':\n{}", path, s);
}
</pre>

<p>Die Datei muss in dem Verzeichnis liegen in welchem das Programm
geöffnet wird. Der Dateipfad kann auch als Kommandozeilenargument
gelesen werden:

<pre class="rust ibox">
let argv: Vec&lt;String&gt; = std::env::args().collect();
let path = &amp;argv[1];
</pre>

</body>
</html>

