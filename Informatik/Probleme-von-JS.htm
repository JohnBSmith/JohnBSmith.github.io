<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Probleme von JavaScript</title>
  <style>
body{
  margin-top: 2em;
  margin-left: 10%;
  margin-bottom: 10em;
  max-width: 40em;
  font-family: "DejaVu Sans", "Verdana", sans-serif;
  color: #404030;
}
@media(max-width: 46em){
  body{margin-left: 6%; margin-left: 4%;}
}
@media(max-width: 26em){
  body{margin-left: 2%; margin-right: 1%;}
  ol, ul{padding-left: 2em;}
}
h1,h2,h3,h4{color: #463c20;}
a{color: #20506a; text-decoration: none;}
a:hover{color: #102a40; text-decoration: underline;}
pre, code{
  font-family: "FreeMono", "Courier New", monospace;
  color: #403020;
}
table.bt{border-collapse: collapse;}
table.bt td, table.bt th{
  border: 1px solid #b0b0a0;
  padding-left: 0.2em;
  text-align: left;
  vertical-align: top;
}
table.bt th{
  background-color: #e0e0c0;
}

.keyword{color: #204080; font-weight: bold;}
.string{color: #a00060;}
.comment{color: #604000;}
.symbol{color: #202020; font-weight: bold;}
.bracket{color: #006060; font-weight: bold;}
.number{color: #204040;}
  </style>
  <script>
function isalpha(s){
  return /^[a-z]+$/i.test(s);
}

function isdigit(s){
  return /^\d+$/.test(s);
}

var keyword = {
  "break": 0,
  "case": 0, "catch": 0, "class": 0, "const": 0, "continue": 0,
  "debugger": 0, "default": 0, "delete": 0, "do": 0,
  "else": 0, "export": 0, "extends": 0,
  "finally": 0, "for": 0, "function": 0,
  "if": 0, "import": 0, "in": 0, "instanceof": 0,
  "new": 0, "return": 0, "super": 0, "switch": 0,
  "this": 0, "throw": 0, "try": 0, "typeof": 0,
  "var": 0, "void": 0,
  "while": 0, "with": 0,
  "yield": 0,
};

function js_syntax(s){
  var id,s2,st,c;
  s2="";
  var i=0;
  while(i<s.length){
    c=s[i];
    if(isalpha(c) || s[i]=='_'){
      id="";
      while(i<s.length && (isalpha(s[i]) || isdigit(s[i]) || s[i]=='_')){
        id+=s[i];
        i++;
      }
      if(keyword.hasOwnProperty(id)){
        s2+="<span class='keyword'>"+id+"</span>";
      }else{
        s2+=id;
      }
    }else if(isdigit(c)){
      st="";
      while(i<s.length && isdigit(s[i])){
        st+=s[i];
        i++;
      }
      s2+="<span class='number'>"+st+"</span>";
    }else if(c=='"'){
      st="<span class='string'>\"";
      i++;
      while(i<s.length && s[i]!='"'){
        st+=s[i];
        i++;
      }
      i++;
      st+="\"</span>";
      s2+=st;
    }else if(c=="'"){
      st="<span class='string'>'";
      i++;
      while(i<s.length && s[i]!="'"){
        st+=s[i];
        i++;
      }
      i++;
      st+="'</span>";
      s2+=st;
    }else if(c=='#'){
      st="<span class='preprocessor'>";
      while(i<s.length && s[i]!='\n'){
        st+=s[i];
        i++;
      }
      st+="</span>";
      s2+=st;
    }else if(c=='/' && i+1<s.length && s[i+1]=='/'){
      st="<span class='comment'>";
      while(i<s.length && s[i]!='\n'){
        st+=s[i];
        i++;
      }
      st+="</span>";
      s2+=st;
    }else if(c=='/' && i+1<s.length && s[i+1]=='*'){
      st="<span class='comment'>/*";
      i+=2;
      while(i+1<s.length && s[i]!='*' && s[i+1]!='/'){
        st+=s[i];
        i++;
      }
      i+=2;
      st+="*/</span>";
      s2+=st;
    }else if(c=='<'){
      st="";
      while(i<s.length && s[i]!='>'){
        st+=s[i];
        i++;
      }
      i++; st+=">";
      s2+=st;
    }else if(c=='&'){
      st="";
      while(i<s.length && s[i]!=';'){
        st+=s[i];
        i++;
      }
      s2+="<span class='symbol'>"+st+";</span>";
      i++;
    }else if(c=='(' || c==')' || c=='[' || c==']' || c=='{' || c=='}'){
      s2+="<span class='bracket'>"+c+"</span>";
      i++;
    }else if(c=='+' || c=='-' || c=='*' || c=='/' || c=='|' ||
      c=='.' || c=='=' || c=='!' || c==':' || c=='%' || c=='^' ||
      c=='~'
    ){
      s2+="<span class='symbol'>"+c+"</span>";
      i++;
    }else{
      s2+=c;
      i++;
    }
  }
  return s2;
}

function main(){
  var a = document.getElementsByClassName("js");
  for(var i=0; i<a.length; i++){
    a[i].innerHTML = js_syntax(a[i].innerHTML);
  }
}

window.onload = main;
  </script>
</head>
<body>

<br>
<h1>Probleme von JavaScript</h1>
<h2 id="toc">Inhaltsverzeichnis</h2>
<ol class="toc">
<li><a href="#Umwandlung">Umwandlung von Arrays in Zeichenketten</a>
<li><a href="#Typisierung">Schwache Typisierung</a>
<li><a href="#Variablen">Globale Variablen</a>
<li><a href="#Operatoren">Operatorüberladung</a>
<li><a href="#this">Das this-Argument</a>
<li><a href="#Woerterbuch">Wörterbuch-Syntax</a>
<li><a href="#Module">Module</a>
</ol>

<p><b>Zusammenfassung:</b> Dieser Text handelt von Problemen der
Programmiersprache JavaScript. Dabei werden sowohl Entwurfsfehler
erläutert als auch solche welche eher konzeptueller Natur sind.
Es wird jeweils darauf eingegangen, wie eine Lösung ausschauen kann
oder hätte ausschauen können.

<h2 id="Umwandlung">Umwandlung von Arrays in Zeichenketten</h2>
<p>Normalerweise sollte die Umwandlung eines Arrays in eine
Zeichenkette auch genau so ausschauen wie das Literal.
Aber in JavaScript fehlen die eckigen Klammern:
<pre class="js">
&gt; String([1,2])
"1,2"
</pre>
<p>Man kann sich denken: »Gut, die kann ich ja noch hinzufügen«.
Aber bei verschachtelten Arrays wird es schlimmer:
<pre class="js">
&gt; String([[1,2],[3,4]])
&gt; "1,2,3,4"
</pre>

<h2 id="Typisierung">Schwache Typisierung</h2>
<pre class="js">
&gt; [1,2]+3
"1,23"
</pre>
<p>Was passiert hier? Nun, das Array wird vor der Addition implizit
in eine Zeichenkette umgewandelt. Wie wir schon gesehen haben, wird
bei der Umwandlung eines Arrays in eine Zeichenkette die Klammerung
ausgelassen.

<p>Man wird es kaum glauben: JavaScript ist typsicher. Ist ein
JavaScript-Interpreter korrekt implementiert, so kann kein
JavaScript-Programm die Speichersicherheit gefärden.
Nur weil JavaScript typsicher ist, heißt das aber nicht, dass es
auch streng typisiert ist.

<h2 id="Variablen">Globale Variablen</h2>
<p>In JavaScript ist es vorgesehen, dass eine undeklarierte Variable
auf der linken Seite einer Zuweisenung automatisch global ist.
In der Funktion
<pre class="js">
function f(x){
  y=2*x;
  return y;
}
</pre>
<p>wird z.&nbsp;B. unintuitiverweise die globale Variable
<code>y</code> geändert, was man höchstwahrscheinlich nicht wollte.
Ein solches Verhalten führt in einer Vielzahl von Fällen zu seltsamen
Bugs. Ein explizite deklaration von globalen Variablen wäre sinnvoll:
<pre class="js">
function f(x){
  <span class='keyword'>global</span> y=2*x;
  return y;
}
</pre>

<h2 id="Operatoren">Operatorüberladung</h2>
<p>In JavaScript ist Operatorüberladung leider nicht möglich, obwohl
es trivial zu implementieren wäre. Es kommt stattdessen folgends
Verhalten zustande:
<pre class="js">
&gt; x = {}; y = {}
&gt; x+y
"[object Object][object Object]"
</pre>
<p>Der Interpreter überprüft ja schon zur Laufzeit, welchen Datentyp
die Variablen <code>x,y</code> besitzen. Falls der Datentyp kein
einfacher ist, werden die Objekte in diesem Residualfall einfach
implizit in Zeichenketten umgewandelt. Genau in diesem Residualfall
wäre es aber möglich gewesen, eine zugehörige Methode <code>add</code>
im Objekt <code>x</code> oder in dessen Prototypenkette aufzurufen:
<pre class="js">
  x+y == x.add(y)
</pre>

<h2 id="this">Das this-Argument</h2>
<p>In JavaScript lässt sich unter Zuhilfenahme von Closures der
Kompositionsoperator formulieren:
<pre class="js">
function compose(g,f){
  return function(x){return g(f(x));};
}
</pre>
<p>Diesen Operator möchten wir nun als Methode einer Funktion
haben. Man macht folgenden Ansatz:
<pre class="js">
Function.prototype.o = function(f){
  return function(x){return this(f(x));};
}
</pre>
<p>Hier ergibt sich das Problem, dass das <code>this</code>-Argument
zur inneren Funktion gehört, und nicht zur äußeren.
Stattdessen ist man gezwungen zu:
<pre class="js">
Function.prototype.o = function(f){
  var g = this;
  return function(x){return g(f(x));};
}
</pre>
<p>Es wäre sinnvoll, wenn es in JavaScript eine Möglichkeit geben
würde, den Namen des <code>this</code>-Arguments individuell
festzulegen, wie bei jeder anderen gewöhnlichen Variable auch. Z.B. so:
<pre class="js">
Function.prototype.o = function(g;f){
  return function(x){return g(f(x));};
}
</pre>


<h2 id="Woerterbuch">Wörterbuch-Syntax</h2>
<p>In JavaScript koinzidieren Wörterbücher mit strukturierten
Objekten. Die Syntax von Wörterbuch- bzw. Objekt-Literalen besitzt
das Manko, dass zunächst keine Ausdrücke als Schlüssel möglich sind.
Weil nämlich die Schreibweisen
<pre class="js">
  t = {"a": 1, "b": 2};
  t = {a: 1, b: 2};
</pre>
<p>äquivalent sind, wäre die letztere Schreibweise zweideutig, wenn
Ausdrücke als Schlüssel auf der linken Seite zugelassen wären.
Man hat diesen Umstand in ES6 durch die Notation
<pre class="js">
  t = {["a"]: 1, ["b"]: 2};
</pre>
<p>umgangen. Diese Notation ist umständlich lang und schaut
dahingehend seltsam aus, dass die Schlüssel doch eigentlich auch
Arrays sein könnten:
<pre class="js">
  t = {[[1,2]]: 1, [[3,4]]: 2};
</pre>
<p>Hier ergibt sich ein weiteres Problem: alle Schlüssel werden
implizit in Zeichenketten umgewandelt. Zumindest bei Ganzzahlen
ergibt das keinen Sinn, da das direkte hashen von Ganzzahlen
wesentlich effizienter ist, als Zeichenketten neu zu erzeugen.
Problematisch ist weiterhin, dass die eckigen Klammern bei der
Umwandlung verloren gehen, die Schlüssel
<pre class="js">
  [1,[2,3]] und [1,2,3]
</pre>
<p>somit gleich sind.

<p>Meines erachtens wäre folgende Syntax sinnvoller gewesen:
<pre class="js">
  t = {"x": 1, "y": 2};
  t = {x=1, y=2};
</pre>
<p>Hiermit lassen sich auch recht angenehm Schlüsselwort-Argumente
(wie sie in Python und&nbsp;R zu finden sind) simulieren.

<h2 id="Module">Module</h2>
<p>Möchte man in JavaScript ein wiederverwendbares Modul schreiben,
so sollten dessen Funktionen in einem eigenen Namensraum stehen.
Betrachten wir folgende Funtkionen die zunächst flach im
Hauptnamesraum stehen:
<pre class="js">
function f(x){return 2*x;}
function g(x){return 3*x;}
</pre>

<p>Das Modul möchten wir nun als <code>M</code> bezeichnen. Die
erste Idee ist, die Funktionen einfach als Slots eines Objektes
<code>M</code> aufzufassen.
<pre class="js">
var M = {
  f: function(x){return 2*x;},
  g: function(x){return 3*x;}
};
</pre>
<p>Falls das Modul nun statische Variablen besitzt, kann auf diese
über das this-Argument zugegriffen werden:
<pre class="js">
var M = {
  name: "M",
  f: function(){return this.name;}
};
</pre>
<p>Hiermit ist es auch möglich, Funktionen aus dem Modul innerhalb
des Moduls aufzurufen. Hier ein Beispiel mit Rekursion:
<pre class="js">
var M = {
  f: function(x){return x==0? 1: 2*this.g(x-1);},
  g: function(x){return x==0? 1: 3*this.f(x-1);}
}
</pre>
<p>Leider kommen wir nun in einen Konflikt, wenn wir eine Funktion
aus dem Modul als Argument an eine andere Funktion übergeben wollen.
<pre class="js">
var M = {
  beta: 2,
  f: function(x){return this.beta*x;},
  g: function(a){return a.map(this.f);}
};
</pre>
<p>Dieses Beispiel wird nicht wie erwartet funktionieren.
Bei der Übergabe von <code>f</code> an <code>map</code> geht
nämlich das this-Argument von <code>f</code> verloren. Somit
kann nicht mehr auf <code>beta</code> zugegriffen werden.

<p>Die Direkte Lösung dieses Problems ist die feste Bindung des
this-Argumentes an <code>f</code>. Dies geschieht durch Hinzufügen
von:
<pre class="js">
M.f = M.f.bind(M);
</pre>
<p>Man könnte anstelle des this-Argumentes auch direkt auf die
Modulvariable zugreifen:
<pre class="js">
var M = {
  beta: 2,
  f: function(x){return M.beta*x;},
  g: function(a){return a.map(M.f);}
};
</pre>
<p>Hier muss aber beachtet werden, dass der Inhalt der Variable
<code>M</code> nicht mehr verändert werden darf. Folgendes
ist also nicht möglich:
<pre class="js">
var M2 = M;
M = undefined;
</pre>
<p>Die Lösung besteht darin, eine lokale Variable für
das Modul einzuführen.
<pre class="js">
var M = (function(){
  var M = {
    beta: 2,
    f: function(x){return M.beta*x;},
    g: function(a){return a.map(M.f);}
  };
  return M;
})();
</pre>
<p>Man hätte auch alle Funktionen und Variablen direkt als lokale
Variablen schreiben können.
<pre class="js">
var M = (function(){
  var beta = 2;
  var f = function(x){return beta*x;};
  var g = function(a){return a.map(f);};
  var Interface = {g: g};
  return Interface;
})();
</pre>
<p>Hier ist alles privat, was sich nicht im Interface befindet.
Leider ist jetzt eine nachträgliche Manipulation des Moduls nicht mehr
möglich, z.&nbsp;B. wenn man das Modul mit <code>M.beta=4</code>
konfigurieren möchte. Es ist aber möglich, konfigurierbare Eigenschaften
des Moduls explizit zum Interface mit aufzunehmen.
<pre class="js">
var M = (function(){
  var config = {beta: 2};
  var f = function(x){return config.beta*x;};
  var g = function(a){return a.map(f);};
  var Interface = {g: g, config: config};
  return Interface;
})();

M.config.beta=4;
</pre>
<p>Bisher haben wir nicht beachtet, dass es auch mehrere Instanzen
eines Moduls geben könnte. Z.&nbsp;B. würde man von einem Modul
gerne eine shallow copy machen und diese Kopie modifizieren.
Alternativ kann das Prototypensystem hierfür verwendet werden.

<p>Möchte man eine nachträgliche Manipulation verbieten, so kann
das Modul als Factory formuliert werden. Eine solche nimmt eine
Konfiguration und erzeugt aus dieser ein konfiguriertes Modul:
<pre class="js">
var M = (function(config){
  var beta = config.beta;
  var f = function(x){return beta*x;};
  var g = function(a){return a.map(f);};
  var Interface = {g: g};
  return Interface;
});

var M1 = M({beta: 4});
</pre>


<h2 id="Literatur">Literatur</h2>
<ol>
<li>Henning Thielemann: »<a href="http://www.parallelnetz.de/ScriptingHater.html"
  >Skriptsprachen-Hassen leichtgemacht</a>«. (2002).
<li>Henning Thielemann: »<a href="http://www.parallelnetz.de/CHater.html"
  >C-Hasser in 10 Tagen</a>«. (2002).
</ol>

</body>
</html>

