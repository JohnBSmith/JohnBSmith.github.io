<!DOCTYPE html>
<html lang="de">
<head>
  <meta charset="UTF-8">
  <title>Zahlentheorie</title>
  <link href="css/main.css" rel="stylesheet">
  <script src="js/main.js"></script>
  <script src="js/py.js"></script>
</head>
<body>

<p>&uparrow;<a href="home.htm">Rezepte</a>

<h1>Elementare Zahlentheorie</h1>

<p>Dieses Kapitel stellt keine eigenständige Einführung in die
elementare Zahlentheorie dar, sondern eine computermathematische
Begleitung. Die Vorgehensweise wird meist sein, Definitionen
algorithmisch direkt umzusetzen. Sind die Algorithmen ineffizient,
weil sie beispielsweise eine törichte erschöpfende Suche beinhalten,
werden daraufhin effizientere Algorithmen entwickelt.

<h2>Inhaltsverzeichnis</h2>
<ol>
<li><a href="#Teilbarkeit">Teilbarkeit</a>
  <ol>
  <li><a href="#Euklidische-Division">Euklidische Division</a>
  <li><a href="#Teilerrelation">Teilerrelation</a>
  <li><a href="#Teilerliste">Teilerliste</a>
  <li><a href="#Teilerfunktion">Teilerfunktion</a>
  <li><a href="#ggT">Größter gemeinsamer Teiler</a>
  <li><a href="#kgV">Kleinstes gemeinsames Vielfaches</a>
  </ol>
<li><a href="#Primzahlen">Primzahlen</a>
  <ol>
  <li><a href="#Probedivision">Probedivision</a>
  <li><a href="#Probedivision-verbessert">Verbesserte Probedivision</a>
  <li><a href="#Miller-Rabin">Miller-Rabin-Test</a>
  </ol>
<li><a href="#PFZ">Primfaktorzerlegung</a>
  <ol>
  <li><a href="#PFZ-Probedivision">Probedivision</a>
  <li><a href="#PFZ-Probedivision-verbessert">Verbesserte Probedivision</a>
  </ol>
<li><a href="#Funktionen">Zahlentheoretische Funktionen</a>
  <ol>
  <li><a href="#Teilerfunktion">Teilerfunktion</a>
  <li><a href="#phi">Eulersche phi-Funktion</a>
  <li><a href="#Carmichael-Funktion">Carmichael-Funktion</a>
  <li><a href="#Moebiusfunktion">Möbiusfunktion</a>
  </ol>
<li><a href="#Restklassen">Restklassen</a>
  <ol>
  <li><a href="#Kongruenz">Kongruenzrelation</a>
  <li><a href="#Kongruenzsysteme">Kongruenzsysteme</a>
  <li><a href="#Einheiten">Einheitengruppe</a>
  <li><a href="#Primitivwurzeln">Primitivwurzeln</a>
  <li><a href="#Inverse">Modulare Inverse</a>
  </ol>
<li><a href="#Hilfsfunktionen">Hilfsfunktionen</a>
  <ol>
  <li><a href="#isqrt">Abgerundete Quadratwurzel</a>
  </ol>
</ol>

<h2 id="Teilbarkeit">Teilbarkeit</h2>

<h3 id="Euklidische-Division">Euklidische Division</h3>

<p>In Python ist die Ganzzahldivision als floor-Division
implementiert. Sie unterscheidet sich streng genommen von der
Ganzzahldivision in der Zahlentheorie, die als euklidische Division
definiert ist. Man kann sie mithilfe der floor-Division wie folgt
erhalten:

<pre class="ibox python">
def sgn(x):
    return 0 if x == 0 else -1 if x &lt; 0 else 1

def div_euc(x, y):
    return sgn(y)*(x//abs(y))

def mod_euc(x, y):
    return x%abs(y)
</pre>

<p>Wie man sieht, unterscheiden sich floor-Division und
euklidische Division bei einem negativen Divisor. Solange keine
negativen Divisoren auftreten, wollen wir auf die Benutzung der
euklidischen Division verzichten.

<h3 id="Teilerrelation">Teilerrelation</h3>

<p>Die Teilerrelation »<var>x</var> teilt <var>n</var>«
ist genau dann erfüllt, wenn die Ganzzahldivision
<code>n//x</code> keinen Rest lässt. Man definiert demnach:

<pre class="ibox python">
def divides(x, n):
    return n%x == 0
</pre>

<p>Man kann die Korrektheit dieser Berechnung anhand der Definition

<p class="indent"><var>x</var> | <var>n</var> :⇔ ∃<var>k</var> ∈ ℤ:
<var>n</var> = <var>k</var><var>x</var>

<p>prüfen. Beschränken wir uns zunächst auf positive Zahlen.
Eine Quantifizierung über unendlich viele ganze Zahlen ist nicht
machbar. Allerdings ist die Existenzquantifizierung
für <var>k</var>&nbsp;&gt;&nbsp;<var>n</var> per se nicht erfüllt.

<pre class="ibox python">
def divides(x, n):
    return any(n == k*x for k in range(0, n + 1))
</pre>

<p>Eine geringfügige Modifikation erlaubt negative Zahlen:

<pre class="ibox python">
def divides(x, n):
    return any(n == k*x for k in range(-abs(n), abs(n) + 1))
</pre>

<h3 id="Teilerliste">Teilerliste</h3>

<p>Zur Ermittlung der Teilerliste von <var>n</var> filtert man einfach
alle Teiler aus dem Bereich von 1 bis einschließlich <var>n</var>
aus:

<pre class="ibox python">
def divisors(n):
    return [x for x in range(1, abs(n) + 1) if n%x == 0]
</pre>

<h3 id="Teilerfunktion">Teilerfunktion</h3>

<p>Der Wert der Teileranzahlfunktion ist schlicht die Länge
der Teilerliste:

<pre class="ibox python">
def divisor_count(n):
    return len(divisors(n))
</pre>

<p>Entsprechend erhält man die Teilersumme als Summe der Elemente:

<pre class="ibox python">
def divisor_sum(n):
    return sum(divisors(n))
</pre>

<p>Die beiden Funktionen sind Spezialfälle der Teilerfunktion:

<pre class="ibox python">
def sigma(k, n):
    return sum(d**k for d in divisors(n))
</pre>

<p>Mit der Teileranzahlfunktion lassen sich
die hochzusammengesetzten Zahlen erzeugen.

<pre class="ibox python">
def highly_composite_numbers(order_max):
    order = 1; n = 1; count = 0
    while order &lt;= order_max:
        c = divisor_count(n)
        if c &gt; count:
            yield (order, n, c)
            count = c; order += 1
        n += 1

for (order, n, count) in highly_composite_numbers(10):
    print("{:2} {:4} {:4}".format(order, n, count))
</pre>

<h3 id="ggT">Größter gemeinsamer Teiler</h3>

<p>Wird zur Berechnung des ggT in direkter Weise dessen
Definition herangezogen, ermöglichen Mengenoperationen eine
sehr knappe Formulierung. Die Teilerlisten werden dabei als
Teilermengen betrachtet, deren Schnittmenge gebildet wird, von
der das Maximum zu ermitteln ist.

<pre class="ibox python">
def gcd(a, b):
    return max(set(divisors(a)) &amp; set(divisors(b)))
</pre>

<p>Klassischer euklidischer Algorithmus:

<pre class="ibox python">
def gcd(a, b):
    if b == 0:
        return a
    elif a == 0:
        return b
    elif b &lt; a:
        return gcd(a - b, b)
    else:
        return gcd(a, b - a)
</pre>

<p>Weil die Funktion endrekursiv ist, kann sie direkt zu einem
iterativen Algorithmus transformiert werden:

<pre class="ibox python">
def gcd(a, b):
    if a == 0:
        return b
    else:
        while b != 0:
            if b &lt; a:
                a = a - b
            else:
                b = b - a
        return a
</pre>

<p>Moderner euklidischer Algorithmus:

<pre class="ibox python">
def gcd(a, b):
    return a if b == 0 else gcd(b, a%b)
</pre>

<p>Diese Funktion ist ebenfalls endrekursiv. Durch Transformation
zu einem iterativen Algorithmus findet sich:

<pre class="ibox python">
def gcd(a, b):
    while b != 0:
        h = a%b; a = b; b = h;
    return a
</pre>

<p>Die Hilfsvariable <code>h</code> kann man in Python entfallen
lassen, indem die betreffende Zeile gegen

<pre class="ibox python">
a, b = b, a%b
</pre>

<p>ersetzt wird.

<p>In Pythons Standardbibliothek ist <code>gcd</code> im
Modul <code>math</code> zu finden.

<h3 id="kgV">Kleinstes gemeinsames Vielfaches</h3>

<p>Das kgV zweier Zahlen wird mittels der Formel

<p class="indent">ggT(<var>a</var>, <var>b</var>) kgV(<var>a</var>, <var>b</var>)
= |<var>a</var><var>b</var>|

<p>berechnet.

<pre class="ibox python">
def lcm(a, b):
    return abs(a*b)//gcd(a, b)
</pre>

<p>Das kgV von mehr als zwei Zahlen ist gemäß

<pre class="ibox python">
from functools import reduce

def lcm(*t):
    return reduce(lambda a, b: abs(a*b)//gcd(a, b), t)
</pre>

<p>zu berechnen.

<p>In Pythons Standardbibliothek ist <code>lcm</code> im
Modul <code>math</code> zu finden.

<h2 id="Primzahlen">Primzahlen</h2>

<h3 id="Probedivision">Probedivision</h3>

<p>Eine Zahl ist eine Primzahl, wenn sie genau zwei Teiler
besitzt. Demzufolge lässt sich der Primzahltest bereits mittels
der Teileranzahlfunktion definieren:

<pre class="ibox python">
def is_prime(n):
    return divisor_count(n) == 2

print([n for n in range(0, 20) if is_prime(n)])
</pre>

<p>Die Ausgabe:

<pre class="ibox">
[2, 3, 5, 7, 11, 13, 17, 19]
</pre>

<p>Zur Ermittlung der ersten <var>m</var> Primzahlen kann man
Werkzeuge aus dem Modul <code>itertools</code> einsetzen:

<pre class="ibox python">
from itertools import count, islice

def primes(m):
    return list(islice(filter(is_prime, count(0)), m))
</pre>

<h3 id="Probedivision-verbessert">Verbesserte Probedivision</h3>

<p>Keine Zahl <var>n</var> besitzt einen echten Teiler <var>k</var>,
bei dem <var>k</var><sup>2</sup> größer als <var>n</var> ist. Nutzt
man diesen Umstand aus, erhält man eine wesentliche Verbesserung
des Primzahltests:

<pre class="ibox python">
def is_prime(n):
    if n &lt; 2: return False
    k = 2
    while k*k &lt;= n:
        if n%k == 0: return False
        k += 1
    return True
</pre>

<p>Eine weitere Verbesserung des Verfahrens erhält man wie folgt.
Ist die Zahl <var>n</var> ungerade, kommt keine gerade Zahl
<var>k</var> mehr als Teiler infrage, weil <var>n</var>
sonst erst recht gerade wäre. Somit darf ab <var>k</var>=3
um&nbsp;2 inkrementiert werden.

<p>Ist die Zahl <var>n</var> weder durch zwei noch durch drei
teilbar, kommt keine durch zwei oder drei teilbare Zahl <var>k</var>
mehr als Teiler infrage, weil <var>n</var> sonst erst recht
durch zwei oder drei teilbar wäre. In den Restklassen modulo 6
verbleiben damit nur noch 1 und 5. Somit darf ab <var>k</var>=5
wechselweise um 2 und 4 inkrementiert werden. Dieser Wechsel lässt
sich elegant dadurch erzeugen, dass das Inkrement von 6 subtrahiert
wird.

<pre class="ibox python">
def is_prime(n):
    if n &lt; 4: return n &gt; 1
    if n%2 == 0 or n%3 == 0: return False
    k = 5; i = 2
    while k*k &lt;= n:
        if n%k == 0: return False
        k += i;
        i = 6 - i
    return True
</pre>

<p>Ferner lässt sich noch die Quadrierung von <var>k</var> aus der
Schleife entfernen, dergestalt dass mit der Funktion <code>isqrt</code>
einmalig die abgerundete Wurzel von <var>n</var> berechnet wird.
Genauer gesagt ist die Bedingung <code>k*k&nbsp;&lt;=&nbsp;n</code>
äquivalent zu <code>k&nbsp;&lt;=&nbsp;isqrt(n)</code>.
Mit der allgemeinen Äquivalenz von 0&nbsp;≤&nbsp;x und
0&nbsp;≤&nbsp;⌊<var>x</var>⌋
findet sich nämlich die äquivalente Umformung

<p class="indent"><var>k</var><sup>2</sup> ≤ <var>n</var>
⇔ <var>k</var> ≤  √<var>n</var>
⇔ 0 ≤ √<var>n</var>&nbsp;&minus;&nbsp;<var>k</var>
⇔ 0 ≤ ⌊√<var>n</var>&nbsp;&minus;&nbsp;<var>k</var>⌋
= ⌊√<var>n</var>⌋&nbsp;&minus;&nbsp;<var>k</var>
⇔&nbsp;<var>k</var>&nbsp;≤&nbsp;⌊√<var>n</var>⌋.

<h3 id="Miller-Rabin">Miller-Rabin-Test</h3>

<p>Die Probedivision verhält sich lediglich für kleine Zahlen
vorteilhaft. Für größere Zahlen beschrieb Gary Miller im Jahr 1976
einen Test, den Michael Rabin im Jahr 1980 zu einem probalistischen
Test modifizierte.

<p>Die ungerade ganze Zahl <var>n</var> &gt; 2 wird zuänchst in die Form
<var>n</var>&nbsp;=&nbsp;2<sup><var>s</var></sup><var>d</var>&nbsp;+&nbsp;1
gebracht. Sei außerdem 1&nbsp;&le;&nbsp;<var>a</var>&nbsp;&lt;&nbsp;<var>n</var>.
Man nennt <var>n</var> eine starke Pseudoprimzahl zur Basis <var>a</var>,
falls mindestens eine der folgenden beiden Bedingungen erfüllt ist:

<ol>
<li><var>a</var><sup><var>d</var></sup> ≡ 1 (mod <var>n</var>),
<li><var>a</var><sup>2<sup><var>r</var></sup><var>d</var></sup>
   ≡ &minus;1 (mod <var>n</var>) für mindestens ein <var>r</var> mit
  0&nbsp;&le;&nbsp;<var>r</var>&nbsp;&lt;&nbsp;<var>s</var>.
</ol>

<p>Andernfalls ist <var>a</var> ein Zeuge dafür, dass <var>n</var>
definitiv zusammengesetzt sein muss. Für den Test wird <var>a</var>
nun zufällig aus dem Bereich
2&nbsp;&le;&nbsp;<var>a</var>&nbsp;&le;&nbsp;<var>n</var>&minus;2
ausgewählt. Wird dieser Test <var>k</var> mal wiederholt, sinkt die
Wahrscheinlichkeit dafür, dass eine zusammengesetzte Zahl fälschlich
als prim gesehen wird, auf 4<sup>&minus;<var>k</var></sup> ab.
Wir wählen <var>k</var>&nbsp;=&nbsp;128 als Vorgabewert.

<pre class="ibox python">
from random import randint

def is_witness(a, n, d, s):
    if pow(a, d, n) == 1:
        return False
    else:
        for r in range(0, s):
            if pow(a, d*2**r, n) == n - 1: return False
    return True

def is_probably_prime(n, count = 128):
    if n == 2 or n == 3:
        return True
    elif n%2 == 0 or n &lt; 2:
        return False
    s = 0; d = n - 1
    while d%2 == 0:
        s += 1; d = d//2
    for i in range(count):
        a = randint(2, n - 2)
        if is_witness(a, n, d, s): return False
    return True
</pre>

<p>Der Test-Algorithmus lässt sich noch ein wenig optimieren:

<pre class="ibox python">
def is_witness(a, n, d, s):
    x = pow(a, d, n)
    if x == 1 or x == n - 1:
        return False
    else:
        for i in range(s - 1):
            x = (x*x)%n
            if x == n - 1: return False
    return True
</pre>

<h2 id="PFZ">Primfaktorzerlegung</h2>

<h3 id="PFZ-Probedivision">Probedivision</h3>

<p>Bei der Faktorisierung per Probedivision wird der kleinste
Primteiler der Zahl ermittelt und so oft abgespalten wie dieser
enthalten ist. Der Vorgang wird anschließend abermals auf die
verbleibende Zahl angewendet. Das geht solange weiter, bis keine
Primteiler mehr enthalten sind bzw. bis die verbleibende Zahl gleich
eins geworden ist.

<pre class="ibox python">
def factor(n):
    assert n &gt; 0
    acc = []
    p = 2
    while n != 1:
        e = 0
        while n%p == 0:
            n = n//p; e += 1
        if e != 0: acc.append((p, e))
        p += 1
    return acc
</pre>

<h3 id="PFZ-Probedivision-verbessert">Verbesserte Probedivision</h3>

<p>Analog zum Primzahltest erhält man eine erhebliche Verbesserung,
wenn man die Bedingung <var>n</var>&nbsp;≠&nbsp;1 bzw.
<var>p</var>&nbsp;≤&nbsp;<var>n</var> gegen
<var>p</var><sup>2</sup>&nbsp;≤&nbsp;<var>n</var>
ersetzt. Ist diese Bedingung nicht erfüllt, muss es sich bei
<var>n</var> im Fall <var>n</var>&nbsp;&ne;&nbsp;1 um einen
Primfaktor handeln.

<pre class="ibox python">
def factor(n):
    acc = []
    p = 2
    while p*p &lt;= n:
        e = 0
        while n%p == 0: n //= p; e += 1
        if e != 0: acc.append((p, e))
        p += 1
    if n != 1: acc.append((n, 1))
    return acc
</pre>

<p>Auch hier erhält man durch Beschränkung auf die Restklassen&nbsp;1
und&nbsp;5 modulo&nbsp;6 nochmals eine geringfügige Beschleunigung.

<pre class="ibox python">
def trial_div(acc, n, p):
    e = 0
    while n%p == 0: n //= p; e += 1
    if e != 0: acc.append((p, e))
    return n

def factor(n):
    acc = []
    n = trial_div(acc, n, 2)
    n = trial_div(acc, n, 3)
    p = 5; i = 2
    while p*p &lt;= n:
        if n%p == 0:
            n = trial_div(acc, n, p)
        p += i; i = 6 - i
    if n != 1: acc.append((n, 1))
    return acc
</pre>

<h2 id="Funktionen">Zahlentheoretische Funktionen</h2>

<h3 id="Teilerfunktion">Teilerfunktion</h3>

<p>Es bezeichnet σ<sub><var>k</var></sub>(<var>n</var>) die
Teilerfunktion. Bedeutsam sind ebenso ihre beiden Spezialfälle,

<ul>
<li>die Teileranzahlfunktion σ<sub>0</sub>(<var>n</var>),
<li>die Teilersummefunktion σ<sub>1</sub>(<var>n</var>), kurz σ(<var>n</var>).
</ul>

<p>Zur Berechnung lässt sich ohne Weiteres die Definition
der Teilerfunktion einsetzen:

<pre class="ibox python">
def sigma(n, k = 1):
    return sum(d**k for d in range(1, n + 1) if n%d == 0)
</pre>

<p>Man kann im Fortgang die Primfaktorzerlegung von <var>n</var>
einsetzen. Daraufhin lässt sich die Summe faktorisieren, wobei
die Faktoren Partialsummen von geometrischen Folgen darstellen.
Setzt man noch jeweils die geometrische Summenformel ein, gelangt
man zu:

<pre class="ibox python">
def sigma(n, k = 1):
    if k == 0:
        return prod((e + 1) for (p, e) in factor(n))
    else:
        return prod((p**(k*e + k) - 1)//(p**k - 1) for (p, e) in factor(n))
</pre>

<p>Im Fall <var>k</var>&nbsp;=&nbsp;0 kommt die geometrische
Summenformel nicht zur Anwendung, bzw. es wäre der Grenzwert
für <var>k</var>&nbsp;→&nbsp;0 zu betrachten.

<h3 id="phi">Eulersche phi-Funktion</h3>

<p>Der Wert &phi;(<var>n</var>) ist definiert als
die Ordnung der Einheitengruppe des Restklassenrings ℤ/<var>n</var>ℤ.
Mit anderen Worten handelt es sich um die Anzahl der multiplikativ
invertierbaren Restklassen modulo <var>n</var>. Demzufolge ist der
Wert wie folgt zu ermitteln:

<pre class="ibox python">
def is_invertible(x, n):
    e = 1 if n != 1 else 0
    return any((x*y)%n == e for y in range(0, n))

def units(n):
    return [k for k in range(0, n) if is_invertible(k, n)]

def phi(n):
    return len(units(n))
</pre>

<p>Bei <var>n</var>&nbsp;=&nbsp;1 handelt es sich um einen Sonderfall,
bei dem das additiv neutrale Element mit dem multiplikativ neutralen
Element zusammenfällt.

<p>Eine elementare Gesetzmäßigkeit ist, dass eine Zahl <var>k</var>
genau dann multiplikativ invertierbar modulo <var>n</var> ist,
wenn <var>k</var> koprim zu <var>n</var> ist, wenn also
ggT(<var>k</var>,&nbsp;<var>n</var>)&nbsp;=&nbsp;1 gilt. Daher gilt:

<pre class="ibox python">
def phi(n):
    return len([k for k in range(0, n) if gcd(n, k) == 1])
</pre>

<p>Der Wert lässt sich mit der Primfaktorzerlegung auch über
eine Produktformel ermitteln:

<pre class="ibox python">
from math import prod

def phi(n):
    return prod(p**(e-1)*(p - 1) for (p, e) in factor(n))
</pre>

<p>Setzt man die Probedivision zur Primfaktorzerlegung
ein, findet sich:

<pre class="ibox python">
def phi(n):
    assert n > 0
    y = 1; p = 2
    while p*p &lt;= n:
        e = 0
        while n%p == 0: n //= p; e += 1
        if e != 0: y *= p**(e-1)*(p - 1)
        p += 1
    if n != 1: y *= (n - 1)
    return y
</pre>

<h3 id="Carmichael-Funktion">Carmichael-Funktion</h3>

<p>Der Wert &lambda;(<var>n</var>) ist definiert als der
Gruppenexponent der Einheitengruppe des Restklassenrings
ℤ/<var>n</var>ℤ. Die algorithmische Umsetzung dieser
Definition:

<pre class="ibox python">
def units(n):
    return [x for x in range(0, n) if gcd(n, x) == 1]

def carm(n):
    e = 1 if n != 1 else 0
    m = 1; G = units(n)
    while True:
        if all(pow(g, m, n) == e for g in G): return m
        m += 1
</pre>

<p>Die Carmichal-Funktion wurde <code>carm</code> anstelle
<code>lambda</code> genannt, weil <code>lambda</code> in Python
ein Schlüsselwort ist.

<h3 id="Moebiusfunktion">Möbiusfunktion</h3>

<p>Der Wert der Möbiusfunktion ist gemäß ihrer Definition
folgendermaßen zu ermitteln:

<pre class="ibox python">
def mu(n):
    assert n > 0
    a = factor(n)
    if any(e != 1 for (p, e) in a):
        return 0
    elif len(a)%2 == 0:
        return 1
    else:
        return -1
</pre>

<h2 id="Restklassen">Restklassen</h2>

<h3 id="Kongruenz">Kongruenzrelation</h3>

<p>Zwei Zahlen <var>a</var>,&nbsp;<var>b</var> heißen kongruent
modulo <var>m</var>, kurz
<var>a</var>&nbsp;≡&nbsp;<var>b</var>&nbsp;(mod&nbsp;<var>m</var>),
wenn die Division durch <var>m</var> bei beiden Zahlen den gleichen
Rest lässt. Weil dieser Rest das Ergebnis der Modulo-Operation
ist, kann die Kongruenzrelation als

<pre class="ibox python">
def is_cong(a, b, m):
    return a%m == b%m
</pre>

<p>implementiert werden. Zwei Zahlen sind genau dann kongruent
modulo <var>m</var>, wenn ihre Differenz durch <var>m</var>
teilbar ist, womit man die Kongruenzrelation alternativ als

<pre class="ibox python">
def is_cong(a, b, m):
    return (a - b)%m == 0
</pre>

<p>implementieren kann. Diese Variante besitzt den Vorteil, eine Division
weniger ausführen zu müssen, deren Berechnungen aufwendig sind.

<h3 id="Kongruenzsysteme">Kongruenzsysteme</h3>

<p>Aufgabe sei es zunächst, sämtliche Lösungen der Kongruenz

<p class="indent"><var>x</var> ≡ <var>a</var> (mod <var>m</var>)

<p>zu bestimmen. Erfreulich ist hierbei der Umstand, dass der
Restklassenring ℤ/<var>m</var>ℤ nur endlich viele Elemente besitzt,
deren kanonische Repräsentanten den Bereich
<code>range(0,&nbsp;m)</code> bilden. Ist <var>m</var> hinreichend
klein, kann die Lösungsmenge also durch erschöpfende Suche ermittelt
werden. Ohne Frage ist das töricht, weil die eindeutige Lösung
sinnfällig direkt als <code>a%m</code> vorliegt.

<p>Nun betrachten wir aber die Aufgabe, dass die beiden Kongruenzen

<p class="indent"><var>x</var> ≡ <var>a</var> (mod <var>m</var>),<br>
<var>x</var> ≡ <var>b</var> (mod <var>n</var>)

<p>gleichzeitig erfüllt sein sollen. Ein solches Problem bezeichnet
man als <i>System von Kongruenzen</i> oder als
<i>simultane Kongruenz</i>. Ähnlich wie bei einem Gleichungssystem
handelt es sich schlicht um eine logische UND-Verknüpfung von
Kongruenzen. Man kann es sogar als Gleichungssystem

<p class="indent">[<var>x</var>]<sub><var>m</var></sub> = [<var>a</var>]<sub><var>m</var></sub>,<br>
[<var>x</var>]<sub><var>n</var></sub> = [<var>b</var>]<sub><var>n</var></sub>

<p>betrachten. Die kanonische Projektion
[<var>x</var>]<sub><var>m</var></sub> wird als <code>x%m</code> kodiert.
Es ist nun so, dass diese Projektion periodisch mit Periodenlänge
<var>m</var> ist. Infolge ist die Abbildung

<p class="indent">x ↦ ([<var>x</var>]<sub><var>m</var></sub>, [<var>x</var>]<sub><var>n</var></sub>)

<p>periodisch mit Periodenlänge kgV(<var>m</var>,&nbsp;<var>n</var>).
Die erschöpfende Suche darf also als

<pre class="ibox python">
def solve(a, m, b, n):
    return [x for x in range(0, lcm(m, n))
        if is_cong(x, a, m) and is_cong(x, b, n)]
</pre>

<p>implementiert werden. Die allgemeine Formulierung

<pre class="ibox python">
def solve(s):
    M = lcm(*(m for a, m in s))
    return [x for x in range(0, M)
        if all(is_cong(x, a, m) for a, m in s)]
</pre>

<p>löst ein System von beliebig vielen Kongruenzen.

<h3 id="Einheiten">Einheitengruppe</h3>

<p>Wie bereits im Abschnitt zur phi-Funktion ausgeführt,
sind die Einheiten genau die zum Modul koprimen Repräsentanten.
Die Berechnung der Einheitengruppe des Restklassenrings
ℤ/<var>n</var>ℤ kann somit als

<pre class="ibox python">
def units(n):
    return [x for x in range(0, n) if gcd(n, x) == 1]
</pre>

<p>erfolgen. Die Inverse eines Repräsentanten wird durch

<pre class="ibox python">
def inv(x, n):
    e = 1 if n != 1 else 0
    for y in range(0, n):
        if (x*y)%n == e: return y
</pre>

<p>berechnet. Das folgende Programm erstellt die Gruppentafel der
Einheitengruppe:

<pre class="ibox python">
def print_group_table(n, space = 2):
    G = units(n)
    fmt = lambda x: "{:>{}}".format(x, space)
    print(fmt("*") + " | " + " ".join(fmt(y) for y in G))
    print("─"*(space + 2 + (space + 1)*len(G)))
    for x in G:
        print(fmt(x) + " | " + " ".join(fmt((x*y)%n) for y in G))
</pre>

<h3 id="Primitivwurzeln">Primitivwurzeln</h3>

<p>Für manche <var>n</vaR> ist die Einheitengruppe von ℤ/<var>n</var>ℤ
eine zyklische Gruppe. Das Erzeugnis ⟨<var>g</var>⟩ wird durch

<pre class="ibox python">
def generate(g, n):
    acc = set()
    x = 1 if n != 1 else 0
    while not x in acc:
        acc.add(x)
        x = (x*g)%n
    return acc
</pre>

<p>berechnet. Existiert ein Erzeuger, das heißt, ein <var>g</var> mit
⟨<var>g</var>⟩&nbsp;=&nbsp;<var>G</var>, dann
ist <var>G</var> zyklisch:

<pre class="ibox python">
def is_cyclic(n):
    G = units(n); setG = set(G)
    return any(generate(g, n) == setG for g in G)
</pre>

<p>Die Erzeuger einer zyklischen Einheitengruppe
bezeichnet man als <i>Primitivwurzeln</i>. Wir können sie mit

<pre class="ibox python">
def generators(n):
    G = units(n); setG = set(G)
    return [g for g in G if generate(g, n) == setG]
</pre>

<p>berechnen.

<h3 id="Inverse">Modulare Inverse</h3>

<p>Für manche Aufgaben benötigt man die Inverse einer gegebenen Funktion
<var>f</var>:&nbsp;ℤ/<var>m</var>ℤ&nbsp;→&nbsp;ℤ/<var>m</var>ℤ. Weil <var>f</var>
dabei nicht als Injektion vorausgesetzt werden soll, muss die Inverse
immer das Urbild ihres Arguments berechnen. Für kleine <var>m</var> lässt
sich dieses Problem in kunstloser Weise lösen, indem einmalig
die gesamte invertierte Wertetabelle berechnet wird.

<pre class="ibox python">
def inv(f, m):
    d = {}
    for x in range(m):
        y = f(x, m)
        if y in d:
            d[y].append(x)
        else:
            d[y] = [x]
    def finv(y):
        return d[y] if y in d else []
    return finv, sorted(d.keys())

def tabulate_inv(f, m):
    finv, img = inv(f, m)
    space = len(str(m - 1))
    for n in img:
        print("{:{}}: {}".format(n, space, finv(n)))
</pre>

<p>Beispielsweise berechnet

<pre class="ibox python">
def sq(x, m):
    return (x*x) % m

tabulate_inv(sq, 24)
</pre>

<p>die Wertetabelle der Quadratwurzel modulo&nbsp;24. Das Programm
erzeugt die Ausgabe:

<pre class="ibox">
 0: [0, 12]
 1: [1, 5, 7, 11, 13, 17, 19, 23]
 4: [2, 10, 14, 22]
 9: [3, 9, 15, 21]
12: [6, 18]
16: [4, 8, 16, 20]
</pre>

<p>Anhand der invertierten Wertetabelle lassen sich insofern die
quadratischen Reste bestimmen. Man bezeichnet ein <var>a</var> als
quadratischen Rest modulo&nbsp;<var>m</var>, wenn die Kongruenz
<var>x</var><sup>2</sup>&nbsp;≡&nbsp;<var>a</var>&nbsp;(mod&nbsp;<var>m</var>)
eine nichtleere Lösungsmenge besitzt. Das Programm

<pre class="ibox python">
def quadratic_residues(m):
    _, img = inv(sq, m)
    coprime_t = [a for a in img if gcd(a, m) == 1]
    coprime_f = [a for a in img if gcd(a, m) != 1]
    return coprime_t, coprime_f

for m in range(1, 20):
    coprime_t, coprime_f = quadratic_residues(m)
    print("mod {:2}: {}, {}".format(m, coprime_t, coprime_f))
</pre>

<p>berechnet die Tafel der quadratischen Reste, wobei zum Modul
teilerfremde quadratische Reste von den übrigen getrennt als
Erstes aufgelistet werden.

<h2 id="Hilfsfunktionen">Hilfsfunktionen</h2>

<h3 id="isqrt">Abgerundete Quadratwurzel</h3>

<h4>Bisektion</h4>

<p>Die Bisektion ist ein gutmütiges, vergleichsweise leicht einsichtiges
numerisches Verfahren. Wir können sie durch Anpassung auch zur Berechnung
der abgerundeten Wurzel einsetzen. Im Unterschied zur Bisektion bei
reellen Funktionen liefert sie hier das exakte Ergebnis in einer
endlichen Anzahl von Schritten.

<pre class="ibox python">
def isqrt(n):
    assert isinstance(n, int) and n &gt;= 0
    a = 0; b = n + 1
    while a != b - 1:
        m = (a + b)//2
        if m*m &lt;= n:
            a = m
        else:
            b = m
    return a
</pre>

<p>Beim Eintritt in die Funktion soll <var>n</var>&nbsp;≥&nbsp;0 als
Vorbedingung gelten. Die zielführende Schleifeninvariante ist
<var>a</var><sup>2</sup>&nbsp;≤&nbsp;<var>n</var>&nbsp;&lt;&nbsp;<var>b</var><sup>2</sup>.
Mit dem Austritt aus der Schleife gilt nun zusätzlich
<var>b</var>&nbsp;=&nbsp;<var>a</var>&nbsp;+&nbsp;1,
und somit

<p class="indent"><var>a</var><sup>2</sup> ≤ <var>n</var> &lt; (<var>a</var> + 1)<sup>2</sup>
⇔ <var>a</var> ≤ √<var>n</var> &lt; <var>a</var> + 1
⇔&nbsp;0&nbsp;≤&nbsp;√<var>n</var>&nbsp;&minus;&nbsp;<var>a</var>&nbsp;&lt;&nbsp;1
⇔&nbsp;<var>a</var>&nbsp;=&nbsp;⌊√<var>n</var>⌋.

<p>Im letzten Schritt wurde genutzt

<p class="indent"><var>y</var> = ⌊<var>x</var>⌋
:⇔ <var>y</var> ∈ ℤ und 0 ≤ <var>x</var> &minus; <var>y</var> &lt; 1.

<p>Wie gewünscht gilt <var>a</var>&nbsp;=&nbsp;⌊√<var>n</var>⌋
beim Verlassen der Funktion. Es wurde <code>isqrt</code> nach einigen
Jahren dem Modul <code>math</code> hinzugefügt. Man erhält demgemäß
mit

<pre class="ibox python">
assert all(isqrt(n) == math.isqrt(n) for n in range(0, 10000))
</pre>

<p>noch kurzerhand einen flüchtigen Realitätsabgleich.

<h4>Heron-Verfahren</h4>

<p>Obgleich die Bisektion eine logarithmische Zeitkomplexität besitzt,
kommt eine Anpassung des Heron-Verfahrens zumindest für große Zahlen
noch wesentlich schneller zum Ziel. Eine schnell zu berechnende,
möglichst gute Startnäherung verleiht dem Verfahren den Feinschliff.

<pre class="ibox python">
def isqrt(n):
    assert isinstance(n, int) and n &gt;= 0
    if n == 0: return 0
    x = 1 &lt;&lt; (n.bit_length() + 1 &gt;&gt; 1)
    while True:
        y = (x + n//x) &gt;&gt; 1
        if y &gt;= x:
            return x
        x = y
</pre>

<p>Die zielführende Schleifeninvariante ist
√<var>n</var>&nbsp;&lt;&nbsp;<var>x</var>&nbsp;+&nbsp;1. Dass sie von
der Zuweisung <var>x</var>&nbsp;:=&nbsp;<var>y</var> unberührt bleibt,
bestätigt die aus
0&nbsp;≤&nbsp;(<var>x</var>&nbsp;&minus;&nbsp;√<var>n</var>)<sup>2</sup>
gefolgerte Abschätzung

<p class="indent">√<var>n</var> ≤ (<var>x</var> + <var>n</var>/<var>x</var>)/2
&lt; ⌊(<var>x</var> + <var>n</var>/<var>x</var>)/2⌋ + 1
=&nbsp;⌊(<var>x</var>&nbsp;+&nbsp;⌊<var>n</var>/<var>x</var>⌋)/2⌋&nbsp;+&nbsp;1.

<p>Beim Austritt aus der Funktion gilt außerdem

<p class="indent"><var>x</var> ≤ <var>y</var>
= ⌊(<var>x</var> + <var>n</var>/<var>x</var>)/2⌋
≤ (<var>x</var> + <var>n</var>/<var>x</var>)/2,

<p>was man für <var>x</var>&nbsp;&gt;&nbsp;0 zu <var>x</var><sup>2</sup> ≤ <var>n</var>
umformen kann. Insgesamt gilt also beim Austritt wie gewünscht

<p class="indent"><var>x</var> ≤ √<var>n</var> &lt; <var>x</var> + 1
⇔ 0 ≤ √<var>n</var> &minus; <var>x</var> &lt; 1
⇔&nbsp;<var>x</var>&nbsp;=&nbsp;⌊√<var>n</var>⌋.

<p>Schließlich ist noch zu prüfen, dass die Schleifeninvariante auch beim
Eintritt in die Schleife erfüllt ist. Hierzu wird die Startnäherung in die
Invariante eingesetzt. Weiterhin besteht die Beziehung

<p class="indent"><code>bit_length</code>(<var>n</var>) = ⌊log<sub>2</sub>(<var>n</var>)⌋ + 1.

<p>Zu prüfen ist also, dass jedes <var>n</var>&nbsp;≥&nbsp;1 der Ungleichung

<p class="indent">√<var>n</var> &lt; 2<sup>⌊(⌊log<sub>2</sub>(<var>n</var>)⌋ + 2)/2⌋</sup> + 1
= 2<sup>⌊log<sub>2</sub>(<var>n</var>)/2⌋ + 1</sup> + 1

<p>genügt. Sie lässt sich in die logarithmierte äquivalente Form

<p class="indent">log<sub>2</sub>(√<var>n</var> &minus; 1) &minus; 1 &lt; ⌊log<sub>2</sub>(<var>n</var>)/2⌋

<p>bringen. Aufgrund der Identität <var>x</var>&nbsp;&minus;&nbsp;1&nbsp;&lt;&nbsp;⌊<var>x</var>⌋
folgt die Ungleichung aus

<p class="indent">log<sub>2</sub>(√<var>n</var> &minus; 1) ≤ log<sub>2</sub>(<var>n</var>)/2
⇔ (√<var>n</var> &minus; 1)<sup>2</sup> ≤ <var>n</var>
⇔&nbsp;<var>n</var>&nbsp;≥&nbsp;1/4.

</body>
</html>
