<!DOCTYPE html>
<html>
<head>
  <meta charset="UTF-8">
  <title>nat_recursion</title>
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link href="main.css" rel="stylesheet">
</head>
<body>
<h3>Theorem nat_recursion</h3>
<div class='box'><div class='thm'><b class='thm'>Theorem.</b> nat_recursion<br>
set X → x0 ∈ X →
  (∀n. n ∈ ℕ → ∀x. x ∈ X → φ n x ∈ X) → ∃g. ∀f. g = f ↔ map f ℕ X ∧
  (app f 0 = x0 ∧ ∀n. n ∈ ℕ → app f (n + 1) = φ n (app f n))</div></div>
<p>The Dedekind recursion theorem. It states that there exists
exactly one <a href='map_equi.htm'>mapping</a> f:&nbsp;ℕ&nbsp;→&nbsp;X that satisfies the
recurrence<br>
&nbsp;&nbsp;f (n + 1) = φ n (f n)<br>
with initial value f 0 = x<sub>0</sub>. Here, x<sub>0</sub> may
be any element and φ&nbsp;n&nbsp;x any term. It is the corresponding
recursion theorem to the <a href='nat_induction.htm'>induction principle</a> for
<a href='nat_eq.htm'>natural numbers</a>.<br>
<br>
<b>Proof sketch</b><br>
The existence of f is shown in <a href='nat_rec_existence.htm'>nat_rec_existence</a>,
its uniqueness in <a href='nat_rec_uniqueness.htm'>nat_rec_uniqueness</a>.</p><pre><b>Proof</b>
let rec f ↔ app f 0 = x0 ∧
  (∀n. n ∈ ℕ → app f (n + 1) = φ n (app f n)).
01. 1 ⊢ set X, <a href='hypo.htm'>hypo</a>.
02. 2 ⊢ x0 ∈ X, <a href='hypo.htm'>hypo</a>.
03. 3 ⊢ ∀n. n ∈ ℕ → ∀x. x ∈ X → φ n x ∈ X, <a href='hypo.htm'>hypo</a>.
04. 1, 2, 3 ⊢ ∃f. map f ℕ X ∧ rec f, <a href='nat_rec_existence.htm'>nat_rec_existence</a> 1 2 3.
05. 5 ⊢ map f ℕ X ∧ rec f, <a href='hypo.htm'>hypo</a>.
06. 6 ⊢ map g ℕ X ∧ rec g, <a href='hypo.htm'>hypo</a>.
07. 5 ⊢ map f ℕ X, <a href='conj_eliml.htm'>conj_eliml</a> 5.
08. 6 ⊢ map g ℕ X, <a href='conj_eliml.htm'>conj_eliml</a> 6.
09. 5 ⊢ rec f, <a href='conj_elimr.htm'>conj_elimr</a> 5.
10. 6 ⊢ rec g, <a href='conj_elimr.htm'>conj_elimr</a> 6.
11. 5, 6 ⊢ ∀n. n ∈ ℕ → app f n = app g n,
  <a href='nat_rec_uniqueness.htm'>nat_rec_uniqueness</a> 9 10, φ n x = φ n x.
12. 5, 6 ⊢ f = g, <a href='map_extensionality.htm'>map_extensionality</a> 7 8 11.
13. ⊢ map f ℕ X ∧ rec f → map g ℕ X ∧ rec g → f = g,
  <a href='subj_intro_ii.htm'>subj_intro_ii</a> 12.
14. ⊢ ∀g. map f ℕ X ∧ rec f → map g ℕ X ∧ rec g → f = g,
  <a href='uq_intro.htm'>uq_intro</a> 13.
15. ⊢ ∀f. ∀g. map f ℕ X ∧ rec f → map g ℕ X ∧ rec g → f = g,
  <a href='uq_intro.htm'>uq_intro</a> 14.
16. 1, 2, 3 ⊢ ∃g. ∀f. g = f ↔ map f ℕ X ∧ rec f, <a href='ex_uniq_intro.htm'>ex_uniq_intro</a> 4 15.
nat_recursion. ⊢ set X → x0 ∈ X →
  (∀n. n ∈ ℕ → ∀x. x ∈ X → φ n x ∈ X) → ∃g. ∀f. g = f ↔ map f ℕ X ∧
  (app f 0 = x0 ∧ ∀n. n ∈ ℕ → app f (n + 1) = φ n (app f n)),
  <a href='subj_intro_iii.htm'>subj_intro_iii</a> 16.
</pre>
<p><b>Dependencies</b><br>The given proof depends on 18 axioms:<br><a href='comp.htm'>comp</a>, <a href='efq.htm'>efq</a>, <a href='eq_refl.htm'>eq_refl</a>, <a href='eq_subst.htm'>eq_subst</a>, <a href='ext.htm'>ext</a>, <a href='lem.htm'>lem</a>, <a href='pairing.htm'>pairing</a>, <a href='power.htm'>power</a>, <a href='radd_assoc.htm'>radd_assoc</a>, <a href='radd_closed.htm'>radd_closed</a>, <a href='radd_inv.htm'>radd_inv</a>, <a href='radd_neutr.htm'>radd_neutr</a>, <a href='real_is_set.htm'>real_is_set</a>, <a href='rle_compat_add.htm'>rle_compat_add</a>, <a href='rle_trans.htm'>rle_trans</a>, <a href='rneg_closed.htm'>rneg_closed</a>, <a href='subset.htm'>subset</a>, <a href='union.htm'>union</a>.</p>
</body>
</html>